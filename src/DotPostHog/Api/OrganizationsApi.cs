/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DotPostHog.Client;
using DotPostHog.Model;

namespace DotPostHog.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationDomain</returns>
        PostHogOrganizationDomain DomainsCreate(string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationDomain</returns>
        ApiResponse<PostHogOrganizationDomain> DomainsCreateWithHttpInfo(string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DomainsDestroy(Guid id, string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DomainsDestroyWithHttpInfo(Guid id, string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedOrganizationDomainList</returns>
        PostHogPaginatedOrganizationDomainList DomainsList(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedOrganizationDomainList</returns>
        ApiResponse<PostHogPaginatedOrganizationDomainList> DomainsListWithHttpInfo(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedOrganizationDomain"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationDomain</returns>
        PostHogOrganizationDomain DomainsPartialUpdate(Guid id, string parentLookupOrganizationId, PostHogPatchedOrganizationDomain postHogPatchedOrganizationDomain = default(PostHogPatchedOrganizationDomain), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedOrganizationDomain"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationDomain</returns>
        ApiResponse<PostHogOrganizationDomain> DomainsPartialUpdateWithHttpInfo(Guid id, string parentLookupOrganizationId, PostHogPatchedOrganizationDomain postHogPatchedOrganizationDomain = default(PostHogPatchedOrganizationDomain), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationDomain</returns>
        PostHogOrganizationDomain DomainsRetrieve(Guid id, string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationDomain</returns>
        ApiResponse<PostHogOrganizationDomain> DomainsRetrieveWithHttpInfo(Guid id, string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationDomain</returns>
        PostHogOrganizationDomain DomainsUpdate(Guid id, string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationDomain</returns>
        ApiResponse<PostHogOrganizationDomain> DomainsUpdateWithHttpInfo(Guid id, string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationDomain</returns>
        PostHogOrganizationDomain DomainsVerifyCreate(Guid id, string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationDomain</returns>
        ApiResponse<PostHogOrganizationDomain> DomainsVerifyCreateWithHttpInfo(Guid id, string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all feature flags for a given organization and key.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void FeatureFlagsCopyFlagsCreate(string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all feature flags for a given organization and key.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FeatureFlagsCopyFlagsCreateWithHttpInfo(string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all feature flags for a given organization and key.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey"></param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void FeatureFlagsRetrieve(string featureFlagKey, string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all feature flags for a given organization and key.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey"></param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FeatureFlagsRetrieveWithHttpInfo(string featureFlagKey, string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationInvite"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationInvite</returns>
        PostHogOrganizationInvite InvitesBulkCreate(string parentLookupOrganizationId, PostHogOrganizationInvite postHogOrganizationInvite, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationInvite"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationInvite</returns>
        ApiResponse<PostHogOrganizationInvite> InvitesBulkCreateWithHttpInfo(string parentLookupOrganizationId, PostHogOrganizationInvite postHogOrganizationInvite, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationInvite"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationInvite</returns>
        PostHogOrganizationInvite InvitesCreate(string parentLookupOrganizationId, PostHogOrganizationInvite postHogOrganizationInvite, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationInvite"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationInvite</returns>
        ApiResponse<PostHogOrganizationInvite> InvitesCreateWithHttpInfo(string parentLookupOrganizationId, PostHogOrganizationInvite postHogOrganizationInvite, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this organization invite.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void InvitesDestroy(Guid id, string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this organization invite.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InvitesDestroyWithHttpInfo(Guid id, string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedOrganizationInviteList</returns>
        PostHogPaginatedOrganizationInviteList InvitesList(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedOrganizationInviteList</returns>
        ApiResponse<PostHogPaginatedOrganizationInviteList> InvitesListWithHttpInfo(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void MembersDestroy(string parentLookupOrganizationId, Guid userUuid, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MembersDestroyWithHttpInfo(string parentLookupOrganizationId, Guid userUuid, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedOrganizationMemberList</returns>
        PostHogPaginatedOrganizationMemberList MembersList(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedOrganizationMemberList</returns>
        ApiResponse<PostHogPaginatedOrganizationMemberList> MembersListWithHttpInfo(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="postHogPatchedOrganizationMember"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationMember</returns>
        PostHogOrganizationMember MembersPartialUpdate(string parentLookupOrganizationId, Guid userUuid, PostHogPatchedOrganizationMember postHogPatchedOrganizationMember = default(PostHogPatchedOrganizationMember), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="postHogPatchedOrganizationMember"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationMember</returns>
        ApiResponse<PostHogOrganizationMember> MembersPartialUpdateWithHttpInfo(string parentLookupOrganizationId, Guid userUuid, PostHogPatchedOrganizationMember postHogPatchedOrganizationMember = default(PostHogPatchedOrganizationMember), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="postHogOrganizationMember"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationMember</returns>
        PostHogOrganizationMember MembersUpdate(string parentLookupOrganizationId, Guid userUuid, PostHogOrganizationMember postHogOrganizationMember = default(PostHogOrganizationMember), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="postHogOrganizationMember"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationMember</returns>
        ApiResponse<PostHogOrganizationMember> MembersUpdateWithHttpInfo(string parentLookupOrganizationId, Guid userUuid, PostHogOrganizationMember postHogOrganizationMember = default(PostHogOrganizationMember), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        PostHogPlugin PipelineTransformationsActivityRetrieve(string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        ApiResponse<PostHogPlugin> PipelineTransformationsActivityRetrieveWithHttpInfo(string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        PostHogPlugin PipelineTransformationsCheckForUpdatesRetrieve(int id, string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        ApiResponse<PostHogPlugin> PipelineTransformationsCheckForUpdatesRetrieveWithHttpInfo(int id, string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        PostHogPlugin PipelineTransformationsCreate(string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        ApiResponse<PostHogPlugin> PipelineTransformationsCreateWithHttpInfo(string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PipelineTransformationsDestroy(int id, string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PipelineTransformationsDestroyWithHttpInfo(int id, string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedPluginList</returns>
        PostHogPaginatedPluginList PipelineTransformationsList(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedPluginList</returns>
        ApiResponse<PostHogPaginatedPluginList> PipelineTransformationsListWithHttpInfo(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        PostHogPlugin PipelineTransformationsPartialUpdate(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        ApiResponse<PostHogPlugin> PipelineTransformationsPartialUpdateWithHttpInfo(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        PostHogPlugin PipelineTransformationsRepositoryRetrieve(string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        ApiResponse<PostHogPlugin> PipelineTransformationsRepositoryRetrieveWithHttpInfo(string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        PostHogPlugin PipelineTransformationsRetrieve(int id, string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        ApiResponse<PostHogPlugin> PipelineTransformationsRetrieveWithHttpInfo(int id, string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        PostHogPlugin PipelineTransformationsSourceRetrieve(int id, string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        ApiResponse<PostHogPlugin> PipelineTransformationsSourceRetrieveWithHttpInfo(int id, string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        PostHogPlugin PipelineTransformationsUnusedRetrieve(string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        ApiResponse<PostHogPlugin> PipelineTransformationsUnusedRetrieveWithHttpInfo(string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        PostHogPlugin PipelineTransformationsUpdate(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        ApiResponse<PostHogPlugin> PipelineTransformationsUpdateWithHttpInfo(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        PostHogPlugin PipelineTransformationsUpdateSourcePartialUpdate(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        ApiResponse<PostHogPlugin> PipelineTransformationsUpdateSourcePartialUpdateWithHttpInfo(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        PostHogPlugin PipelineTransformationsUpgradeCreate(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        ApiResponse<PostHogPlugin> PipelineTransformationsUpgradeCreateWithHttpInfo(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        PostHogPlugin PluginsActivityRetrieve(string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        ApiResponse<PostHogPlugin> PluginsActivityRetrieveWithHttpInfo(string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        PostHogPlugin PluginsCheckForUpdatesRetrieve(int id, string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        ApiResponse<PostHogPlugin> PluginsCheckForUpdatesRetrieveWithHttpInfo(int id, string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        PostHogPlugin PluginsCreate(string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        ApiResponse<PostHogPlugin> PluginsCreateWithHttpInfo(string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PluginsDestroy(int id, string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PluginsDestroyWithHttpInfo(int id, string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedPluginList</returns>
        PostHogPaginatedPluginList PluginsList(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedPluginList</returns>
        ApiResponse<PostHogPaginatedPluginList> PluginsListWithHttpInfo(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        PostHogPlugin PluginsPartialUpdate(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        ApiResponse<PostHogPlugin> PluginsPartialUpdateWithHttpInfo(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        PostHogPlugin PluginsRepositoryRetrieve(string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        ApiResponse<PostHogPlugin> PluginsRepositoryRetrieveWithHttpInfo(string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        PostHogPlugin PluginsRetrieve(int id, string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        ApiResponse<PostHogPlugin> PluginsRetrieveWithHttpInfo(int id, string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        PostHogPlugin PluginsSourceRetrieve(int id, string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        ApiResponse<PostHogPlugin> PluginsSourceRetrieveWithHttpInfo(int id, string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        PostHogPlugin PluginsUnusedRetrieve(string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        ApiResponse<PostHogPlugin> PluginsUnusedRetrieveWithHttpInfo(string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        PostHogPlugin PluginsUpdate(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        ApiResponse<PostHogPlugin> PluginsUpdateWithHttpInfo(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        PostHogPlugin PluginsUpdateSourcePartialUpdate(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        ApiResponse<PostHogPlugin> PluginsUpdateSourcePartialUpdateWithHttpInfo(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        PostHogPlugin PluginsUpgradeCreate(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        ApiResponse<PostHogPlugin> PluginsUpgradeCreateWithHttpInfo(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationResourceAccess"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationResourceAccess</returns>
        PostHogOrganizationResourceAccess ResourceAccessCreate(string parentLookupOrganizationId, PostHogOrganizationResourceAccess postHogOrganizationResourceAccess, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationResourceAccess"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationResourceAccess</returns>
        ApiResponse<PostHogOrganizationResourceAccess> ResourceAccessCreateWithHttpInfo(string parentLookupOrganizationId, PostHogOrganizationResourceAccess postHogOrganizationResourceAccess, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ResourceAccessDestroy(int id, string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResourceAccessDestroyWithHttpInfo(int id, string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedOrganizationResourceAccessList</returns>
        PostHogPaginatedOrganizationResourceAccessList ResourceAccessList(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedOrganizationResourceAccessList</returns>
        ApiResponse<PostHogPaginatedOrganizationResourceAccessList> ResourceAccessListWithHttpInfo(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedOrganizationResourceAccess"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationResourceAccess</returns>
        PostHogOrganizationResourceAccess ResourceAccessPartialUpdate(int id, string parentLookupOrganizationId, PostHogPatchedOrganizationResourceAccess postHogPatchedOrganizationResourceAccess = default(PostHogPatchedOrganizationResourceAccess), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedOrganizationResourceAccess"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationResourceAccess</returns>
        ApiResponse<PostHogOrganizationResourceAccess> ResourceAccessPartialUpdateWithHttpInfo(int id, string parentLookupOrganizationId, PostHogPatchedOrganizationResourceAccess postHogPatchedOrganizationResourceAccess = default(PostHogPatchedOrganizationResourceAccess), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationResourceAccess</returns>
        PostHogOrganizationResourceAccess ResourceAccessRetrieve(int id, string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationResourceAccess</returns>
        ApiResponse<PostHogOrganizationResourceAccess> ResourceAccessRetrieveWithHttpInfo(int id, string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationResourceAccess"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationResourceAccess</returns>
        PostHogOrganizationResourceAccess ResourceAccessUpdate(int id, string parentLookupOrganizationId, PostHogOrganizationResourceAccess postHogOrganizationResourceAccess, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationResourceAccess"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationResourceAccess</returns>
        ApiResponse<PostHogOrganizationResourceAccess> ResourceAccessUpdateWithHttpInfo(int id, string parentLookupOrganizationId, PostHogOrganizationResourceAccess postHogOrganizationResourceAccess, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogRole"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogRole</returns>
        PostHogRole RolesCreate(string parentLookupOrganizationId, PostHogRole postHogRole, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogRole"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogRole</returns>
        ApiResponse<PostHogRole> RolesCreateWithHttpInfo(string parentLookupOrganizationId, PostHogRole postHogRole, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RolesDestroy(Guid id, string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RolesDestroyWithHttpInfo(Guid id, string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedRoleList</returns>
        PostHogPaginatedRoleList RolesList(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedRoleList</returns>
        ApiResponse<PostHogPaginatedRoleList> RolesListWithHttpInfo(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedRole"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogRole</returns>
        PostHogRole RolesPartialUpdate(Guid id, string parentLookupOrganizationId, PostHogPatchedRole postHogPatchedRole = default(PostHogPatchedRole), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedRole"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogRole</returns>
        ApiResponse<PostHogRole> RolesPartialUpdateWithHttpInfo(Guid id, string parentLookupOrganizationId, PostHogPatchedRole postHogPatchedRole = default(PostHogPatchedRole), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogRole</returns>
        PostHogRole RolesRetrieve(Guid id, string parentLookupOrganizationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogRole</returns>
        ApiResponse<PostHogRole> RolesRetrieveWithHttpInfo(Guid id, string parentLookupOrganizationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="postHogRoleMembership"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogRoleMembership</returns>
        PostHogRoleMembership RolesRoleMembershipsCreate(string parentLookupOrganizationId, string parentLookupRoleId, PostHogRoleMembership postHogRoleMembership, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="postHogRoleMembership"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogRoleMembership</returns>
        ApiResponse<PostHogRoleMembership> RolesRoleMembershipsCreateWithHttpInfo(string parentLookupOrganizationId, string parentLookupRoleId, PostHogRoleMembership postHogRoleMembership, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role membership.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RolesRoleMembershipsDestroy(Guid id, string parentLookupOrganizationId, string parentLookupRoleId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role membership.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RolesRoleMembershipsDestroyWithHttpInfo(Guid id, string parentLookupOrganizationId, string parentLookupRoleId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedRoleMembershipList</returns>
        PostHogPaginatedRoleMembershipList RolesRoleMembershipsList(string parentLookupOrganizationId, string parentLookupRoleId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedRoleMembershipList</returns>
        ApiResponse<PostHogPaginatedRoleMembershipList> RolesRoleMembershipsListWithHttpInfo(string parentLookupOrganizationId, string parentLookupRoleId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogRole"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogRole</returns>
        PostHogRole RolesUpdate(Guid id, string parentLookupOrganizationId, PostHogRole postHogRole, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogRole"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogRole</returns>
        ApiResponse<PostHogRole> RolesUpdateWithHttpInfo(Guid id, string parentLookupOrganizationId, PostHogRole postHogRole, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationDomain</returns>
        System.Threading.Tasks.Task<PostHogOrganizationDomain> DomainsCreateAsync(string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationDomain)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogOrganizationDomain>> DomainsCreateWithHttpInfoAsync(string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DomainsDestroyAsync(Guid id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DomainsDestroyWithHttpInfoAsync(Guid id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedOrganizationDomainList</returns>
        System.Threading.Tasks.Task<PostHogPaginatedOrganizationDomainList> DomainsListAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedOrganizationDomainList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPaginatedOrganizationDomainList>> DomainsListWithHttpInfoAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedOrganizationDomain"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationDomain</returns>
        System.Threading.Tasks.Task<PostHogOrganizationDomain> DomainsPartialUpdateAsync(Guid id, string parentLookupOrganizationId, PostHogPatchedOrganizationDomain postHogPatchedOrganizationDomain = default(PostHogPatchedOrganizationDomain), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedOrganizationDomain"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationDomain)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogOrganizationDomain>> DomainsPartialUpdateWithHttpInfoAsync(Guid id, string parentLookupOrganizationId, PostHogPatchedOrganizationDomain postHogPatchedOrganizationDomain = default(PostHogPatchedOrganizationDomain), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationDomain</returns>
        System.Threading.Tasks.Task<PostHogOrganizationDomain> DomainsRetrieveAsync(Guid id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationDomain)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogOrganizationDomain>> DomainsRetrieveWithHttpInfoAsync(Guid id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationDomain</returns>
        System.Threading.Tasks.Task<PostHogOrganizationDomain> DomainsUpdateAsync(Guid id, string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationDomain)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogOrganizationDomain>> DomainsUpdateWithHttpInfoAsync(Guid id, string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationDomain</returns>
        System.Threading.Tasks.Task<PostHogOrganizationDomain> DomainsVerifyCreateAsync(Guid id, string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationDomain)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogOrganizationDomain>> DomainsVerifyCreateWithHttpInfoAsync(Guid id, string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all feature flags for a given organization and key.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FeatureFlagsCopyFlagsCreateAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all feature flags for a given organization and key.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FeatureFlagsCopyFlagsCreateWithHttpInfoAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all feature flags for a given organization and key.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey"></param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FeatureFlagsRetrieveAsync(string featureFlagKey, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all feature flags for a given organization and key.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey"></param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FeatureFlagsRetrieveWithHttpInfoAsync(string featureFlagKey, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationInvite"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationInvite</returns>
        System.Threading.Tasks.Task<PostHogOrganizationInvite> InvitesBulkCreateAsync(string parentLookupOrganizationId, PostHogOrganizationInvite postHogOrganizationInvite, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationInvite"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationInvite)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogOrganizationInvite>> InvitesBulkCreateWithHttpInfoAsync(string parentLookupOrganizationId, PostHogOrganizationInvite postHogOrganizationInvite, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationInvite"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationInvite</returns>
        System.Threading.Tasks.Task<PostHogOrganizationInvite> InvitesCreateAsync(string parentLookupOrganizationId, PostHogOrganizationInvite postHogOrganizationInvite, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationInvite"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationInvite)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogOrganizationInvite>> InvitesCreateWithHttpInfoAsync(string parentLookupOrganizationId, PostHogOrganizationInvite postHogOrganizationInvite, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this organization invite.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InvitesDestroyAsync(Guid id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this organization invite.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InvitesDestroyWithHttpInfoAsync(Guid id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedOrganizationInviteList</returns>
        System.Threading.Tasks.Task<PostHogPaginatedOrganizationInviteList> InvitesListAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedOrganizationInviteList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPaginatedOrganizationInviteList>> InvitesListWithHttpInfoAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MembersDestroyAsync(string parentLookupOrganizationId, Guid userUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MembersDestroyWithHttpInfoAsync(string parentLookupOrganizationId, Guid userUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedOrganizationMemberList</returns>
        System.Threading.Tasks.Task<PostHogPaginatedOrganizationMemberList> MembersListAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedOrganizationMemberList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPaginatedOrganizationMemberList>> MembersListWithHttpInfoAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="postHogPatchedOrganizationMember"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationMember</returns>
        System.Threading.Tasks.Task<PostHogOrganizationMember> MembersPartialUpdateAsync(string parentLookupOrganizationId, Guid userUuid, PostHogPatchedOrganizationMember postHogPatchedOrganizationMember = default(PostHogPatchedOrganizationMember), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="postHogPatchedOrganizationMember"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogOrganizationMember>> MembersPartialUpdateWithHttpInfoAsync(string parentLookupOrganizationId, Guid userUuid, PostHogPatchedOrganizationMember postHogPatchedOrganizationMember = default(PostHogPatchedOrganizationMember), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="postHogOrganizationMember"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationMember</returns>
        System.Threading.Tasks.Task<PostHogOrganizationMember> MembersUpdateAsync(string parentLookupOrganizationId, Guid userUuid, PostHogOrganizationMember postHogOrganizationMember = default(PostHogOrganizationMember), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="postHogOrganizationMember"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogOrganizationMember>> MembersUpdateWithHttpInfoAsync(string parentLookupOrganizationId, Guid userUuid, PostHogOrganizationMember postHogOrganizationMember = default(PostHogOrganizationMember), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        System.Threading.Tasks.Task<PostHogPlugin> PipelineTransformationsActivityRetrieveAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPlugin>> PipelineTransformationsActivityRetrieveWithHttpInfoAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        System.Threading.Tasks.Task<PostHogPlugin> PipelineTransformationsCheckForUpdatesRetrieveAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPlugin>> PipelineTransformationsCheckForUpdatesRetrieveWithHttpInfoAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        System.Threading.Tasks.Task<PostHogPlugin> PipelineTransformationsCreateAsync(string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPlugin>> PipelineTransformationsCreateWithHttpInfoAsync(string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PipelineTransformationsDestroyAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PipelineTransformationsDestroyWithHttpInfoAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedPluginList</returns>
        System.Threading.Tasks.Task<PostHogPaginatedPluginList> PipelineTransformationsListAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedPluginList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPaginatedPluginList>> PipelineTransformationsListWithHttpInfoAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        System.Threading.Tasks.Task<PostHogPlugin> PipelineTransformationsPartialUpdateAsync(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPlugin>> PipelineTransformationsPartialUpdateWithHttpInfoAsync(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        System.Threading.Tasks.Task<PostHogPlugin> PipelineTransformationsRepositoryRetrieveAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPlugin>> PipelineTransformationsRepositoryRetrieveWithHttpInfoAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        System.Threading.Tasks.Task<PostHogPlugin> PipelineTransformationsRetrieveAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPlugin>> PipelineTransformationsRetrieveWithHttpInfoAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        System.Threading.Tasks.Task<PostHogPlugin> PipelineTransformationsSourceRetrieveAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPlugin>> PipelineTransformationsSourceRetrieveWithHttpInfoAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        System.Threading.Tasks.Task<PostHogPlugin> PipelineTransformationsUnusedRetrieveAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPlugin>> PipelineTransformationsUnusedRetrieveWithHttpInfoAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        System.Threading.Tasks.Task<PostHogPlugin> PipelineTransformationsUpdateAsync(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPlugin>> PipelineTransformationsUpdateWithHttpInfoAsync(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        System.Threading.Tasks.Task<PostHogPlugin> PipelineTransformationsUpdateSourcePartialUpdateAsync(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPlugin>> PipelineTransformationsUpdateSourcePartialUpdateWithHttpInfoAsync(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        System.Threading.Tasks.Task<PostHogPlugin> PipelineTransformationsUpgradeCreateAsync(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPlugin>> PipelineTransformationsUpgradeCreateWithHttpInfoAsync(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        System.Threading.Tasks.Task<PostHogPlugin> PluginsActivityRetrieveAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPlugin>> PluginsActivityRetrieveWithHttpInfoAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        System.Threading.Tasks.Task<PostHogPlugin> PluginsCheckForUpdatesRetrieveAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPlugin>> PluginsCheckForUpdatesRetrieveWithHttpInfoAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        System.Threading.Tasks.Task<PostHogPlugin> PluginsCreateAsync(string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPlugin>> PluginsCreateWithHttpInfoAsync(string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PluginsDestroyAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PluginsDestroyWithHttpInfoAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedPluginList</returns>
        System.Threading.Tasks.Task<PostHogPaginatedPluginList> PluginsListAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedPluginList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPaginatedPluginList>> PluginsListWithHttpInfoAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        System.Threading.Tasks.Task<PostHogPlugin> PluginsPartialUpdateAsync(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPlugin>> PluginsPartialUpdateWithHttpInfoAsync(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        System.Threading.Tasks.Task<PostHogPlugin> PluginsRepositoryRetrieveAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPlugin>> PluginsRepositoryRetrieveWithHttpInfoAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        System.Threading.Tasks.Task<PostHogPlugin> PluginsRetrieveAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPlugin>> PluginsRetrieveWithHttpInfoAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        System.Threading.Tasks.Task<PostHogPlugin> PluginsSourceRetrieveAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPlugin>> PluginsSourceRetrieveWithHttpInfoAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        System.Threading.Tasks.Task<PostHogPlugin> PluginsUnusedRetrieveAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPlugin>> PluginsUnusedRetrieveWithHttpInfoAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        System.Threading.Tasks.Task<PostHogPlugin> PluginsUpdateAsync(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPlugin>> PluginsUpdateWithHttpInfoAsync(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        System.Threading.Tasks.Task<PostHogPlugin> PluginsUpdateSourcePartialUpdateAsync(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPlugin>> PluginsUpdateSourcePartialUpdateWithHttpInfoAsync(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        System.Threading.Tasks.Task<PostHogPlugin> PluginsUpgradeCreateAsync(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPlugin>> PluginsUpgradeCreateWithHttpInfoAsync(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationResourceAccess"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationResourceAccess</returns>
        System.Threading.Tasks.Task<PostHogOrganizationResourceAccess> ResourceAccessCreateAsync(string parentLookupOrganizationId, PostHogOrganizationResourceAccess postHogOrganizationResourceAccess, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationResourceAccess"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationResourceAccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogOrganizationResourceAccess>> ResourceAccessCreateWithHttpInfoAsync(string parentLookupOrganizationId, PostHogOrganizationResourceAccess postHogOrganizationResourceAccess, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResourceAccessDestroyAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResourceAccessDestroyWithHttpInfoAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedOrganizationResourceAccessList</returns>
        System.Threading.Tasks.Task<PostHogPaginatedOrganizationResourceAccessList> ResourceAccessListAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedOrganizationResourceAccessList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPaginatedOrganizationResourceAccessList>> ResourceAccessListWithHttpInfoAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedOrganizationResourceAccess"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationResourceAccess</returns>
        System.Threading.Tasks.Task<PostHogOrganizationResourceAccess> ResourceAccessPartialUpdateAsync(int id, string parentLookupOrganizationId, PostHogPatchedOrganizationResourceAccess postHogPatchedOrganizationResourceAccess = default(PostHogPatchedOrganizationResourceAccess), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedOrganizationResourceAccess"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationResourceAccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogOrganizationResourceAccess>> ResourceAccessPartialUpdateWithHttpInfoAsync(int id, string parentLookupOrganizationId, PostHogPatchedOrganizationResourceAccess postHogPatchedOrganizationResourceAccess = default(PostHogPatchedOrganizationResourceAccess), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationResourceAccess</returns>
        System.Threading.Tasks.Task<PostHogOrganizationResourceAccess> ResourceAccessRetrieveAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationResourceAccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogOrganizationResourceAccess>> ResourceAccessRetrieveWithHttpInfoAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationResourceAccess"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationResourceAccess</returns>
        System.Threading.Tasks.Task<PostHogOrganizationResourceAccess> ResourceAccessUpdateAsync(int id, string parentLookupOrganizationId, PostHogOrganizationResourceAccess postHogOrganizationResourceAccess, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationResourceAccess"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationResourceAccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogOrganizationResourceAccess>> ResourceAccessUpdateWithHttpInfoAsync(int id, string parentLookupOrganizationId, PostHogOrganizationResourceAccess postHogOrganizationResourceAccess, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogRole"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogRole</returns>
        System.Threading.Tasks.Task<PostHogRole> RolesCreateAsync(string parentLookupOrganizationId, PostHogRole postHogRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogRole"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogRole)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogRole>> RolesCreateWithHttpInfoAsync(string parentLookupOrganizationId, PostHogRole postHogRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RolesDestroyAsync(Guid id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RolesDestroyWithHttpInfoAsync(Guid id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedRoleList</returns>
        System.Threading.Tasks.Task<PostHogPaginatedRoleList> RolesListAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedRoleList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPaginatedRoleList>> RolesListWithHttpInfoAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedRole"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogRole</returns>
        System.Threading.Tasks.Task<PostHogRole> RolesPartialUpdateAsync(Guid id, string parentLookupOrganizationId, PostHogPatchedRole postHogPatchedRole = default(PostHogPatchedRole), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedRole"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogRole)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogRole>> RolesPartialUpdateWithHttpInfoAsync(Guid id, string parentLookupOrganizationId, PostHogPatchedRole postHogPatchedRole = default(PostHogPatchedRole), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogRole</returns>
        System.Threading.Tasks.Task<PostHogRole> RolesRetrieveAsync(Guid id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogRole)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogRole>> RolesRetrieveWithHttpInfoAsync(Guid id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="postHogRoleMembership"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogRoleMembership</returns>
        System.Threading.Tasks.Task<PostHogRoleMembership> RolesRoleMembershipsCreateAsync(string parentLookupOrganizationId, string parentLookupRoleId, PostHogRoleMembership postHogRoleMembership, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="postHogRoleMembership"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogRoleMembership)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogRoleMembership>> RolesRoleMembershipsCreateWithHttpInfoAsync(string parentLookupOrganizationId, string parentLookupRoleId, PostHogRoleMembership postHogRoleMembership, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role membership.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RolesRoleMembershipsDestroyAsync(Guid id, string parentLookupOrganizationId, string parentLookupRoleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role membership.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RolesRoleMembershipsDestroyWithHttpInfoAsync(Guid id, string parentLookupOrganizationId, string parentLookupRoleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedRoleMembershipList</returns>
        System.Threading.Tasks.Task<PostHogPaginatedRoleMembershipList> RolesRoleMembershipsListAsync(string parentLookupOrganizationId, string parentLookupRoleId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedRoleMembershipList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPaginatedRoleMembershipList>> RolesRoleMembershipsListWithHttpInfoAsync(string parentLookupOrganizationId, string parentLookupRoleId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogRole"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogRole</returns>
        System.Threading.Tasks.Task<PostHogRole> RolesUpdateAsync(Guid id, string parentLookupOrganizationId, PostHogRole postHogRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogRole"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogRole)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogRole>> RolesUpdateWithHttpInfoAsync(Guid id, string parentLookupOrganizationId, PostHogRole postHogRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationsApi : IOrganizationsApiSync, IOrganizationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrganizationsApi : IOrganizationsApi
    {
        private DotPostHog.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationsApi(string basePath)
        {
            this.Configuration = DotPostHog.Client.Configuration.MergeConfigurations(
                DotPostHog.Client.GlobalConfiguration.Instance,
                new DotPostHog.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DotPostHog.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrganizationsApi(DotPostHog.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DotPostHog.Client.Configuration.MergeConfigurations(
                DotPostHog.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DotPostHog.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrganizationsApi(DotPostHog.Client.ISynchronousClient client, DotPostHog.Client.IAsynchronousClient asyncClient, DotPostHog.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DotPostHog.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DotPostHog.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DotPostHog.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DotPostHog.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DotPostHog.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationDomain</returns>
        public PostHogOrganizationDomain DomainsCreate(string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationDomain> localVarResponse = DomainsCreateWithHttpInfo(parentLookupOrganizationId, postHogOrganizationDomain);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationDomain</returns>
        public DotPostHog.Client.ApiResponse<PostHogOrganizationDomain> DomainsCreateWithHttpInfo(string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->DomainsCreate");
            }

            // verify the required parameter 'postHogOrganizationDomain' is set
            if (postHogOrganizationDomain == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogOrganizationDomain' when calling OrganizationsApi->DomainsCreate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogOrganizationDomain;

            localVarRequestOptions.Operation = "OrganizationsApi.DomainsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostHogOrganizationDomain>("/api/organizations/{parent_lookup_organization_id}/domains/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationDomain</returns>
        public async System.Threading.Tasks.Task<PostHogOrganizationDomain> DomainsCreateAsync(string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationDomain> localVarResponse = await DomainsCreateWithHttpInfoAsync(parentLookupOrganizationId, postHogOrganizationDomain, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationDomain)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogOrganizationDomain>> DomainsCreateWithHttpInfoAsync(string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->DomainsCreate");
            }

            // verify the required parameter 'postHogOrganizationDomain' is set
            if (postHogOrganizationDomain == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogOrganizationDomain' when calling OrganizationsApi->DomainsCreate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogOrganizationDomain;

            localVarRequestOptions.Operation = "OrganizationsApi.DomainsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostHogOrganizationDomain>("/api/organizations/{parent_lookup_organization_id}/domains/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DomainsDestroy(Guid id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            DomainsDestroyWithHttpInfo(id, parentLookupOrganizationId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotPostHog.Client.ApiResponse<Object> DomainsDestroyWithHttpInfo(Guid id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->DomainsDestroy");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.DomainsDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/organizations/{parent_lookup_organization_id}/domains/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DomainsDestroyAsync(Guid id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DomainsDestroyWithHttpInfoAsync(id, parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<Object>> DomainsDestroyWithHttpInfoAsync(Guid id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->DomainsDestroy");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.DomainsDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/organizations/{parent_lookup_organization_id}/domains/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedOrganizationDomainList</returns>
        public PostHogPaginatedOrganizationDomainList DomainsList(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedOrganizationDomainList> localVarResponse = DomainsListWithHttpInfo(parentLookupOrganizationId, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedOrganizationDomainList</returns>
        public DotPostHog.Client.ApiResponse<PostHogPaginatedOrganizationDomainList> DomainsListWithHttpInfo(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->DomainsList");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "OrganizationsApi.DomainsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPaginatedOrganizationDomainList>("/api/organizations/{parent_lookup_organization_id}/domains/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedOrganizationDomainList</returns>
        public async System.Threading.Tasks.Task<PostHogPaginatedOrganizationDomainList> DomainsListAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedOrganizationDomainList> localVarResponse = await DomainsListWithHttpInfoAsync(parentLookupOrganizationId, limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedOrganizationDomainList)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPaginatedOrganizationDomainList>> DomainsListWithHttpInfoAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->DomainsList");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "OrganizationsApi.DomainsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPaginatedOrganizationDomainList>("/api/organizations/{parent_lookup_organization_id}/domains/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedOrganizationDomain"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationDomain</returns>
        public PostHogOrganizationDomain DomainsPartialUpdate(Guid id, string parentLookupOrganizationId, PostHogPatchedOrganizationDomain postHogPatchedOrganizationDomain = default(PostHogPatchedOrganizationDomain), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationDomain> localVarResponse = DomainsPartialUpdateWithHttpInfo(id, parentLookupOrganizationId, postHogPatchedOrganizationDomain);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedOrganizationDomain"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationDomain</returns>
        public DotPostHog.Client.ApiResponse<PostHogOrganizationDomain> DomainsPartialUpdateWithHttpInfo(Guid id, string parentLookupOrganizationId, PostHogPatchedOrganizationDomain postHogPatchedOrganizationDomain = default(PostHogPatchedOrganizationDomain), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->DomainsPartialUpdate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPatchedOrganizationDomain;

            localVarRequestOptions.Operation = "OrganizationsApi.DomainsPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<PostHogOrganizationDomain>("/api/organizations/{parent_lookup_organization_id}/domains/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedOrganizationDomain"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationDomain</returns>
        public async System.Threading.Tasks.Task<PostHogOrganizationDomain> DomainsPartialUpdateAsync(Guid id, string parentLookupOrganizationId, PostHogPatchedOrganizationDomain postHogPatchedOrganizationDomain = default(PostHogPatchedOrganizationDomain), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationDomain> localVarResponse = await DomainsPartialUpdateWithHttpInfoAsync(id, parentLookupOrganizationId, postHogPatchedOrganizationDomain, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedOrganizationDomain"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationDomain)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogOrganizationDomain>> DomainsPartialUpdateWithHttpInfoAsync(Guid id, string parentLookupOrganizationId, PostHogPatchedOrganizationDomain postHogPatchedOrganizationDomain = default(PostHogPatchedOrganizationDomain), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->DomainsPartialUpdate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPatchedOrganizationDomain;

            localVarRequestOptions.Operation = "OrganizationsApi.DomainsPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<PostHogOrganizationDomain>("/api/organizations/{parent_lookup_organization_id}/domains/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationDomain</returns>
        public PostHogOrganizationDomain DomainsRetrieve(Guid id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationDomain> localVarResponse = DomainsRetrieveWithHttpInfo(id, parentLookupOrganizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationDomain</returns>
        public DotPostHog.Client.ApiResponse<PostHogOrganizationDomain> DomainsRetrieveWithHttpInfo(Guid id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->DomainsRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.DomainsRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogOrganizationDomain>("/api/organizations/{parent_lookup_organization_id}/domains/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationDomain</returns>
        public async System.Threading.Tasks.Task<PostHogOrganizationDomain> DomainsRetrieveAsync(Guid id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationDomain> localVarResponse = await DomainsRetrieveWithHttpInfoAsync(id, parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationDomain)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogOrganizationDomain>> DomainsRetrieveWithHttpInfoAsync(Guid id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->DomainsRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.DomainsRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogOrganizationDomain>("/api/organizations/{parent_lookup_organization_id}/domains/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationDomain</returns>
        public PostHogOrganizationDomain DomainsUpdate(Guid id, string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationDomain> localVarResponse = DomainsUpdateWithHttpInfo(id, parentLookupOrganizationId, postHogOrganizationDomain);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationDomain</returns>
        public DotPostHog.Client.ApiResponse<PostHogOrganizationDomain> DomainsUpdateWithHttpInfo(Guid id, string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->DomainsUpdate");
            }

            // verify the required parameter 'postHogOrganizationDomain' is set
            if (postHogOrganizationDomain == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogOrganizationDomain' when calling OrganizationsApi->DomainsUpdate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogOrganizationDomain;

            localVarRequestOptions.Operation = "OrganizationsApi.DomainsUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<PostHogOrganizationDomain>("/api/organizations/{parent_lookup_organization_id}/domains/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationDomain</returns>
        public async System.Threading.Tasks.Task<PostHogOrganizationDomain> DomainsUpdateAsync(Guid id, string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationDomain> localVarResponse = await DomainsUpdateWithHttpInfoAsync(id, parentLookupOrganizationId, postHogOrganizationDomain, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationDomain)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogOrganizationDomain>> DomainsUpdateWithHttpInfoAsync(Guid id, string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->DomainsUpdate");
            }

            // verify the required parameter 'postHogOrganizationDomain' is set
            if (postHogOrganizationDomain == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogOrganizationDomain' when calling OrganizationsApi->DomainsUpdate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogOrganizationDomain;

            localVarRequestOptions.Operation = "OrganizationsApi.DomainsUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PostHogOrganizationDomain>("/api/organizations/{parent_lookup_organization_id}/domains/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationDomain</returns>
        public PostHogOrganizationDomain DomainsVerifyCreate(Guid id, string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationDomain> localVarResponse = DomainsVerifyCreateWithHttpInfo(id, parentLookupOrganizationId, postHogOrganizationDomain);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationDomain</returns>
        public DotPostHog.Client.ApiResponse<PostHogOrganizationDomain> DomainsVerifyCreateWithHttpInfo(Guid id, string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->DomainsVerifyCreate");
            }

            // verify the required parameter 'postHogOrganizationDomain' is set
            if (postHogOrganizationDomain == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogOrganizationDomain' when calling OrganizationsApi->DomainsVerifyCreate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogOrganizationDomain;

            localVarRequestOptions.Operation = "OrganizationsApi.DomainsVerifyCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostHogOrganizationDomain>("/api/organizations/{parent_lookup_organization_id}/domains/{id}/verify/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsVerifyCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationDomain</returns>
        public async System.Threading.Tasks.Task<PostHogOrganizationDomain> DomainsVerifyCreateAsync(Guid id, string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationDomain> localVarResponse = await DomainsVerifyCreateWithHttpInfoAsync(id, parentLookupOrganizationId, postHogOrganizationDomain, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this domain.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationDomain"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationDomain)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogOrganizationDomain>> DomainsVerifyCreateWithHttpInfoAsync(Guid id, string parentLookupOrganizationId, PostHogOrganizationDomain postHogOrganizationDomain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->DomainsVerifyCreate");
            }

            // verify the required parameter 'postHogOrganizationDomain' is set
            if (postHogOrganizationDomain == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogOrganizationDomain' when calling OrganizationsApi->DomainsVerifyCreate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogOrganizationDomain;

            localVarRequestOptions.Operation = "OrganizationsApi.DomainsVerifyCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostHogOrganizationDomain>("/api/organizations/{parent_lookup_organization_id}/domains/{id}/verify/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsVerifyCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves all feature flags for a given organization and key.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void FeatureFlagsCopyFlagsCreate(string parentLookupOrganizationId, int operationIndex = 0)
        {
            FeatureFlagsCopyFlagsCreateWithHttpInfo(parentLookupOrganizationId);
        }

        /// <summary>
        ///  Retrieves all feature flags for a given organization and key.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotPostHog.Client.ApiResponse<Object> FeatureFlagsCopyFlagsCreateWithHttpInfo(string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->FeatureFlagsCopyFlagsCreate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.FeatureFlagsCopyFlagsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/organizations/{parent_lookup_organization_id}/feature_flags/copy_flags/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FeatureFlagsCopyFlagsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves all feature flags for a given organization and key.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FeatureFlagsCopyFlagsCreateAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await FeatureFlagsCopyFlagsCreateWithHttpInfoAsync(parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Retrieves all feature flags for a given organization and key.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<Object>> FeatureFlagsCopyFlagsCreateWithHttpInfoAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->FeatureFlagsCopyFlagsCreate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.FeatureFlagsCopyFlagsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/organizations/{parent_lookup_organization_id}/feature_flags/copy_flags/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FeatureFlagsCopyFlagsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves all feature flags for a given organization and key.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey"></param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void FeatureFlagsRetrieve(string featureFlagKey, string parentLookupOrganizationId, int operationIndex = 0)
        {
            FeatureFlagsRetrieveWithHttpInfo(featureFlagKey, parentLookupOrganizationId);
        }

        /// <summary>
        ///  Retrieves all feature flags for a given organization and key.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey"></param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotPostHog.Client.ApiResponse<Object> FeatureFlagsRetrieveWithHttpInfo(string featureFlagKey, string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'featureFlagKey' is set
            if (featureFlagKey == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'featureFlagKey' when calling OrganizationsApi->FeatureFlagsRetrieve");
            }

            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->FeatureFlagsRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feature_flag_key", DotPostHog.Client.ClientUtils.ParameterToString(featureFlagKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.FeatureFlagsRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/organizations/{parent_lookup_organization_id}/feature_flags/{feature_flag_key}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FeatureFlagsRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves all feature flags for a given organization and key.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey"></param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FeatureFlagsRetrieveAsync(string featureFlagKey, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await FeatureFlagsRetrieveWithHttpInfoAsync(featureFlagKey, parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Retrieves all feature flags for a given organization and key.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey"></param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<Object>> FeatureFlagsRetrieveWithHttpInfoAsync(string featureFlagKey, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'featureFlagKey' is set
            if (featureFlagKey == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'featureFlagKey' when calling OrganizationsApi->FeatureFlagsRetrieve");
            }

            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->FeatureFlagsRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feature_flag_key", DotPostHog.Client.ClientUtils.ParameterToString(featureFlagKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.FeatureFlagsRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/organizations/{parent_lookup_organization_id}/feature_flags/{feature_flag_key}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FeatureFlagsRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationInvite"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationInvite</returns>
        public PostHogOrganizationInvite InvitesBulkCreate(string parentLookupOrganizationId, PostHogOrganizationInvite postHogOrganizationInvite, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationInvite> localVarResponse = InvitesBulkCreateWithHttpInfo(parentLookupOrganizationId, postHogOrganizationInvite);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationInvite"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationInvite</returns>
        public DotPostHog.Client.ApiResponse<PostHogOrganizationInvite> InvitesBulkCreateWithHttpInfo(string parentLookupOrganizationId, PostHogOrganizationInvite postHogOrganizationInvite, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->InvitesBulkCreate");
            }

            // verify the required parameter 'postHogOrganizationInvite' is set
            if (postHogOrganizationInvite == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogOrganizationInvite' when calling OrganizationsApi->InvitesBulkCreate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogOrganizationInvite;

            localVarRequestOptions.Operation = "OrganizationsApi.InvitesBulkCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostHogOrganizationInvite>("/api/organizations/{parent_lookup_organization_id}/invites/bulk/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvitesBulkCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationInvite"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationInvite</returns>
        public async System.Threading.Tasks.Task<PostHogOrganizationInvite> InvitesBulkCreateAsync(string parentLookupOrganizationId, PostHogOrganizationInvite postHogOrganizationInvite, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationInvite> localVarResponse = await InvitesBulkCreateWithHttpInfoAsync(parentLookupOrganizationId, postHogOrganizationInvite, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationInvite"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationInvite)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogOrganizationInvite>> InvitesBulkCreateWithHttpInfoAsync(string parentLookupOrganizationId, PostHogOrganizationInvite postHogOrganizationInvite, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->InvitesBulkCreate");
            }

            // verify the required parameter 'postHogOrganizationInvite' is set
            if (postHogOrganizationInvite == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogOrganizationInvite' when calling OrganizationsApi->InvitesBulkCreate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogOrganizationInvite;

            localVarRequestOptions.Operation = "OrganizationsApi.InvitesBulkCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostHogOrganizationInvite>("/api/organizations/{parent_lookup_organization_id}/invites/bulk/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvitesBulkCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationInvite"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationInvite</returns>
        public PostHogOrganizationInvite InvitesCreate(string parentLookupOrganizationId, PostHogOrganizationInvite postHogOrganizationInvite, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationInvite> localVarResponse = InvitesCreateWithHttpInfo(parentLookupOrganizationId, postHogOrganizationInvite);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationInvite"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationInvite</returns>
        public DotPostHog.Client.ApiResponse<PostHogOrganizationInvite> InvitesCreateWithHttpInfo(string parentLookupOrganizationId, PostHogOrganizationInvite postHogOrganizationInvite, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->InvitesCreate");
            }

            // verify the required parameter 'postHogOrganizationInvite' is set
            if (postHogOrganizationInvite == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogOrganizationInvite' when calling OrganizationsApi->InvitesCreate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogOrganizationInvite;

            localVarRequestOptions.Operation = "OrganizationsApi.InvitesCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostHogOrganizationInvite>("/api/organizations/{parent_lookup_organization_id}/invites/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvitesCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationInvite"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationInvite</returns>
        public async System.Threading.Tasks.Task<PostHogOrganizationInvite> InvitesCreateAsync(string parentLookupOrganizationId, PostHogOrganizationInvite postHogOrganizationInvite, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationInvite> localVarResponse = await InvitesCreateWithHttpInfoAsync(parentLookupOrganizationId, postHogOrganizationInvite, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationInvite"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationInvite)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogOrganizationInvite>> InvitesCreateWithHttpInfoAsync(string parentLookupOrganizationId, PostHogOrganizationInvite postHogOrganizationInvite, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->InvitesCreate");
            }

            // verify the required parameter 'postHogOrganizationInvite' is set
            if (postHogOrganizationInvite == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogOrganizationInvite' when calling OrganizationsApi->InvitesCreate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogOrganizationInvite;

            localVarRequestOptions.Operation = "OrganizationsApi.InvitesCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostHogOrganizationInvite>("/api/organizations/{parent_lookup_organization_id}/invites/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvitesCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this organization invite.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void InvitesDestroy(Guid id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            InvitesDestroyWithHttpInfo(id, parentLookupOrganizationId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this organization invite.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotPostHog.Client.ApiResponse<Object> InvitesDestroyWithHttpInfo(Guid id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->InvitesDestroy");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.InvitesDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/organizations/{parent_lookup_organization_id}/invites/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvitesDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this organization invite.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InvitesDestroyAsync(Guid id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await InvitesDestroyWithHttpInfoAsync(id, parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this organization invite.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<Object>> InvitesDestroyWithHttpInfoAsync(Guid id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->InvitesDestroy");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.InvitesDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/organizations/{parent_lookup_organization_id}/invites/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvitesDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedOrganizationInviteList</returns>
        public PostHogPaginatedOrganizationInviteList InvitesList(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedOrganizationInviteList> localVarResponse = InvitesListWithHttpInfo(parentLookupOrganizationId, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedOrganizationInviteList</returns>
        public DotPostHog.Client.ApiResponse<PostHogPaginatedOrganizationInviteList> InvitesListWithHttpInfo(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->InvitesList");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "OrganizationsApi.InvitesList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPaginatedOrganizationInviteList>("/api/organizations/{parent_lookup_organization_id}/invites/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvitesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedOrganizationInviteList</returns>
        public async System.Threading.Tasks.Task<PostHogPaginatedOrganizationInviteList> InvitesListAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedOrganizationInviteList> localVarResponse = await InvitesListWithHttpInfoAsync(parentLookupOrganizationId, limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedOrganizationInviteList)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPaginatedOrganizationInviteList>> InvitesListWithHttpInfoAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->InvitesList");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "OrganizationsApi.InvitesList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPaginatedOrganizationInviteList>("/api/organizations/{parent_lookup_organization_id}/invites/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvitesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void MembersDestroy(string parentLookupOrganizationId, Guid userUuid, int operationIndex = 0)
        {
            MembersDestroyWithHttpInfo(parentLookupOrganizationId, userUuid);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotPostHog.Client.ApiResponse<Object> MembersDestroyWithHttpInfo(string parentLookupOrganizationId, Guid userUuid, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->MembersDestroy");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user__uuid", DotPostHog.Client.ClientUtils.ParameterToString(userUuid)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.MembersDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/organizations/{parent_lookup_organization_id}/members/{user__uuid}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MembersDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MembersDestroyAsync(string parentLookupOrganizationId, Guid userUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await MembersDestroyWithHttpInfoAsync(parentLookupOrganizationId, userUuid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<Object>> MembersDestroyWithHttpInfoAsync(string parentLookupOrganizationId, Guid userUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->MembersDestroy");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user__uuid", DotPostHog.Client.ClientUtils.ParameterToString(userUuid)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.MembersDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/organizations/{parent_lookup_organization_id}/members/{user__uuid}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MembersDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedOrganizationMemberList</returns>
        public PostHogPaginatedOrganizationMemberList MembersList(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedOrganizationMemberList> localVarResponse = MembersListWithHttpInfo(parentLookupOrganizationId, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedOrganizationMemberList</returns>
        public DotPostHog.Client.ApiResponse<PostHogPaginatedOrganizationMemberList> MembersListWithHttpInfo(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->MembersList");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "OrganizationsApi.MembersList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPaginatedOrganizationMemberList>("/api/organizations/{parent_lookup_organization_id}/members/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MembersList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedOrganizationMemberList</returns>
        public async System.Threading.Tasks.Task<PostHogPaginatedOrganizationMemberList> MembersListAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedOrganizationMemberList> localVarResponse = await MembersListWithHttpInfoAsync(parentLookupOrganizationId, limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedOrganizationMemberList)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPaginatedOrganizationMemberList>> MembersListWithHttpInfoAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->MembersList");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "OrganizationsApi.MembersList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPaginatedOrganizationMemberList>("/api/organizations/{parent_lookup_organization_id}/members/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MembersList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="postHogPatchedOrganizationMember"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationMember</returns>
        public PostHogOrganizationMember MembersPartialUpdate(string parentLookupOrganizationId, Guid userUuid, PostHogPatchedOrganizationMember postHogPatchedOrganizationMember = default(PostHogPatchedOrganizationMember), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationMember> localVarResponse = MembersPartialUpdateWithHttpInfo(parentLookupOrganizationId, userUuid, postHogPatchedOrganizationMember);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="postHogPatchedOrganizationMember"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationMember</returns>
        public DotPostHog.Client.ApiResponse<PostHogOrganizationMember> MembersPartialUpdateWithHttpInfo(string parentLookupOrganizationId, Guid userUuid, PostHogPatchedOrganizationMember postHogPatchedOrganizationMember = default(PostHogPatchedOrganizationMember), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->MembersPartialUpdate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user__uuid", DotPostHog.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.Data = postHogPatchedOrganizationMember;

            localVarRequestOptions.Operation = "OrganizationsApi.MembersPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<PostHogOrganizationMember>("/api/organizations/{parent_lookup_organization_id}/members/{user__uuid}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MembersPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="postHogPatchedOrganizationMember"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationMember</returns>
        public async System.Threading.Tasks.Task<PostHogOrganizationMember> MembersPartialUpdateAsync(string parentLookupOrganizationId, Guid userUuid, PostHogPatchedOrganizationMember postHogPatchedOrganizationMember = default(PostHogPatchedOrganizationMember), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationMember> localVarResponse = await MembersPartialUpdateWithHttpInfoAsync(parentLookupOrganizationId, userUuid, postHogPatchedOrganizationMember, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="postHogPatchedOrganizationMember"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationMember)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogOrganizationMember>> MembersPartialUpdateWithHttpInfoAsync(string parentLookupOrganizationId, Guid userUuid, PostHogPatchedOrganizationMember postHogPatchedOrganizationMember = default(PostHogPatchedOrganizationMember), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->MembersPartialUpdate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user__uuid", DotPostHog.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.Data = postHogPatchedOrganizationMember;

            localVarRequestOptions.Operation = "OrganizationsApi.MembersPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<PostHogOrganizationMember>("/api/organizations/{parent_lookup_organization_id}/members/{user__uuid}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MembersPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="postHogOrganizationMember"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationMember</returns>
        public PostHogOrganizationMember MembersUpdate(string parentLookupOrganizationId, Guid userUuid, PostHogOrganizationMember postHogOrganizationMember = default(PostHogOrganizationMember), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationMember> localVarResponse = MembersUpdateWithHttpInfo(parentLookupOrganizationId, userUuid, postHogOrganizationMember);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="postHogOrganizationMember"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationMember</returns>
        public DotPostHog.Client.ApiResponse<PostHogOrganizationMember> MembersUpdateWithHttpInfo(string parentLookupOrganizationId, Guid userUuid, PostHogOrganizationMember postHogOrganizationMember = default(PostHogOrganizationMember), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->MembersUpdate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user__uuid", DotPostHog.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.Data = postHogOrganizationMember;

            localVarRequestOptions.Operation = "OrganizationsApi.MembersUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<PostHogOrganizationMember>("/api/organizations/{parent_lookup_organization_id}/members/{user__uuid}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MembersUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="postHogOrganizationMember"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationMember</returns>
        public async System.Threading.Tasks.Task<PostHogOrganizationMember> MembersUpdateAsync(string parentLookupOrganizationId, Guid userUuid, PostHogOrganizationMember postHogOrganizationMember = default(PostHogOrganizationMember), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationMember> localVarResponse = await MembersUpdateWithHttpInfoAsync(parentLookupOrganizationId, userUuid, postHogOrganizationMember, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="userUuid"></param>
        /// <param name="postHogOrganizationMember"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationMember)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogOrganizationMember>> MembersUpdateWithHttpInfoAsync(string parentLookupOrganizationId, Guid userUuid, PostHogOrganizationMember postHogOrganizationMember = default(PostHogOrganizationMember), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->MembersUpdate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user__uuid", DotPostHog.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.Data = postHogOrganizationMember;

            localVarRequestOptions.Operation = "OrganizationsApi.MembersUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PostHogOrganizationMember>("/api/organizations/{parent_lookup_organization_id}/members/{user__uuid}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MembersUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        public PostHogPlugin PipelineTransformationsActivityRetrieve(string parentLookupOrganizationId, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = PipelineTransformationsActivityRetrieveWithHttpInfo(parentLookupOrganizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        public DotPostHog.Client.ApiResponse<PostHogPlugin> PipelineTransformationsActivityRetrieveWithHttpInfo(string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsActivityRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsActivityRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/activity/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsActivityRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        public async System.Threading.Tasks.Task<PostHogPlugin> PipelineTransformationsActivityRetrieveAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = await PipelineTransformationsActivityRetrieveWithHttpInfoAsync(parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPlugin>> PipelineTransformationsActivityRetrieveWithHttpInfoAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsActivityRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsActivityRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/activity/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsActivityRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        public PostHogPlugin PipelineTransformationsCheckForUpdatesRetrieve(int id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = PipelineTransformationsCheckForUpdatesRetrieveWithHttpInfo(id, parentLookupOrganizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        public DotPostHog.Client.ApiResponse<PostHogPlugin> PipelineTransformationsCheckForUpdatesRetrieveWithHttpInfo(int id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsCheckForUpdatesRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsCheckForUpdatesRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/{id}/check_for_updates/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsCheckForUpdatesRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        public async System.Threading.Tasks.Task<PostHogPlugin> PipelineTransformationsCheckForUpdatesRetrieveAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = await PipelineTransformationsCheckForUpdatesRetrieveWithHttpInfoAsync(id, parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPlugin>> PipelineTransformationsCheckForUpdatesRetrieveWithHttpInfoAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsCheckForUpdatesRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsCheckForUpdatesRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/{id}/check_for_updates/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsCheckForUpdatesRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        public PostHogPlugin PipelineTransformationsCreate(string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = PipelineTransformationsCreateWithHttpInfo(parentLookupOrganizationId, postHogPlugin);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        public DotPostHog.Client.ApiResponse<PostHogPlugin> PipelineTransformationsCreateWithHttpInfo(string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsCreate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPlugin;

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        public async System.Threading.Tasks.Task<PostHogPlugin> PipelineTransformationsCreateAsync(string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = await PipelineTransformationsCreateWithHttpInfoAsync(parentLookupOrganizationId, postHogPlugin, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPlugin>> PipelineTransformationsCreateWithHttpInfoAsync(string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsCreate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPlugin;

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PipelineTransformationsDestroy(int id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            PipelineTransformationsDestroyWithHttpInfo(id, parentLookupOrganizationId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotPostHog.Client.ApiResponse<Object> PipelineTransformationsDestroyWithHttpInfo(int id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsDestroy");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PipelineTransformationsDestroyAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PipelineTransformationsDestroyWithHttpInfoAsync(id, parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<Object>> PipelineTransformationsDestroyWithHttpInfoAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsDestroy");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedPluginList</returns>
        public PostHogPaginatedPluginList PipelineTransformationsList(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedPluginList> localVarResponse = PipelineTransformationsListWithHttpInfo(parentLookupOrganizationId, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedPluginList</returns>
        public DotPostHog.Client.ApiResponse<PostHogPaginatedPluginList> PipelineTransformationsListWithHttpInfo(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsList");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPaginatedPluginList>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedPluginList</returns>
        public async System.Threading.Tasks.Task<PostHogPaginatedPluginList> PipelineTransformationsListAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedPluginList> localVarResponse = await PipelineTransformationsListWithHttpInfoAsync(parentLookupOrganizationId, limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedPluginList)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPaginatedPluginList>> PipelineTransformationsListWithHttpInfoAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsList");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPaginatedPluginList>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        public PostHogPlugin PipelineTransformationsPartialUpdate(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = PipelineTransformationsPartialUpdateWithHttpInfo(id, parentLookupOrganizationId, postHogPatchedPlugin);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        public DotPostHog.Client.ApiResponse<PostHogPlugin> PipelineTransformationsPartialUpdateWithHttpInfo(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsPartialUpdate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPatchedPlugin;

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        public async System.Threading.Tasks.Task<PostHogPlugin> PipelineTransformationsPartialUpdateAsync(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = await PipelineTransformationsPartialUpdateWithHttpInfoAsync(id, parentLookupOrganizationId, postHogPatchedPlugin, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPlugin>> PipelineTransformationsPartialUpdateWithHttpInfoAsync(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsPartialUpdate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPatchedPlugin;

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        public PostHogPlugin PipelineTransformationsRepositoryRetrieve(string parentLookupOrganizationId, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = PipelineTransformationsRepositoryRetrieveWithHttpInfo(parentLookupOrganizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        public DotPostHog.Client.ApiResponse<PostHogPlugin> PipelineTransformationsRepositoryRetrieveWithHttpInfo(string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsRepositoryRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsRepositoryRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/repository/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsRepositoryRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        public async System.Threading.Tasks.Task<PostHogPlugin> PipelineTransformationsRepositoryRetrieveAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = await PipelineTransformationsRepositoryRetrieveWithHttpInfoAsync(parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPlugin>> PipelineTransformationsRepositoryRetrieveWithHttpInfoAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsRepositoryRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsRepositoryRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/repository/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsRepositoryRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        public PostHogPlugin PipelineTransformationsRetrieve(int id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = PipelineTransformationsRetrieveWithHttpInfo(id, parentLookupOrganizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        public DotPostHog.Client.ApiResponse<PostHogPlugin> PipelineTransformationsRetrieveWithHttpInfo(int id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        public async System.Threading.Tasks.Task<PostHogPlugin> PipelineTransformationsRetrieveAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = await PipelineTransformationsRetrieveWithHttpInfoAsync(id, parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPlugin>> PipelineTransformationsRetrieveWithHttpInfoAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        public PostHogPlugin PipelineTransformationsSourceRetrieve(int id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = PipelineTransformationsSourceRetrieveWithHttpInfo(id, parentLookupOrganizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        public DotPostHog.Client.ApiResponse<PostHogPlugin> PipelineTransformationsSourceRetrieveWithHttpInfo(int id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsSourceRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsSourceRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/{id}/source/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsSourceRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        public async System.Threading.Tasks.Task<PostHogPlugin> PipelineTransformationsSourceRetrieveAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = await PipelineTransformationsSourceRetrieveWithHttpInfoAsync(id, parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPlugin>> PipelineTransformationsSourceRetrieveWithHttpInfoAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsSourceRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsSourceRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/{id}/source/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsSourceRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        public PostHogPlugin PipelineTransformationsUnusedRetrieve(string parentLookupOrganizationId, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = PipelineTransformationsUnusedRetrieveWithHttpInfo(parentLookupOrganizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        public DotPostHog.Client.ApiResponse<PostHogPlugin> PipelineTransformationsUnusedRetrieveWithHttpInfo(string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsUnusedRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsUnusedRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/unused/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsUnusedRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        public async System.Threading.Tasks.Task<PostHogPlugin> PipelineTransformationsUnusedRetrieveAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = await PipelineTransformationsUnusedRetrieveWithHttpInfoAsync(parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPlugin>> PipelineTransformationsUnusedRetrieveWithHttpInfoAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsUnusedRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsUnusedRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/unused/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsUnusedRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        public PostHogPlugin PipelineTransformationsUpdate(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = PipelineTransformationsUpdateWithHttpInfo(id, parentLookupOrganizationId, postHogPlugin);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        public DotPostHog.Client.ApiResponse<PostHogPlugin> PipelineTransformationsUpdateWithHttpInfo(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsUpdate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPlugin;

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        public async System.Threading.Tasks.Task<PostHogPlugin> PipelineTransformationsUpdateAsync(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = await PipelineTransformationsUpdateWithHttpInfoAsync(id, parentLookupOrganizationId, postHogPlugin, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPlugin>> PipelineTransformationsUpdateWithHttpInfoAsync(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsUpdate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPlugin;

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        public PostHogPlugin PipelineTransformationsUpdateSourcePartialUpdate(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = PipelineTransformationsUpdateSourcePartialUpdateWithHttpInfo(id, parentLookupOrganizationId, postHogPatchedPlugin);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        public DotPostHog.Client.ApiResponse<PostHogPlugin> PipelineTransformationsUpdateSourcePartialUpdateWithHttpInfo(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsUpdateSourcePartialUpdate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPatchedPlugin;

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsUpdateSourcePartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/{id}/update_source/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsUpdateSourcePartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        public async System.Threading.Tasks.Task<PostHogPlugin> PipelineTransformationsUpdateSourcePartialUpdateAsync(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = await PipelineTransformationsUpdateSourcePartialUpdateWithHttpInfoAsync(id, parentLookupOrganizationId, postHogPatchedPlugin, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPlugin>> PipelineTransformationsUpdateSourcePartialUpdateWithHttpInfoAsync(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsUpdateSourcePartialUpdate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPatchedPlugin;

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsUpdateSourcePartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/{id}/update_source/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsUpdateSourcePartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        public PostHogPlugin PipelineTransformationsUpgradeCreate(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = PipelineTransformationsUpgradeCreateWithHttpInfo(id, parentLookupOrganizationId, postHogPlugin);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        public DotPostHog.Client.ApiResponse<PostHogPlugin> PipelineTransformationsUpgradeCreateWithHttpInfo(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsUpgradeCreate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPlugin;

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsUpgradeCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/{id}/upgrade/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsUpgradeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        public async System.Threading.Tasks.Task<PostHogPlugin> PipelineTransformationsUpgradeCreateAsync(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = await PipelineTransformationsUpgradeCreateWithHttpInfoAsync(id, parentLookupOrganizationId, postHogPlugin, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPlugin>> PipelineTransformationsUpgradeCreateWithHttpInfoAsync(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PipelineTransformationsUpgradeCreate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPlugin;

            localVarRequestOptions.Operation = "OrganizationsApi.PipelineTransformationsUpgradeCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/pipeline_transformations/{id}/upgrade/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PipelineTransformationsUpgradeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        public PostHogPlugin PluginsActivityRetrieve(string parentLookupOrganizationId, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = PluginsActivityRetrieveWithHttpInfo(parentLookupOrganizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        public DotPostHog.Client.ApiResponse<PostHogPlugin> PluginsActivityRetrieveWithHttpInfo(string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsActivityRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsActivityRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/plugins/activity/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsActivityRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        public async System.Threading.Tasks.Task<PostHogPlugin> PluginsActivityRetrieveAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = await PluginsActivityRetrieveWithHttpInfoAsync(parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPlugin>> PluginsActivityRetrieveWithHttpInfoAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsActivityRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsActivityRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/plugins/activity/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsActivityRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        public PostHogPlugin PluginsCheckForUpdatesRetrieve(int id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = PluginsCheckForUpdatesRetrieveWithHttpInfo(id, parentLookupOrganizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        public DotPostHog.Client.ApiResponse<PostHogPlugin> PluginsCheckForUpdatesRetrieveWithHttpInfo(int id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsCheckForUpdatesRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsCheckForUpdatesRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/plugins/{id}/check_for_updates/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsCheckForUpdatesRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        public async System.Threading.Tasks.Task<PostHogPlugin> PluginsCheckForUpdatesRetrieveAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = await PluginsCheckForUpdatesRetrieveWithHttpInfoAsync(id, parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPlugin>> PluginsCheckForUpdatesRetrieveWithHttpInfoAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsCheckForUpdatesRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsCheckForUpdatesRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/plugins/{id}/check_for_updates/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsCheckForUpdatesRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        public PostHogPlugin PluginsCreate(string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = PluginsCreateWithHttpInfo(parentLookupOrganizationId, postHogPlugin);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        public DotPostHog.Client.ApiResponse<PostHogPlugin> PluginsCreateWithHttpInfo(string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsCreate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPlugin;

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/plugins/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        public async System.Threading.Tasks.Task<PostHogPlugin> PluginsCreateAsync(string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = await PluginsCreateWithHttpInfoAsync(parentLookupOrganizationId, postHogPlugin, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPlugin>> PluginsCreateWithHttpInfoAsync(string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsCreate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPlugin;

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/plugins/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PluginsDestroy(int id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            PluginsDestroyWithHttpInfo(id, parentLookupOrganizationId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotPostHog.Client.ApiResponse<Object> PluginsDestroyWithHttpInfo(int id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsDestroy");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/organizations/{parent_lookup_organization_id}/plugins/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PluginsDestroyAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PluginsDestroyWithHttpInfoAsync(id, parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<Object>> PluginsDestroyWithHttpInfoAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsDestroy");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/organizations/{parent_lookup_organization_id}/plugins/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedPluginList</returns>
        public PostHogPaginatedPluginList PluginsList(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedPluginList> localVarResponse = PluginsListWithHttpInfo(parentLookupOrganizationId, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedPluginList</returns>
        public DotPostHog.Client.ApiResponse<PostHogPaginatedPluginList> PluginsListWithHttpInfo(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsList");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPaginatedPluginList>("/api/organizations/{parent_lookup_organization_id}/plugins/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedPluginList</returns>
        public async System.Threading.Tasks.Task<PostHogPaginatedPluginList> PluginsListAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedPluginList> localVarResponse = await PluginsListWithHttpInfoAsync(parentLookupOrganizationId, limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedPluginList)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPaginatedPluginList>> PluginsListWithHttpInfoAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsList");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPaginatedPluginList>("/api/organizations/{parent_lookup_organization_id}/plugins/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        public PostHogPlugin PluginsPartialUpdate(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = PluginsPartialUpdateWithHttpInfo(id, parentLookupOrganizationId, postHogPatchedPlugin);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        public DotPostHog.Client.ApiResponse<PostHogPlugin> PluginsPartialUpdateWithHttpInfo(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsPartialUpdate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPatchedPlugin;

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/plugins/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        public async System.Threading.Tasks.Task<PostHogPlugin> PluginsPartialUpdateAsync(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = await PluginsPartialUpdateWithHttpInfoAsync(id, parentLookupOrganizationId, postHogPatchedPlugin, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPlugin>> PluginsPartialUpdateWithHttpInfoAsync(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsPartialUpdate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPatchedPlugin;

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/plugins/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        public PostHogPlugin PluginsRepositoryRetrieve(string parentLookupOrganizationId, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = PluginsRepositoryRetrieveWithHttpInfo(parentLookupOrganizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        public DotPostHog.Client.ApiResponse<PostHogPlugin> PluginsRepositoryRetrieveWithHttpInfo(string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsRepositoryRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsRepositoryRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/plugins/repository/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsRepositoryRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        public async System.Threading.Tasks.Task<PostHogPlugin> PluginsRepositoryRetrieveAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = await PluginsRepositoryRetrieveWithHttpInfoAsync(parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPlugin>> PluginsRepositoryRetrieveWithHttpInfoAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsRepositoryRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsRepositoryRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/plugins/repository/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsRepositoryRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        public PostHogPlugin PluginsRetrieve(int id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = PluginsRetrieveWithHttpInfo(id, parentLookupOrganizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        public DotPostHog.Client.ApiResponse<PostHogPlugin> PluginsRetrieveWithHttpInfo(int id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/plugins/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        public async System.Threading.Tasks.Task<PostHogPlugin> PluginsRetrieveAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = await PluginsRetrieveWithHttpInfoAsync(id, parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPlugin>> PluginsRetrieveWithHttpInfoAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/plugins/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        public PostHogPlugin PluginsSourceRetrieve(int id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = PluginsSourceRetrieveWithHttpInfo(id, parentLookupOrganizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        public DotPostHog.Client.ApiResponse<PostHogPlugin> PluginsSourceRetrieveWithHttpInfo(int id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsSourceRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsSourceRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/plugins/{id}/source/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsSourceRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        public async System.Threading.Tasks.Task<PostHogPlugin> PluginsSourceRetrieveAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = await PluginsSourceRetrieveWithHttpInfoAsync(id, parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPlugin>> PluginsSourceRetrieveWithHttpInfoAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsSourceRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsSourceRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/plugins/{id}/source/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsSourceRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        public PostHogPlugin PluginsUnusedRetrieve(string parentLookupOrganizationId, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = PluginsUnusedRetrieveWithHttpInfo(parentLookupOrganizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        public DotPostHog.Client.ApiResponse<PostHogPlugin> PluginsUnusedRetrieveWithHttpInfo(string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsUnusedRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsUnusedRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/plugins/unused/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsUnusedRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        public async System.Threading.Tasks.Task<PostHogPlugin> PluginsUnusedRetrieveAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = await PluginsUnusedRetrieveWithHttpInfoAsync(parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPlugin>> PluginsUnusedRetrieveWithHttpInfoAsync(string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsUnusedRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsUnusedRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/plugins/unused/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsUnusedRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        public PostHogPlugin PluginsUpdate(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = PluginsUpdateWithHttpInfo(id, parentLookupOrganizationId, postHogPlugin);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        public DotPostHog.Client.ApiResponse<PostHogPlugin> PluginsUpdateWithHttpInfo(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsUpdate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPlugin;

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/plugins/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        public async System.Threading.Tasks.Task<PostHogPlugin> PluginsUpdateAsync(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = await PluginsUpdateWithHttpInfoAsync(id, parentLookupOrganizationId, postHogPlugin, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPlugin>> PluginsUpdateWithHttpInfoAsync(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsUpdate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPlugin;

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/plugins/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        public PostHogPlugin PluginsUpdateSourcePartialUpdate(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = PluginsUpdateSourcePartialUpdateWithHttpInfo(id, parentLookupOrganizationId, postHogPatchedPlugin);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        public DotPostHog.Client.ApiResponse<PostHogPlugin> PluginsUpdateSourcePartialUpdateWithHttpInfo(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsUpdateSourcePartialUpdate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPatchedPlugin;

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsUpdateSourcePartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/plugins/{id}/update_source/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsUpdateSourcePartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        public async System.Threading.Tasks.Task<PostHogPlugin> PluginsUpdateSourcePartialUpdateAsync(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = await PluginsUpdateSourcePartialUpdateWithHttpInfoAsync(id, parentLookupOrganizationId, postHogPatchedPlugin, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPlugin>> PluginsUpdateSourcePartialUpdateWithHttpInfoAsync(int id, string parentLookupOrganizationId, PostHogPatchedPlugin postHogPatchedPlugin = default(PostHogPatchedPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsUpdateSourcePartialUpdate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPatchedPlugin;

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsUpdateSourcePartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/plugins/{id}/update_source/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsUpdateSourcePartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPlugin</returns>
        public PostHogPlugin PluginsUpgradeCreate(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = PluginsUpgradeCreateWithHttpInfo(id, parentLookupOrganizationId, postHogPlugin);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPlugin</returns>
        public DotPostHog.Client.ApiResponse<PostHogPlugin> PluginsUpgradeCreateWithHttpInfo(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsUpgradeCreate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPlugin;

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsUpgradeCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/plugins/{id}/upgrade/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsUpgradeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPlugin</returns>
        public async System.Threading.Tasks.Task<PostHogPlugin> PluginsUpgradeCreateAsync(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPlugin> localVarResponse = await PluginsUpgradeCreateWithHttpInfoAsync(id, parentLookupOrganizationId, postHogPlugin, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this plugin.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPlugin"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPlugin)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPlugin>> PluginsUpgradeCreateWithHttpInfoAsync(int id, string parentLookupOrganizationId, PostHogPlugin postHogPlugin = default(PostHogPlugin), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->PluginsUpgradeCreate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPlugin;

            localVarRequestOptions.Operation = "OrganizationsApi.PluginsUpgradeCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostHogPlugin>("/api/organizations/{parent_lookup_organization_id}/plugins/{id}/upgrade/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluginsUpgradeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationResourceAccess"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationResourceAccess</returns>
        public PostHogOrganizationResourceAccess ResourceAccessCreate(string parentLookupOrganizationId, PostHogOrganizationResourceAccess postHogOrganizationResourceAccess, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationResourceAccess> localVarResponse = ResourceAccessCreateWithHttpInfo(parentLookupOrganizationId, postHogOrganizationResourceAccess);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationResourceAccess"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationResourceAccess</returns>
        public DotPostHog.Client.ApiResponse<PostHogOrganizationResourceAccess> ResourceAccessCreateWithHttpInfo(string parentLookupOrganizationId, PostHogOrganizationResourceAccess postHogOrganizationResourceAccess, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->ResourceAccessCreate");
            }

            // verify the required parameter 'postHogOrganizationResourceAccess' is set
            if (postHogOrganizationResourceAccess == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogOrganizationResourceAccess' when calling OrganizationsApi->ResourceAccessCreate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogOrganizationResourceAccess;

            localVarRequestOptions.Operation = "OrganizationsApi.ResourceAccessCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostHogOrganizationResourceAccess>("/api/organizations/{parent_lookup_organization_id}/resource_access/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceAccessCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationResourceAccess"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationResourceAccess</returns>
        public async System.Threading.Tasks.Task<PostHogOrganizationResourceAccess> ResourceAccessCreateAsync(string parentLookupOrganizationId, PostHogOrganizationResourceAccess postHogOrganizationResourceAccess, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationResourceAccess> localVarResponse = await ResourceAccessCreateWithHttpInfoAsync(parentLookupOrganizationId, postHogOrganizationResourceAccess, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationResourceAccess"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationResourceAccess)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogOrganizationResourceAccess>> ResourceAccessCreateWithHttpInfoAsync(string parentLookupOrganizationId, PostHogOrganizationResourceAccess postHogOrganizationResourceAccess, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->ResourceAccessCreate");
            }

            // verify the required parameter 'postHogOrganizationResourceAccess' is set
            if (postHogOrganizationResourceAccess == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogOrganizationResourceAccess' when calling OrganizationsApi->ResourceAccessCreate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogOrganizationResourceAccess;

            localVarRequestOptions.Operation = "OrganizationsApi.ResourceAccessCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostHogOrganizationResourceAccess>("/api/organizations/{parent_lookup_organization_id}/resource_access/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceAccessCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ResourceAccessDestroy(int id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            ResourceAccessDestroyWithHttpInfo(id, parentLookupOrganizationId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotPostHog.Client.ApiResponse<Object> ResourceAccessDestroyWithHttpInfo(int id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->ResourceAccessDestroy");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.ResourceAccessDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/organizations/{parent_lookup_organization_id}/resource_access/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceAccessDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResourceAccessDestroyAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ResourceAccessDestroyWithHttpInfoAsync(id, parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<Object>> ResourceAccessDestroyWithHttpInfoAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->ResourceAccessDestroy");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.ResourceAccessDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/organizations/{parent_lookup_organization_id}/resource_access/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceAccessDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedOrganizationResourceAccessList</returns>
        public PostHogPaginatedOrganizationResourceAccessList ResourceAccessList(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedOrganizationResourceAccessList> localVarResponse = ResourceAccessListWithHttpInfo(parentLookupOrganizationId, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedOrganizationResourceAccessList</returns>
        public DotPostHog.Client.ApiResponse<PostHogPaginatedOrganizationResourceAccessList> ResourceAccessListWithHttpInfo(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->ResourceAccessList");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "OrganizationsApi.ResourceAccessList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPaginatedOrganizationResourceAccessList>("/api/organizations/{parent_lookup_organization_id}/resource_access/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceAccessList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedOrganizationResourceAccessList</returns>
        public async System.Threading.Tasks.Task<PostHogPaginatedOrganizationResourceAccessList> ResourceAccessListAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedOrganizationResourceAccessList> localVarResponse = await ResourceAccessListWithHttpInfoAsync(parentLookupOrganizationId, limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedOrganizationResourceAccessList)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPaginatedOrganizationResourceAccessList>> ResourceAccessListWithHttpInfoAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->ResourceAccessList");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "OrganizationsApi.ResourceAccessList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPaginatedOrganizationResourceAccessList>("/api/organizations/{parent_lookup_organization_id}/resource_access/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceAccessList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedOrganizationResourceAccess"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationResourceAccess</returns>
        public PostHogOrganizationResourceAccess ResourceAccessPartialUpdate(int id, string parentLookupOrganizationId, PostHogPatchedOrganizationResourceAccess postHogPatchedOrganizationResourceAccess = default(PostHogPatchedOrganizationResourceAccess), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationResourceAccess> localVarResponse = ResourceAccessPartialUpdateWithHttpInfo(id, parentLookupOrganizationId, postHogPatchedOrganizationResourceAccess);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedOrganizationResourceAccess"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationResourceAccess</returns>
        public DotPostHog.Client.ApiResponse<PostHogOrganizationResourceAccess> ResourceAccessPartialUpdateWithHttpInfo(int id, string parentLookupOrganizationId, PostHogPatchedOrganizationResourceAccess postHogPatchedOrganizationResourceAccess = default(PostHogPatchedOrganizationResourceAccess), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->ResourceAccessPartialUpdate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPatchedOrganizationResourceAccess;

            localVarRequestOptions.Operation = "OrganizationsApi.ResourceAccessPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<PostHogOrganizationResourceAccess>("/api/organizations/{parent_lookup_organization_id}/resource_access/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceAccessPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedOrganizationResourceAccess"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationResourceAccess</returns>
        public async System.Threading.Tasks.Task<PostHogOrganizationResourceAccess> ResourceAccessPartialUpdateAsync(int id, string parentLookupOrganizationId, PostHogPatchedOrganizationResourceAccess postHogPatchedOrganizationResourceAccess = default(PostHogPatchedOrganizationResourceAccess), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationResourceAccess> localVarResponse = await ResourceAccessPartialUpdateWithHttpInfoAsync(id, parentLookupOrganizationId, postHogPatchedOrganizationResourceAccess, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedOrganizationResourceAccess"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationResourceAccess)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogOrganizationResourceAccess>> ResourceAccessPartialUpdateWithHttpInfoAsync(int id, string parentLookupOrganizationId, PostHogPatchedOrganizationResourceAccess postHogPatchedOrganizationResourceAccess = default(PostHogPatchedOrganizationResourceAccess), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->ResourceAccessPartialUpdate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPatchedOrganizationResourceAccess;

            localVarRequestOptions.Operation = "OrganizationsApi.ResourceAccessPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<PostHogOrganizationResourceAccess>("/api/organizations/{parent_lookup_organization_id}/resource_access/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceAccessPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationResourceAccess</returns>
        public PostHogOrganizationResourceAccess ResourceAccessRetrieve(int id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationResourceAccess> localVarResponse = ResourceAccessRetrieveWithHttpInfo(id, parentLookupOrganizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationResourceAccess</returns>
        public DotPostHog.Client.ApiResponse<PostHogOrganizationResourceAccess> ResourceAccessRetrieveWithHttpInfo(int id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->ResourceAccessRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.ResourceAccessRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogOrganizationResourceAccess>("/api/organizations/{parent_lookup_organization_id}/resource_access/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceAccessRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationResourceAccess</returns>
        public async System.Threading.Tasks.Task<PostHogOrganizationResourceAccess> ResourceAccessRetrieveAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationResourceAccess> localVarResponse = await ResourceAccessRetrieveWithHttpInfoAsync(id, parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationResourceAccess)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogOrganizationResourceAccess>> ResourceAccessRetrieveWithHttpInfoAsync(int id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->ResourceAccessRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.ResourceAccessRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogOrganizationResourceAccess>("/api/organizations/{parent_lookup_organization_id}/resource_access/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceAccessRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationResourceAccess"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogOrganizationResourceAccess</returns>
        public PostHogOrganizationResourceAccess ResourceAccessUpdate(int id, string parentLookupOrganizationId, PostHogOrganizationResourceAccess postHogOrganizationResourceAccess, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationResourceAccess> localVarResponse = ResourceAccessUpdateWithHttpInfo(id, parentLookupOrganizationId, postHogOrganizationResourceAccess);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationResourceAccess"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogOrganizationResourceAccess</returns>
        public DotPostHog.Client.ApiResponse<PostHogOrganizationResourceAccess> ResourceAccessUpdateWithHttpInfo(int id, string parentLookupOrganizationId, PostHogOrganizationResourceAccess postHogOrganizationResourceAccess, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->ResourceAccessUpdate");
            }

            // verify the required parameter 'postHogOrganizationResourceAccess' is set
            if (postHogOrganizationResourceAccess == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogOrganizationResourceAccess' when calling OrganizationsApi->ResourceAccessUpdate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogOrganizationResourceAccess;

            localVarRequestOptions.Operation = "OrganizationsApi.ResourceAccessUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<PostHogOrganizationResourceAccess>("/api/organizations/{parent_lookup_organization_id}/resource_access/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceAccessUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationResourceAccess"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogOrganizationResourceAccess</returns>
        public async System.Threading.Tasks.Task<PostHogOrganizationResourceAccess> ResourceAccessUpdateAsync(int id, string parentLookupOrganizationId, PostHogOrganizationResourceAccess postHogOrganizationResourceAccess, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogOrganizationResourceAccess> localVarResponse = await ResourceAccessUpdateWithHttpInfoAsync(id, parentLookupOrganizationId, postHogOrganizationResourceAccess, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this organization resource access.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogOrganizationResourceAccess"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogOrganizationResourceAccess)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogOrganizationResourceAccess>> ResourceAccessUpdateWithHttpInfoAsync(int id, string parentLookupOrganizationId, PostHogOrganizationResourceAccess postHogOrganizationResourceAccess, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->ResourceAccessUpdate");
            }

            // verify the required parameter 'postHogOrganizationResourceAccess' is set
            if (postHogOrganizationResourceAccess == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogOrganizationResourceAccess' when calling OrganizationsApi->ResourceAccessUpdate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogOrganizationResourceAccess;

            localVarRequestOptions.Operation = "OrganizationsApi.ResourceAccessUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PostHogOrganizationResourceAccess>("/api/organizations/{parent_lookup_organization_id}/resource_access/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceAccessUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogRole"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogRole</returns>
        public PostHogRole RolesCreate(string parentLookupOrganizationId, PostHogRole postHogRole, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogRole> localVarResponse = RolesCreateWithHttpInfo(parentLookupOrganizationId, postHogRole);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogRole"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogRole</returns>
        public DotPostHog.Client.ApiResponse<PostHogRole> RolesCreateWithHttpInfo(string parentLookupOrganizationId, PostHogRole postHogRole, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->RolesCreate");
            }

            // verify the required parameter 'postHogRole' is set
            if (postHogRole == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogRole' when calling OrganizationsApi->RolesCreate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogRole;

            localVarRequestOptions.Operation = "OrganizationsApi.RolesCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostHogRole>("/api/organizations/{parent_lookup_organization_id}/roles/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RolesCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogRole"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogRole</returns>
        public async System.Threading.Tasks.Task<PostHogRole> RolesCreateAsync(string parentLookupOrganizationId, PostHogRole postHogRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogRole> localVarResponse = await RolesCreateWithHttpInfoAsync(parentLookupOrganizationId, postHogRole, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogRole"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogRole)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogRole>> RolesCreateWithHttpInfoAsync(string parentLookupOrganizationId, PostHogRole postHogRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->RolesCreate");
            }

            // verify the required parameter 'postHogRole' is set
            if (postHogRole == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogRole' when calling OrganizationsApi->RolesCreate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogRole;

            localVarRequestOptions.Operation = "OrganizationsApi.RolesCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostHogRole>("/api/organizations/{parent_lookup_organization_id}/roles/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RolesCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RolesDestroy(Guid id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            RolesDestroyWithHttpInfo(id, parentLookupOrganizationId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotPostHog.Client.ApiResponse<Object> RolesDestroyWithHttpInfo(Guid id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->RolesDestroy");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.RolesDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/organizations/{parent_lookup_organization_id}/roles/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RolesDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RolesDestroyAsync(Guid id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RolesDestroyWithHttpInfoAsync(id, parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<Object>> RolesDestroyWithHttpInfoAsync(Guid id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->RolesDestroy");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.RolesDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/organizations/{parent_lookup_organization_id}/roles/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RolesDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedRoleList</returns>
        public PostHogPaginatedRoleList RolesList(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedRoleList> localVarResponse = RolesListWithHttpInfo(parentLookupOrganizationId, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedRoleList</returns>
        public DotPostHog.Client.ApiResponse<PostHogPaginatedRoleList> RolesListWithHttpInfo(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->RolesList");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "OrganizationsApi.RolesList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPaginatedRoleList>("/api/organizations/{parent_lookup_organization_id}/roles/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RolesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedRoleList</returns>
        public async System.Threading.Tasks.Task<PostHogPaginatedRoleList> RolesListAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedRoleList> localVarResponse = await RolesListWithHttpInfoAsync(parentLookupOrganizationId, limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedRoleList)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPaginatedRoleList>> RolesListWithHttpInfoAsync(string parentLookupOrganizationId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->RolesList");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "OrganizationsApi.RolesList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPaginatedRoleList>("/api/organizations/{parent_lookup_organization_id}/roles/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RolesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedRole"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogRole</returns>
        public PostHogRole RolesPartialUpdate(Guid id, string parentLookupOrganizationId, PostHogPatchedRole postHogPatchedRole = default(PostHogPatchedRole), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogRole> localVarResponse = RolesPartialUpdateWithHttpInfo(id, parentLookupOrganizationId, postHogPatchedRole);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedRole"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogRole</returns>
        public DotPostHog.Client.ApiResponse<PostHogRole> RolesPartialUpdateWithHttpInfo(Guid id, string parentLookupOrganizationId, PostHogPatchedRole postHogPatchedRole = default(PostHogPatchedRole), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->RolesPartialUpdate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPatchedRole;

            localVarRequestOptions.Operation = "OrganizationsApi.RolesPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<PostHogRole>("/api/organizations/{parent_lookup_organization_id}/roles/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RolesPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedRole"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogRole</returns>
        public async System.Threading.Tasks.Task<PostHogRole> RolesPartialUpdateAsync(Guid id, string parentLookupOrganizationId, PostHogPatchedRole postHogPatchedRole = default(PostHogPatchedRole), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogRole> localVarResponse = await RolesPartialUpdateWithHttpInfoAsync(id, parentLookupOrganizationId, postHogPatchedRole, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogPatchedRole"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogRole)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogRole>> RolesPartialUpdateWithHttpInfoAsync(Guid id, string parentLookupOrganizationId, PostHogPatchedRole postHogPatchedRole = default(PostHogPatchedRole), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->RolesPartialUpdate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogPatchedRole;

            localVarRequestOptions.Operation = "OrganizationsApi.RolesPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<PostHogRole>("/api/organizations/{parent_lookup_organization_id}/roles/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RolesPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogRole</returns>
        public PostHogRole RolesRetrieve(Guid id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogRole> localVarResponse = RolesRetrieveWithHttpInfo(id, parentLookupOrganizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogRole</returns>
        public DotPostHog.Client.ApiResponse<PostHogRole> RolesRetrieveWithHttpInfo(Guid id, string parentLookupOrganizationId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->RolesRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.RolesRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogRole>("/api/organizations/{parent_lookup_organization_id}/roles/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RolesRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogRole</returns>
        public async System.Threading.Tasks.Task<PostHogRole> RolesRetrieveAsync(Guid id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogRole> localVarResponse = await RolesRetrieveWithHttpInfoAsync(id, parentLookupOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogRole)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogRole>> RolesRetrieveWithHttpInfoAsync(Guid id, string parentLookupOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->RolesRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.RolesRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogRole>("/api/organizations/{parent_lookup_organization_id}/roles/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RolesRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="postHogRoleMembership"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogRoleMembership</returns>
        public PostHogRoleMembership RolesRoleMembershipsCreate(string parentLookupOrganizationId, string parentLookupRoleId, PostHogRoleMembership postHogRoleMembership, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogRoleMembership> localVarResponse = RolesRoleMembershipsCreateWithHttpInfo(parentLookupOrganizationId, parentLookupRoleId, postHogRoleMembership);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="postHogRoleMembership"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogRoleMembership</returns>
        public DotPostHog.Client.ApiResponse<PostHogRoleMembership> RolesRoleMembershipsCreateWithHttpInfo(string parentLookupOrganizationId, string parentLookupRoleId, PostHogRoleMembership postHogRoleMembership, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->RolesRoleMembershipsCreate");
            }

            // verify the required parameter 'parentLookupRoleId' is set
            if (parentLookupRoleId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupRoleId' when calling OrganizationsApi->RolesRoleMembershipsCreate");
            }

            // verify the required parameter 'postHogRoleMembership' is set
            if (postHogRoleMembership == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogRoleMembership' when calling OrganizationsApi->RolesRoleMembershipsCreate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_role_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupRoleId)); // path parameter
            localVarRequestOptions.Data = postHogRoleMembership;

            localVarRequestOptions.Operation = "OrganizationsApi.RolesRoleMembershipsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostHogRoleMembership>("/api/organizations/{parent_lookup_organization_id}/roles/{parent_lookup_role_id}/role_memberships/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RolesRoleMembershipsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="postHogRoleMembership"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogRoleMembership</returns>
        public async System.Threading.Tasks.Task<PostHogRoleMembership> RolesRoleMembershipsCreateAsync(string parentLookupOrganizationId, string parentLookupRoleId, PostHogRoleMembership postHogRoleMembership, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogRoleMembership> localVarResponse = await RolesRoleMembershipsCreateWithHttpInfoAsync(parentLookupOrganizationId, parentLookupRoleId, postHogRoleMembership, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="postHogRoleMembership"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogRoleMembership)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogRoleMembership>> RolesRoleMembershipsCreateWithHttpInfoAsync(string parentLookupOrganizationId, string parentLookupRoleId, PostHogRoleMembership postHogRoleMembership, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->RolesRoleMembershipsCreate");
            }

            // verify the required parameter 'parentLookupRoleId' is set
            if (parentLookupRoleId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupRoleId' when calling OrganizationsApi->RolesRoleMembershipsCreate");
            }

            // verify the required parameter 'postHogRoleMembership' is set
            if (postHogRoleMembership == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogRoleMembership' when calling OrganizationsApi->RolesRoleMembershipsCreate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_role_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupRoleId)); // path parameter
            localVarRequestOptions.Data = postHogRoleMembership;

            localVarRequestOptions.Operation = "OrganizationsApi.RolesRoleMembershipsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostHogRoleMembership>("/api/organizations/{parent_lookup_organization_id}/roles/{parent_lookup_role_id}/role_memberships/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RolesRoleMembershipsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role membership.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RolesRoleMembershipsDestroy(Guid id, string parentLookupOrganizationId, string parentLookupRoleId, int operationIndex = 0)
        {
            RolesRoleMembershipsDestroyWithHttpInfo(id, parentLookupOrganizationId, parentLookupRoleId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role membership.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotPostHog.Client.ApiResponse<Object> RolesRoleMembershipsDestroyWithHttpInfo(Guid id, string parentLookupOrganizationId, string parentLookupRoleId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->RolesRoleMembershipsDestroy");
            }

            // verify the required parameter 'parentLookupRoleId' is set
            if (parentLookupRoleId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupRoleId' when calling OrganizationsApi->RolesRoleMembershipsDestroy");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_role_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupRoleId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.RolesRoleMembershipsDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/organizations/{parent_lookup_organization_id}/roles/{parent_lookup_role_id}/role_memberships/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RolesRoleMembershipsDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role membership.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RolesRoleMembershipsDestroyAsync(Guid id, string parentLookupOrganizationId, string parentLookupRoleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RolesRoleMembershipsDestroyWithHttpInfoAsync(id, parentLookupOrganizationId, parentLookupRoleId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role membership.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<Object>> RolesRoleMembershipsDestroyWithHttpInfoAsync(Guid id, string parentLookupOrganizationId, string parentLookupRoleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->RolesRoleMembershipsDestroy");
            }

            // verify the required parameter 'parentLookupRoleId' is set
            if (parentLookupRoleId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupRoleId' when calling OrganizationsApi->RolesRoleMembershipsDestroy");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_role_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupRoleId)); // path parameter

            localVarRequestOptions.Operation = "OrganizationsApi.RolesRoleMembershipsDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/organizations/{parent_lookup_organization_id}/roles/{parent_lookup_role_id}/role_memberships/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RolesRoleMembershipsDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedRoleMembershipList</returns>
        public PostHogPaginatedRoleMembershipList RolesRoleMembershipsList(string parentLookupOrganizationId, string parentLookupRoleId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedRoleMembershipList> localVarResponse = RolesRoleMembershipsListWithHttpInfo(parentLookupOrganizationId, parentLookupRoleId, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedRoleMembershipList</returns>
        public DotPostHog.Client.ApiResponse<PostHogPaginatedRoleMembershipList> RolesRoleMembershipsListWithHttpInfo(string parentLookupOrganizationId, string parentLookupRoleId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->RolesRoleMembershipsList");
            }

            // verify the required parameter 'parentLookupRoleId' is set
            if (parentLookupRoleId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupRoleId' when calling OrganizationsApi->RolesRoleMembershipsList");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_role_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupRoleId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "OrganizationsApi.RolesRoleMembershipsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPaginatedRoleMembershipList>("/api/organizations/{parent_lookup_organization_id}/roles/{parent_lookup_role_id}/role_memberships/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RolesRoleMembershipsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedRoleMembershipList</returns>
        public async System.Threading.Tasks.Task<PostHogPaginatedRoleMembershipList> RolesRoleMembershipsListAsync(string parentLookupOrganizationId, string parentLookupRoleId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedRoleMembershipList> localVarResponse = await RolesRoleMembershipsListWithHttpInfoAsync(parentLookupOrganizationId, parentLookupRoleId, limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="parentLookupRoleId"></param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedRoleMembershipList)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPaginatedRoleMembershipList>> RolesRoleMembershipsListWithHttpInfoAsync(string parentLookupOrganizationId, string parentLookupRoleId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->RolesRoleMembershipsList");
            }

            // verify the required parameter 'parentLookupRoleId' is set
            if (parentLookupRoleId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupRoleId' when calling OrganizationsApi->RolesRoleMembershipsList");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_role_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupRoleId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "OrganizationsApi.RolesRoleMembershipsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPaginatedRoleMembershipList>("/api/organizations/{parent_lookup_organization_id}/roles/{parent_lookup_role_id}/role_memberships/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RolesRoleMembershipsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogRole"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogRole</returns>
        public PostHogRole RolesUpdate(Guid id, string parentLookupOrganizationId, PostHogRole postHogRole, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogRole> localVarResponse = RolesUpdateWithHttpInfo(id, parentLookupOrganizationId, postHogRole);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogRole"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogRole</returns>
        public DotPostHog.Client.ApiResponse<PostHogRole> RolesUpdateWithHttpInfo(Guid id, string parentLookupOrganizationId, PostHogRole postHogRole, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->RolesUpdate");
            }

            // verify the required parameter 'postHogRole' is set
            if (postHogRole == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogRole' when calling OrganizationsApi->RolesUpdate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogRole;

            localVarRequestOptions.Operation = "OrganizationsApi.RolesUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<PostHogRole>("/api/organizations/{parent_lookup_organization_id}/roles/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RolesUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogRole"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogRole</returns>
        public async System.Threading.Tasks.Task<PostHogRole> RolesUpdateAsync(Guid id, string parentLookupOrganizationId, PostHogRole postHogRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogRole> localVarResponse = await RolesUpdateWithHttpInfoAsync(id, parentLookupOrganizationId, postHogRole, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this role.</param>
        /// <param name="parentLookupOrganizationId"></param>
        /// <param name="postHogRole"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogRole)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogRole>> RolesUpdateWithHttpInfoAsync(Guid id, string parentLookupOrganizationId, PostHogRole postHogRole, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupOrganizationId' is set
            if (parentLookupOrganizationId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupOrganizationId' when calling OrganizationsApi->RolesUpdate");
            }

            // verify the required parameter 'postHogRole' is set
            if (postHogRole == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogRole' when calling OrganizationsApi->RolesUpdate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_organization_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupOrganizationId)); // path parameter
            localVarRequestOptions.Data = postHogRole;

            localVarRequestOptions.Operation = "OrganizationsApi.RolesUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PostHogRole>("/api/organizations/{parent_lookup_organization_id}/roles/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RolesUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
