/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DotPostHog.Client;
using DotPostHog.Model;

namespace DotPostHog.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExternalDataSourcesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogExternalDataSourceSerializers</returns>
        PostHogExternalDataSourceSerializers ExternalDataSourcesCreate(string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogExternalDataSourceSerializers</returns>
        ApiResponse<PostHogExternalDataSourceSerializers> ExternalDataSourcesCreateWithHttpInfo(string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ExternalDataSourcesDestroy(Guid id, string projectId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExternalDataSourcesDestroyWithHttpInfo(Guid id, string projectId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="search">A search term. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedExternalDataSourceSerializersList</returns>
        PostHogPaginatedExternalDataSourceSerializersList ExternalDataSourcesList(string projectId, int? limit = default(int?), int? offset = default(int?), string search = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="search">A search term. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedExternalDataSourceSerializersList</returns>
        ApiResponse<PostHogPaginatedExternalDataSourceSerializersList> ExternalDataSourcesListWithHttpInfo(string projectId, int? limit = default(int?), int? offset = default(int?), string search = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogPatchedExternalDataSourceSerializers"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogExternalDataSourceSerializers</returns>
        PostHogExternalDataSourceSerializers ExternalDataSourcesPartialUpdate(Guid id, string projectId, PostHogPatchedExternalDataSourceSerializers postHogPatchedExternalDataSourceSerializers = default(PostHogPatchedExternalDataSourceSerializers), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogPatchedExternalDataSourceSerializers"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogExternalDataSourceSerializers</returns>
        ApiResponse<PostHogExternalDataSourceSerializers> ExternalDataSourcesPartialUpdateWithHttpInfo(Guid id, string projectId, PostHogPatchedExternalDataSourceSerializers postHogPatchedExternalDataSourceSerializers = default(PostHogPatchedExternalDataSourceSerializers), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogExternalDataSourceSerializers</returns>
        PostHogExternalDataSourceSerializers ExternalDataSourcesReloadCreate(Guid id, string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogExternalDataSourceSerializers</returns>
        ApiResponse<PostHogExternalDataSourceSerializers> ExternalDataSourcesReloadCreateWithHttpInfo(Guid id, string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogExternalDataSourceSerializers</returns>
        PostHogExternalDataSourceSerializers ExternalDataSourcesRetrieve(Guid id, string projectId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogExternalDataSourceSerializers</returns>
        ApiResponse<PostHogExternalDataSourceSerializers> ExternalDataSourcesRetrieveWithHttpInfo(Guid id, string projectId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogExternalDataSourceSerializers</returns>
        PostHogExternalDataSourceSerializers ExternalDataSourcesUpdate(Guid id, string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogExternalDataSourceSerializers</returns>
        ApiResponse<PostHogExternalDataSourceSerializers> ExternalDataSourcesUpdateWithHttpInfo(Guid id, string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExternalDataSourcesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogExternalDataSourceSerializers</returns>
        System.Threading.Tasks.Task<PostHogExternalDataSourceSerializers> ExternalDataSourcesCreateAsync(string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogExternalDataSourceSerializers)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogExternalDataSourceSerializers>> ExternalDataSourcesCreateWithHttpInfoAsync(string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExternalDataSourcesDestroyAsync(Guid id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExternalDataSourcesDestroyWithHttpInfoAsync(Guid id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="search">A search term. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedExternalDataSourceSerializersList</returns>
        System.Threading.Tasks.Task<PostHogPaginatedExternalDataSourceSerializersList> ExternalDataSourcesListAsync(string projectId, int? limit = default(int?), int? offset = default(int?), string search = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="search">A search term. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedExternalDataSourceSerializersList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPaginatedExternalDataSourceSerializersList>> ExternalDataSourcesListWithHttpInfoAsync(string projectId, int? limit = default(int?), int? offset = default(int?), string search = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogPatchedExternalDataSourceSerializers"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogExternalDataSourceSerializers</returns>
        System.Threading.Tasks.Task<PostHogExternalDataSourceSerializers> ExternalDataSourcesPartialUpdateAsync(Guid id, string projectId, PostHogPatchedExternalDataSourceSerializers postHogPatchedExternalDataSourceSerializers = default(PostHogPatchedExternalDataSourceSerializers), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogPatchedExternalDataSourceSerializers"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogExternalDataSourceSerializers)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogExternalDataSourceSerializers>> ExternalDataSourcesPartialUpdateWithHttpInfoAsync(Guid id, string projectId, PostHogPatchedExternalDataSourceSerializers postHogPatchedExternalDataSourceSerializers = default(PostHogPatchedExternalDataSourceSerializers), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogExternalDataSourceSerializers</returns>
        System.Threading.Tasks.Task<PostHogExternalDataSourceSerializers> ExternalDataSourcesReloadCreateAsync(Guid id, string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogExternalDataSourceSerializers)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogExternalDataSourceSerializers>> ExternalDataSourcesReloadCreateWithHttpInfoAsync(Guid id, string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogExternalDataSourceSerializers</returns>
        System.Threading.Tasks.Task<PostHogExternalDataSourceSerializers> ExternalDataSourcesRetrieveAsync(Guid id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogExternalDataSourceSerializers)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogExternalDataSourceSerializers>> ExternalDataSourcesRetrieveWithHttpInfoAsync(Guid id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogExternalDataSourceSerializers</returns>
        System.Threading.Tasks.Task<PostHogExternalDataSourceSerializers> ExternalDataSourcesUpdateAsync(Guid id, string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create, Read, Update and Delete External data Sources.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogExternalDataSourceSerializers)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogExternalDataSourceSerializers>> ExternalDataSourcesUpdateWithHttpInfoAsync(Guid id, string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExternalDataSourcesApi : IExternalDataSourcesApiSync, IExternalDataSourcesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExternalDataSourcesApi : IExternalDataSourcesApi
    {
        private DotPostHog.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalDataSourcesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExternalDataSourcesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalDataSourcesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExternalDataSourcesApi(string basePath)
        {
            this.Configuration = DotPostHog.Client.Configuration.MergeConfigurations(
                DotPostHog.Client.GlobalConfiguration.Instance,
                new DotPostHog.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DotPostHog.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalDataSourcesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExternalDataSourcesApi(DotPostHog.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DotPostHog.Client.Configuration.MergeConfigurations(
                DotPostHog.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DotPostHog.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalDataSourcesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ExternalDataSourcesApi(DotPostHog.Client.ISynchronousClient client, DotPostHog.Client.IAsynchronousClient asyncClient, DotPostHog.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DotPostHog.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DotPostHog.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DotPostHog.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DotPostHog.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DotPostHog.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogExternalDataSourceSerializers</returns>
        public PostHogExternalDataSourceSerializers ExternalDataSourcesCreate(string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogExternalDataSourceSerializers> localVarResponse = ExternalDataSourcesCreateWithHttpInfo(projectId, postHogExternalDataSourceSerializers);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogExternalDataSourceSerializers</returns>
        public DotPostHog.Client.ApiResponse<PostHogExternalDataSourceSerializers> ExternalDataSourcesCreateWithHttpInfo(string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling ExternalDataSourcesApi->ExternalDataSourcesCreate");
            }

            // verify the required parameter 'postHogExternalDataSourceSerializers' is set
            if (postHogExternalDataSourceSerializers == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogExternalDataSourceSerializers' when calling ExternalDataSourcesApi->ExternalDataSourcesCreate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = postHogExternalDataSourceSerializers;

            localVarRequestOptions.Operation = "ExternalDataSourcesApi.ExternalDataSourcesCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostHogExternalDataSourceSerializers>("/api/projects/{project_id}/external_data_sources/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExternalDataSourcesCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogExternalDataSourceSerializers</returns>
        public async System.Threading.Tasks.Task<PostHogExternalDataSourceSerializers> ExternalDataSourcesCreateAsync(string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogExternalDataSourceSerializers> localVarResponse = await ExternalDataSourcesCreateWithHttpInfoAsync(projectId, postHogExternalDataSourceSerializers, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogExternalDataSourceSerializers)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogExternalDataSourceSerializers>> ExternalDataSourcesCreateWithHttpInfoAsync(string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling ExternalDataSourcesApi->ExternalDataSourcesCreate");
            }

            // verify the required parameter 'postHogExternalDataSourceSerializers' is set
            if (postHogExternalDataSourceSerializers == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogExternalDataSourceSerializers' when calling ExternalDataSourcesApi->ExternalDataSourcesCreate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = postHogExternalDataSourceSerializers;

            localVarRequestOptions.Operation = "ExternalDataSourcesApi.ExternalDataSourcesCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostHogExternalDataSourceSerializers>("/api/projects/{project_id}/external_data_sources/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExternalDataSourcesCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ExternalDataSourcesDestroy(Guid id, string projectId, int operationIndex = 0)
        {
            ExternalDataSourcesDestroyWithHttpInfo(id, projectId);
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotPostHog.Client.ApiResponse<Object> ExternalDataSourcesDestroyWithHttpInfo(Guid id, string projectId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling ExternalDataSourcesApi->ExternalDataSourcesDestroy");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ExternalDataSourcesApi.ExternalDataSourcesDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/projects/{project_id}/external_data_sources/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExternalDataSourcesDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExternalDataSourcesDestroyAsync(Guid id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ExternalDataSourcesDestroyWithHttpInfoAsync(id, projectId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<Object>> ExternalDataSourcesDestroyWithHttpInfoAsync(Guid id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling ExternalDataSourcesApi->ExternalDataSourcesDestroy");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ExternalDataSourcesApi.ExternalDataSourcesDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/projects/{project_id}/external_data_sources/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExternalDataSourcesDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="search">A search term. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedExternalDataSourceSerializersList</returns>
        public PostHogPaginatedExternalDataSourceSerializersList ExternalDataSourcesList(string projectId, int? limit = default(int?), int? offset = default(int?), string search = default(string), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedExternalDataSourceSerializersList> localVarResponse = ExternalDataSourcesListWithHttpInfo(projectId, limit, offset, search);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="search">A search term. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedExternalDataSourceSerializersList</returns>
        public DotPostHog.Client.ApiResponse<PostHogPaginatedExternalDataSourceSerializersList> ExternalDataSourcesListWithHttpInfo(string projectId, int? limit = default(int?), int? offset = default(int?), string search = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling ExternalDataSourcesApi->ExternalDataSourcesList");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }

            localVarRequestOptions.Operation = "ExternalDataSourcesApi.ExternalDataSourcesList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPaginatedExternalDataSourceSerializersList>("/api/projects/{project_id}/external_data_sources/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExternalDataSourcesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="search">A search term. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedExternalDataSourceSerializersList</returns>
        public async System.Threading.Tasks.Task<PostHogPaginatedExternalDataSourceSerializersList> ExternalDataSourcesListAsync(string projectId, int? limit = default(int?), int? offset = default(int?), string search = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedExternalDataSourceSerializersList> localVarResponse = await ExternalDataSourcesListWithHttpInfoAsync(projectId, limit, offset, search, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="search">A search term. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedExternalDataSourceSerializersList)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPaginatedExternalDataSourceSerializersList>> ExternalDataSourcesListWithHttpInfoAsync(string projectId, int? limit = default(int?), int? offset = default(int?), string search = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling ExternalDataSourcesApi->ExternalDataSourcesList");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }

            localVarRequestOptions.Operation = "ExternalDataSourcesApi.ExternalDataSourcesList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPaginatedExternalDataSourceSerializersList>("/api/projects/{project_id}/external_data_sources/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExternalDataSourcesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogPatchedExternalDataSourceSerializers"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogExternalDataSourceSerializers</returns>
        public PostHogExternalDataSourceSerializers ExternalDataSourcesPartialUpdate(Guid id, string projectId, PostHogPatchedExternalDataSourceSerializers postHogPatchedExternalDataSourceSerializers = default(PostHogPatchedExternalDataSourceSerializers), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogExternalDataSourceSerializers> localVarResponse = ExternalDataSourcesPartialUpdateWithHttpInfo(id, projectId, postHogPatchedExternalDataSourceSerializers);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogPatchedExternalDataSourceSerializers"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogExternalDataSourceSerializers</returns>
        public DotPostHog.Client.ApiResponse<PostHogExternalDataSourceSerializers> ExternalDataSourcesPartialUpdateWithHttpInfo(Guid id, string projectId, PostHogPatchedExternalDataSourceSerializers postHogPatchedExternalDataSourceSerializers = default(PostHogPatchedExternalDataSourceSerializers), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling ExternalDataSourcesApi->ExternalDataSourcesPartialUpdate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = postHogPatchedExternalDataSourceSerializers;

            localVarRequestOptions.Operation = "ExternalDataSourcesApi.ExternalDataSourcesPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<PostHogExternalDataSourceSerializers>("/api/projects/{project_id}/external_data_sources/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExternalDataSourcesPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogPatchedExternalDataSourceSerializers"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogExternalDataSourceSerializers</returns>
        public async System.Threading.Tasks.Task<PostHogExternalDataSourceSerializers> ExternalDataSourcesPartialUpdateAsync(Guid id, string projectId, PostHogPatchedExternalDataSourceSerializers postHogPatchedExternalDataSourceSerializers = default(PostHogPatchedExternalDataSourceSerializers), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogExternalDataSourceSerializers> localVarResponse = await ExternalDataSourcesPartialUpdateWithHttpInfoAsync(id, projectId, postHogPatchedExternalDataSourceSerializers, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogPatchedExternalDataSourceSerializers"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogExternalDataSourceSerializers)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogExternalDataSourceSerializers>> ExternalDataSourcesPartialUpdateWithHttpInfoAsync(Guid id, string projectId, PostHogPatchedExternalDataSourceSerializers postHogPatchedExternalDataSourceSerializers = default(PostHogPatchedExternalDataSourceSerializers), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling ExternalDataSourcesApi->ExternalDataSourcesPartialUpdate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = postHogPatchedExternalDataSourceSerializers;

            localVarRequestOptions.Operation = "ExternalDataSourcesApi.ExternalDataSourcesPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<PostHogExternalDataSourceSerializers>("/api/projects/{project_id}/external_data_sources/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExternalDataSourcesPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogExternalDataSourceSerializers</returns>
        public PostHogExternalDataSourceSerializers ExternalDataSourcesReloadCreate(Guid id, string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogExternalDataSourceSerializers> localVarResponse = ExternalDataSourcesReloadCreateWithHttpInfo(id, projectId, postHogExternalDataSourceSerializers);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogExternalDataSourceSerializers</returns>
        public DotPostHog.Client.ApiResponse<PostHogExternalDataSourceSerializers> ExternalDataSourcesReloadCreateWithHttpInfo(Guid id, string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling ExternalDataSourcesApi->ExternalDataSourcesReloadCreate");
            }

            // verify the required parameter 'postHogExternalDataSourceSerializers' is set
            if (postHogExternalDataSourceSerializers == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogExternalDataSourceSerializers' when calling ExternalDataSourcesApi->ExternalDataSourcesReloadCreate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = postHogExternalDataSourceSerializers;

            localVarRequestOptions.Operation = "ExternalDataSourcesApi.ExternalDataSourcesReloadCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostHogExternalDataSourceSerializers>("/api/projects/{project_id}/external_data_sources/{id}/reload/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExternalDataSourcesReloadCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogExternalDataSourceSerializers</returns>
        public async System.Threading.Tasks.Task<PostHogExternalDataSourceSerializers> ExternalDataSourcesReloadCreateAsync(Guid id, string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogExternalDataSourceSerializers> localVarResponse = await ExternalDataSourcesReloadCreateWithHttpInfoAsync(id, projectId, postHogExternalDataSourceSerializers, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogExternalDataSourceSerializers)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogExternalDataSourceSerializers>> ExternalDataSourcesReloadCreateWithHttpInfoAsync(Guid id, string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling ExternalDataSourcesApi->ExternalDataSourcesReloadCreate");
            }

            // verify the required parameter 'postHogExternalDataSourceSerializers' is set
            if (postHogExternalDataSourceSerializers == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogExternalDataSourceSerializers' when calling ExternalDataSourcesApi->ExternalDataSourcesReloadCreate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = postHogExternalDataSourceSerializers;

            localVarRequestOptions.Operation = "ExternalDataSourcesApi.ExternalDataSourcesReloadCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostHogExternalDataSourceSerializers>("/api/projects/{project_id}/external_data_sources/{id}/reload/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExternalDataSourcesReloadCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogExternalDataSourceSerializers</returns>
        public PostHogExternalDataSourceSerializers ExternalDataSourcesRetrieve(Guid id, string projectId, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogExternalDataSourceSerializers> localVarResponse = ExternalDataSourcesRetrieveWithHttpInfo(id, projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogExternalDataSourceSerializers</returns>
        public DotPostHog.Client.ApiResponse<PostHogExternalDataSourceSerializers> ExternalDataSourcesRetrieveWithHttpInfo(Guid id, string projectId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling ExternalDataSourcesApi->ExternalDataSourcesRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ExternalDataSourcesApi.ExternalDataSourcesRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogExternalDataSourceSerializers>("/api/projects/{project_id}/external_data_sources/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExternalDataSourcesRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogExternalDataSourceSerializers</returns>
        public async System.Threading.Tasks.Task<PostHogExternalDataSourceSerializers> ExternalDataSourcesRetrieveAsync(Guid id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogExternalDataSourceSerializers> localVarResponse = await ExternalDataSourcesRetrieveWithHttpInfoAsync(id, projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogExternalDataSourceSerializers)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogExternalDataSourceSerializers>> ExternalDataSourcesRetrieveWithHttpInfoAsync(Guid id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling ExternalDataSourcesApi->ExternalDataSourcesRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ExternalDataSourcesApi.ExternalDataSourcesRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogExternalDataSourceSerializers>("/api/projects/{project_id}/external_data_sources/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExternalDataSourcesRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogExternalDataSourceSerializers</returns>
        public PostHogExternalDataSourceSerializers ExternalDataSourcesUpdate(Guid id, string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogExternalDataSourceSerializers> localVarResponse = ExternalDataSourcesUpdateWithHttpInfo(id, projectId, postHogExternalDataSourceSerializers);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogExternalDataSourceSerializers</returns>
        public DotPostHog.Client.ApiResponse<PostHogExternalDataSourceSerializers> ExternalDataSourcesUpdateWithHttpInfo(Guid id, string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling ExternalDataSourcesApi->ExternalDataSourcesUpdate");
            }

            // verify the required parameter 'postHogExternalDataSourceSerializers' is set
            if (postHogExternalDataSourceSerializers == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogExternalDataSourceSerializers' when calling ExternalDataSourcesApi->ExternalDataSourcesUpdate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = postHogExternalDataSourceSerializers;

            localVarRequestOptions.Operation = "ExternalDataSourcesApi.ExternalDataSourcesUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<PostHogExternalDataSourceSerializers>("/api/projects/{project_id}/external_data_sources/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExternalDataSourcesUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogExternalDataSourceSerializers</returns>
        public async System.Threading.Tasks.Task<PostHogExternalDataSourceSerializers> ExternalDataSourcesUpdateAsync(Guid id, string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogExternalDataSourceSerializers> localVarResponse = await ExternalDataSourcesUpdateWithHttpInfoAsync(id, projectId, postHogExternalDataSourceSerializers, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create, Read, Update and Delete External data Sources.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this external data source.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogExternalDataSourceSerializers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogExternalDataSourceSerializers)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogExternalDataSourceSerializers>> ExternalDataSourcesUpdateWithHttpInfoAsync(Guid id, string projectId, PostHogExternalDataSourceSerializers postHogExternalDataSourceSerializers, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling ExternalDataSourcesApi->ExternalDataSourcesUpdate");
            }

            // verify the required parameter 'postHogExternalDataSourceSerializers' is set
            if (postHogExternalDataSourceSerializers == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogExternalDataSourceSerializers' when calling ExternalDataSourcesApi->ExternalDataSourcesUpdate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = postHogExternalDataSourceSerializers;

            localVarRequestOptions.Operation = "ExternalDataSourcesApi.ExternalDataSourcesUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PostHogExternalDataSourceSerializers>("/api/projects/{project_id}/external_data_sources/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExternalDataSourcesUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
