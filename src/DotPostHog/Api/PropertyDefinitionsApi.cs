/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DotPostHog.Client;
using DotPostHog.Model;

namespace DotPostHog.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPropertyDefinitionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PropertyDefinitionsDestroy(string id, string projectId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PropertyDefinitionsDestroyWithHttpInfo(string id, string projectId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="eventNames">If sent, response value will have &#x60;is_seen_on_filtered_events&#x60; populated. JSON-encoded (optional)</param>
        /// <param name="excludedProperties">JSON-encoded list of excluded properties (optional)</param>
        /// <param name="filterByEventNames">Whether to return only properties for events in &#x60;event_names&#x60; (optional)</param>
        /// <param name="groupTypeIndex">What group type is the property for. Only should be set if &#x60;type&#x3D;group&#x60; (optional)</param>
        /// <param name="isFeatureFlag">Whether to return only (or excluding) feature flag properties (optional)</param>
        /// <param name="isNumerical">Whether to return only (or excluding) numerical property definitions (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="properties">Comma-separated list of properties to filter (optional)</param>
        /// <param name="search">Searches properties by name (optional)</param>
        /// <param name="type">What property definitions to return (optional, default to event)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedEnterprisePropertyDefinitionList</returns>
        PaginatedEnterprisePropertyDefinitionList PropertyDefinitionsList(string projectId, string eventNames = default(string), string excludedProperties = default(string), bool? filterByEventNames = default(bool?), int? groupTypeIndex = default(int?), bool? isFeatureFlag = default(bool?), bool? isNumerical = default(bool?), int? limit = default(int?), int? offset = default(int?), string properties = default(string), string search = default(string), string type = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="eventNames">If sent, response value will have &#x60;is_seen_on_filtered_events&#x60; populated. JSON-encoded (optional)</param>
        /// <param name="excludedProperties">JSON-encoded list of excluded properties (optional)</param>
        /// <param name="filterByEventNames">Whether to return only properties for events in &#x60;event_names&#x60; (optional)</param>
        /// <param name="groupTypeIndex">What group type is the property for. Only should be set if &#x60;type&#x3D;group&#x60; (optional)</param>
        /// <param name="isFeatureFlag">Whether to return only (or excluding) feature flag properties (optional)</param>
        /// <param name="isNumerical">Whether to return only (or excluding) numerical property definitions (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="properties">Comma-separated list of properties to filter (optional)</param>
        /// <param name="search">Searches properties by name (optional)</param>
        /// <param name="type">What property definitions to return (optional, default to event)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedEnterprisePropertyDefinitionList</returns>
        ApiResponse<PaginatedEnterprisePropertyDefinitionList> PropertyDefinitionsListWithHttpInfo(string projectId, string eventNames = default(string), string excludedProperties = default(string), bool? filterByEventNames = default(bool?), int? groupTypeIndex = default(int?), bool? isFeatureFlag = default(bool?), bool? isNumerical = default(bool?), int? limit = default(int?), int? offset = default(int?), string properties = default(string), string search = default(string), string type = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="patchedEnterprisePropertyDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnterprisePropertyDefinition</returns>
        EnterprisePropertyDefinition PropertyDefinitionsPartialUpdate(string id, string projectId, PatchedEnterprisePropertyDefinition patchedEnterprisePropertyDefinition = default(PatchedEnterprisePropertyDefinition), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="patchedEnterprisePropertyDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnterprisePropertyDefinition</returns>
        ApiResponse<EnterprisePropertyDefinition> PropertyDefinitionsPartialUpdateWithHttpInfo(string id, string projectId, PatchedEnterprisePropertyDefinition patchedEnterprisePropertyDefinition = default(PatchedEnterprisePropertyDefinition), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnterprisePropertyDefinition</returns>
        EnterprisePropertyDefinition PropertyDefinitionsRetrieve(string id, string projectId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnterprisePropertyDefinition</returns>
        ApiResponse<EnterprisePropertyDefinition> PropertyDefinitionsRetrieveWithHttpInfo(string id, string projectId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a caller to provide a list of event names and a single property name Returns a map of the event names to a boolean representing whether that property has ever been seen with that event_name
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnterprisePropertyDefinition</returns>
        EnterprisePropertyDefinition PropertyDefinitionsSeenTogetherRetrieve(string projectId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a caller to provide a list of event names and a single property name Returns a map of the event names to a boolean representing whether that property has ever been seen with that event_name
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnterprisePropertyDefinition</returns>
        ApiResponse<EnterprisePropertyDefinition> PropertyDefinitionsSeenTogetherRetrieveWithHttpInfo(string projectId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="enterprisePropertyDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnterprisePropertyDefinition</returns>
        EnterprisePropertyDefinition PropertyDefinitionsUpdate(string id, string projectId, EnterprisePropertyDefinition enterprisePropertyDefinition = default(EnterprisePropertyDefinition), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="enterprisePropertyDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnterprisePropertyDefinition</returns>
        ApiResponse<EnterprisePropertyDefinition> PropertyDefinitionsUpdateWithHttpInfo(string id, string projectId, EnterprisePropertyDefinition enterprisePropertyDefinition = default(EnterprisePropertyDefinition), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPropertyDefinitionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PropertyDefinitionsDestroyAsync(string id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PropertyDefinitionsDestroyWithHttpInfoAsync(string id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="eventNames">If sent, response value will have &#x60;is_seen_on_filtered_events&#x60; populated. JSON-encoded (optional)</param>
        /// <param name="excludedProperties">JSON-encoded list of excluded properties (optional)</param>
        /// <param name="filterByEventNames">Whether to return only properties for events in &#x60;event_names&#x60; (optional)</param>
        /// <param name="groupTypeIndex">What group type is the property for. Only should be set if &#x60;type&#x3D;group&#x60; (optional)</param>
        /// <param name="isFeatureFlag">Whether to return only (or excluding) feature flag properties (optional)</param>
        /// <param name="isNumerical">Whether to return only (or excluding) numerical property definitions (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="properties">Comma-separated list of properties to filter (optional)</param>
        /// <param name="search">Searches properties by name (optional)</param>
        /// <param name="type">What property definitions to return (optional, default to event)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedEnterprisePropertyDefinitionList</returns>
        System.Threading.Tasks.Task<PaginatedEnterprisePropertyDefinitionList> PropertyDefinitionsListAsync(string projectId, string eventNames = default(string), string excludedProperties = default(string), bool? filterByEventNames = default(bool?), int? groupTypeIndex = default(int?), bool? isFeatureFlag = default(bool?), bool? isNumerical = default(bool?), int? limit = default(int?), int? offset = default(int?), string properties = default(string), string search = default(string), string type = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="eventNames">If sent, response value will have &#x60;is_seen_on_filtered_events&#x60; populated. JSON-encoded (optional)</param>
        /// <param name="excludedProperties">JSON-encoded list of excluded properties (optional)</param>
        /// <param name="filterByEventNames">Whether to return only properties for events in &#x60;event_names&#x60; (optional)</param>
        /// <param name="groupTypeIndex">What group type is the property for. Only should be set if &#x60;type&#x3D;group&#x60; (optional)</param>
        /// <param name="isFeatureFlag">Whether to return only (or excluding) feature flag properties (optional)</param>
        /// <param name="isNumerical">Whether to return only (or excluding) numerical property definitions (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="properties">Comma-separated list of properties to filter (optional)</param>
        /// <param name="search">Searches properties by name (optional)</param>
        /// <param name="type">What property definitions to return (optional, default to event)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedEnterprisePropertyDefinitionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedEnterprisePropertyDefinitionList>> PropertyDefinitionsListWithHttpInfoAsync(string projectId, string eventNames = default(string), string excludedProperties = default(string), bool? filterByEventNames = default(bool?), int? groupTypeIndex = default(int?), bool? isFeatureFlag = default(bool?), bool? isNumerical = default(bool?), int? limit = default(int?), int? offset = default(int?), string properties = default(string), string search = default(string), string type = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="patchedEnterprisePropertyDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnterprisePropertyDefinition</returns>
        System.Threading.Tasks.Task<EnterprisePropertyDefinition> PropertyDefinitionsPartialUpdateAsync(string id, string projectId, PatchedEnterprisePropertyDefinition patchedEnterprisePropertyDefinition = default(PatchedEnterprisePropertyDefinition), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="patchedEnterprisePropertyDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnterprisePropertyDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnterprisePropertyDefinition>> PropertyDefinitionsPartialUpdateWithHttpInfoAsync(string id, string projectId, PatchedEnterprisePropertyDefinition patchedEnterprisePropertyDefinition = default(PatchedEnterprisePropertyDefinition), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnterprisePropertyDefinition</returns>
        System.Threading.Tasks.Task<EnterprisePropertyDefinition> PropertyDefinitionsRetrieveAsync(string id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnterprisePropertyDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnterprisePropertyDefinition>> PropertyDefinitionsRetrieveWithHttpInfoAsync(string id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a caller to provide a list of event names and a single property name Returns a map of the event names to a boolean representing whether that property has ever been seen with that event_name
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnterprisePropertyDefinition</returns>
        System.Threading.Tasks.Task<EnterprisePropertyDefinition> PropertyDefinitionsSeenTogetherRetrieveAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a caller to provide a list of event names and a single property name Returns a map of the event names to a boolean representing whether that property has ever been seen with that event_name
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnterprisePropertyDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnterprisePropertyDefinition>> PropertyDefinitionsSeenTogetherRetrieveWithHttpInfoAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="enterprisePropertyDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnterprisePropertyDefinition</returns>
        System.Threading.Tasks.Task<EnterprisePropertyDefinition> PropertyDefinitionsUpdateAsync(string id, string projectId, EnterprisePropertyDefinition enterprisePropertyDefinition = default(EnterprisePropertyDefinition), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="enterprisePropertyDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnterprisePropertyDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnterprisePropertyDefinition>> PropertyDefinitionsUpdateWithHttpInfoAsync(string id, string projectId, EnterprisePropertyDefinition enterprisePropertyDefinition = default(EnterprisePropertyDefinition), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPropertyDefinitionsApi : IPropertyDefinitionsApiSync, IPropertyDefinitionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PropertyDefinitionsApi : IPropertyDefinitionsApi
    {
        private DotPostHog.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyDefinitionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PropertyDefinitionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyDefinitionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PropertyDefinitionsApi(string basePath)
        {
            this.Configuration = DotPostHog.Client.Configuration.MergeConfigurations(
                DotPostHog.Client.GlobalConfiguration.Instance,
                new DotPostHog.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DotPostHog.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyDefinitionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PropertyDefinitionsApi(DotPostHog.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DotPostHog.Client.Configuration.MergeConfigurations(
                DotPostHog.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DotPostHog.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyDefinitionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PropertyDefinitionsApi(DotPostHog.Client.ISynchronousClient client, DotPostHog.Client.IAsynchronousClient asyncClient, DotPostHog.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DotPostHog.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DotPostHog.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DotPostHog.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DotPostHog.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DotPostHog.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PropertyDefinitionsDestroy(string id, string projectId, int operationIndex = 0)
        {
            PropertyDefinitionsDestroyWithHttpInfo(id, projectId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotPostHog.Client.ApiResponse<Object> PropertyDefinitionsDestroyWithHttpInfo(string id, string projectId, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'id' when calling PropertyDefinitionsApi->PropertyDefinitionsDestroy");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling PropertyDefinitionsApi->PropertyDefinitionsDestroy");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "PropertyDefinitionsApi.PropertyDefinitionsDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/projects/{project_id}/property_definitions/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PropertyDefinitionsDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PropertyDefinitionsDestroyAsync(string id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PropertyDefinitionsDestroyWithHttpInfoAsync(id, projectId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<Object>> PropertyDefinitionsDestroyWithHttpInfoAsync(string id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'id' when calling PropertyDefinitionsApi->PropertyDefinitionsDestroy");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling PropertyDefinitionsApi->PropertyDefinitionsDestroy");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "PropertyDefinitionsApi.PropertyDefinitionsDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/projects/{project_id}/property_definitions/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PropertyDefinitionsDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="eventNames">If sent, response value will have &#x60;is_seen_on_filtered_events&#x60; populated. JSON-encoded (optional)</param>
        /// <param name="excludedProperties">JSON-encoded list of excluded properties (optional)</param>
        /// <param name="filterByEventNames">Whether to return only properties for events in &#x60;event_names&#x60; (optional)</param>
        /// <param name="groupTypeIndex">What group type is the property for. Only should be set if &#x60;type&#x3D;group&#x60; (optional)</param>
        /// <param name="isFeatureFlag">Whether to return only (or excluding) feature flag properties (optional)</param>
        /// <param name="isNumerical">Whether to return only (or excluding) numerical property definitions (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="properties">Comma-separated list of properties to filter (optional)</param>
        /// <param name="search">Searches properties by name (optional)</param>
        /// <param name="type">What property definitions to return (optional, default to event)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedEnterprisePropertyDefinitionList</returns>
        public PaginatedEnterprisePropertyDefinitionList PropertyDefinitionsList(string projectId, string eventNames = default(string), string excludedProperties = default(string), bool? filterByEventNames = default(bool?), int? groupTypeIndex = default(int?), bool? isFeatureFlag = default(bool?), bool? isNumerical = default(bool?), int? limit = default(int?), int? offset = default(int?), string properties = default(string), string search = default(string), string type = default(string), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PaginatedEnterprisePropertyDefinitionList> localVarResponse = PropertyDefinitionsListWithHttpInfo(projectId, eventNames, excludedProperties, filterByEventNames, groupTypeIndex, isFeatureFlag, isNumerical, limit, offset, properties, search, type);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="eventNames">If sent, response value will have &#x60;is_seen_on_filtered_events&#x60; populated. JSON-encoded (optional)</param>
        /// <param name="excludedProperties">JSON-encoded list of excluded properties (optional)</param>
        /// <param name="filterByEventNames">Whether to return only properties for events in &#x60;event_names&#x60; (optional)</param>
        /// <param name="groupTypeIndex">What group type is the property for. Only should be set if &#x60;type&#x3D;group&#x60; (optional)</param>
        /// <param name="isFeatureFlag">Whether to return only (or excluding) feature flag properties (optional)</param>
        /// <param name="isNumerical">Whether to return only (or excluding) numerical property definitions (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="properties">Comma-separated list of properties to filter (optional)</param>
        /// <param name="search">Searches properties by name (optional)</param>
        /// <param name="type">What property definitions to return (optional, default to event)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedEnterprisePropertyDefinitionList</returns>
        public DotPostHog.Client.ApiResponse<PaginatedEnterprisePropertyDefinitionList> PropertyDefinitionsListWithHttpInfo(string projectId, string eventNames = default(string), string excludedProperties = default(string), bool? filterByEventNames = default(bool?), int? groupTypeIndex = default(int?), bool? isFeatureFlag = default(bool?), bool? isNumerical = default(bool?), int? limit = default(int?), int? offset = default(int?), string properties = default(string), string search = default(string), string type = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling PropertyDefinitionsApi->PropertyDefinitionsList");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (eventNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "event_names", eventNames));
            }
            if (excludedProperties != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "excluded_properties", excludedProperties));
            }
            if (filterByEventNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "filter_by_event_names", filterByEventNames));
            }
            if (groupTypeIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "group_type_index", groupTypeIndex));
            }
            if (isFeatureFlag != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "is_feature_flag", isFeatureFlag));
            }
            if (isNumerical != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "is_numerical", isNumerical));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "properties", properties));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            localVarRequestOptions.Operation = "PropertyDefinitionsApi.PropertyDefinitionsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PaginatedEnterprisePropertyDefinitionList>("/api/projects/{project_id}/property_definitions/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PropertyDefinitionsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="eventNames">If sent, response value will have &#x60;is_seen_on_filtered_events&#x60; populated. JSON-encoded (optional)</param>
        /// <param name="excludedProperties">JSON-encoded list of excluded properties (optional)</param>
        /// <param name="filterByEventNames">Whether to return only properties for events in &#x60;event_names&#x60; (optional)</param>
        /// <param name="groupTypeIndex">What group type is the property for. Only should be set if &#x60;type&#x3D;group&#x60; (optional)</param>
        /// <param name="isFeatureFlag">Whether to return only (or excluding) feature flag properties (optional)</param>
        /// <param name="isNumerical">Whether to return only (or excluding) numerical property definitions (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="properties">Comma-separated list of properties to filter (optional)</param>
        /// <param name="search">Searches properties by name (optional)</param>
        /// <param name="type">What property definitions to return (optional, default to event)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedEnterprisePropertyDefinitionList</returns>
        public async System.Threading.Tasks.Task<PaginatedEnterprisePropertyDefinitionList> PropertyDefinitionsListAsync(string projectId, string eventNames = default(string), string excludedProperties = default(string), bool? filterByEventNames = default(bool?), int? groupTypeIndex = default(int?), bool? isFeatureFlag = default(bool?), bool? isNumerical = default(bool?), int? limit = default(int?), int? offset = default(int?), string properties = default(string), string search = default(string), string type = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PaginatedEnterprisePropertyDefinitionList> localVarResponse = await PropertyDefinitionsListWithHttpInfoAsync(projectId, eventNames, excludedProperties, filterByEventNames, groupTypeIndex, isFeatureFlag, isNumerical, limit, offset, properties, search, type, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="eventNames">If sent, response value will have &#x60;is_seen_on_filtered_events&#x60; populated. JSON-encoded (optional)</param>
        /// <param name="excludedProperties">JSON-encoded list of excluded properties (optional)</param>
        /// <param name="filterByEventNames">Whether to return only properties for events in &#x60;event_names&#x60; (optional)</param>
        /// <param name="groupTypeIndex">What group type is the property for. Only should be set if &#x60;type&#x3D;group&#x60; (optional)</param>
        /// <param name="isFeatureFlag">Whether to return only (or excluding) feature flag properties (optional)</param>
        /// <param name="isNumerical">Whether to return only (or excluding) numerical property definitions (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="properties">Comma-separated list of properties to filter (optional)</param>
        /// <param name="search">Searches properties by name (optional)</param>
        /// <param name="type">What property definitions to return (optional, default to event)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedEnterprisePropertyDefinitionList)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PaginatedEnterprisePropertyDefinitionList>> PropertyDefinitionsListWithHttpInfoAsync(string projectId, string eventNames = default(string), string excludedProperties = default(string), bool? filterByEventNames = default(bool?), int? groupTypeIndex = default(int?), bool? isFeatureFlag = default(bool?), bool? isNumerical = default(bool?), int? limit = default(int?), int? offset = default(int?), string properties = default(string), string search = default(string), string type = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling PropertyDefinitionsApi->PropertyDefinitionsList");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (eventNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "event_names", eventNames));
            }
            if (excludedProperties != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "excluded_properties", excludedProperties));
            }
            if (filterByEventNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "filter_by_event_names", filterByEventNames));
            }
            if (groupTypeIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "group_type_index", groupTypeIndex));
            }
            if (isFeatureFlag != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "is_feature_flag", isFeatureFlag));
            }
            if (isNumerical != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "is_numerical", isNumerical));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "properties", properties));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            localVarRequestOptions.Operation = "PropertyDefinitionsApi.PropertyDefinitionsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedEnterprisePropertyDefinitionList>("/api/projects/{project_id}/property_definitions/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PropertyDefinitionsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="patchedEnterprisePropertyDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnterprisePropertyDefinition</returns>
        public EnterprisePropertyDefinition PropertyDefinitionsPartialUpdate(string id, string projectId, PatchedEnterprisePropertyDefinition patchedEnterprisePropertyDefinition = default(PatchedEnterprisePropertyDefinition), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<EnterprisePropertyDefinition> localVarResponse = PropertyDefinitionsPartialUpdateWithHttpInfo(id, projectId, patchedEnterprisePropertyDefinition);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="patchedEnterprisePropertyDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnterprisePropertyDefinition</returns>
        public DotPostHog.Client.ApiResponse<EnterprisePropertyDefinition> PropertyDefinitionsPartialUpdateWithHttpInfo(string id, string projectId, PatchedEnterprisePropertyDefinition patchedEnterprisePropertyDefinition = default(PatchedEnterprisePropertyDefinition), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'id' when calling PropertyDefinitionsApi->PropertyDefinitionsPartialUpdate");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling PropertyDefinitionsApi->PropertyDefinitionsPartialUpdate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = patchedEnterprisePropertyDefinition;

            localVarRequestOptions.Operation = "PropertyDefinitionsApi.PropertyDefinitionsPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<EnterprisePropertyDefinition>("/api/projects/{project_id}/property_definitions/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PropertyDefinitionsPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="patchedEnterprisePropertyDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnterprisePropertyDefinition</returns>
        public async System.Threading.Tasks.Task<EnterprisePropertyDefinition> PropertyDefinitionsPartialUpdateAsync(string id, string projectId, PatchedEnterprisePropertyDefinition patchedEnterprisePropertyDefinition = default(PatchedEnterprisePropertyDefinition), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<EnterprisePropertyDefinition> localVarResponse = await PropertyDefinitionsPartialUpdateWithHttpInfoAsync(id, projectId, patchedEnterprisePropertyDefinition, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="patchedEnterprisePropertyDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnterprisePropertyDefinition)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<EnterprisePropertyDefinition>> PropertyDefinitionsPartialUpdateWithHttpInfoAsync(string id, string projectId, PatchedEnterprisePropertyDefinition patchedEnterprisePropertyDefinition = default(PatchedEnterprisePropertyDefinition), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'id' when calling PropertyDefinitionsApi->PropertyDefinitionsPartialUpdate");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling PropertyDefinitionsApi->PropertyDefinitionsPartialUpdate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = patchedEnterprisePropertyDefinition;

            localVarRequestOptions.Operation = "PropertyDefinitionsApi.PropertyDefinitionsPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<EnterprisePropertyDefinition>("/api/projects/{project_id}/property_definitions/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PropertyDefinitionsPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnterprisePropertyDefinition</returns>
        public EnterprisePropertyDefinition PropertyDefinitionsRetrieve(string id, string projectId, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<EnterprisePropertyDefinition> localVarResponse = PropertyDefinitionsRetrieveWithHttpInfo(id, projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnterprisePropertyDefinition</returns>
        public DotPostHog.Client.ApiResponse<EnterprisePropertyDefinition> PropertyDefinitionsRetrieveWithHttpInfo(string id, string projectId, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'id' when calling PropertyDefinitionsApi->PropertyDefinitionsRetrieve");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling PropertyDefinitionsApi->PropertyDefinitionsRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "PropertyDefinitionsApi.PropertyDefinitionsRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<EnterprisePropertyDefinition>("/api/projects/{project_id}/property_definitions/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PropertyDefinitionsRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnterprisePropertyDefinition</returns>
        public async System.Threading.Tasks.Task<EnterprisePropertyDefinition> PropertyDefinitionsRetrieveAsync(string id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<EnterprisePropertyDefinition> localVarResponse = await PropertyDefinitionsRetrieveWithHttpInfoAsync(id, projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnterprisePropertyDefinition)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<EnterprisePropertyDefinition>> PropertyDefinitionsRetrieveWithHttpInfoAsync(string id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'id' when calling PropertyDefinitionsApi->PropertyDefinitionsRetrieve");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling PropertyDefinitionsApi->PropertyDefinitionsRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "PropertyDefinitionsApi.PropertyDefinitionsRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EnterprisePropertyDefinition>("/api/projects/{project_id}/property_definitions/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PropertyDefinitionsRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Allows a caller to provide a list of event names and a single property name Returns a map of the event names to a boolean representing whether that property has ever been seen with that event_name
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnterprisePropertyDefinition</returns>
        public EnterprisePropertyDefinition PropertyDefinitionsSeenTogetherRetrieve(string projectId, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<EnterprisePropertyDefinition> localVarResponse = PropertyDefinitionsSeenTogetherRetrieveWithHttpInfo(projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Allows a caller to provide a list of event names and a single property name Returns a map of the event names to a boolean representing whether that property has ever been seen with that event_name
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnterprisePropertyDefinition</returns>
        public DotPostHog.Client.ApiResponse<EnterprisePropertyDefinition> PropertyDefinitionsSeenTogetherRetrieveWithHttpInfo(string projectId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling PropertyDefinitionsApi->PropertyDefinitionsSeenTogetherRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "PropertyDefinitionsApi.PropertyDefinitionsSeenTogetherRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<EnterprisePropertyDefinition>("/api/projects/{project_id}/property_definitions/seen_together/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PropertyDefinitionsSeenTogetherRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Allows a caller to provide a list of event names and a single property name Returns a map of the event names to a boolean representing whether that property has ever been seen with that event_name
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnterprisePropertyDefinition</returns>
        public async System.Threading.Tasks.Task<EnterprisePropertyDefinition> PropertyDefinitionsSeenTogetherRetrieveAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<EnterprisePropertyDefinition> localVarResponse = await PropertyDefinitionsSeenTogetherRetrieveWithHttpInfoAsync(projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Allows a caller to provide a list of event names and a single property name Returns a map of the event names to a boolean representing whether that property has ever been seen with that event_name
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnterprisePropertyDefinition)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<EnterprisePropertyDefinition>> PropertyDefinitionsSeenTogetherRetrieveWithHttpInfoAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling PropertyDefinitionsApi->PropertyDefinitionsSeenTogetherRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "PropertyDefinitionsApi.PropertyDefinitionsSeenTogetherRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EnterprisePropertyDefinition>("/api/projects/{project_id}/property_definitions/seen_together/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PropertyDefinitionsSeenTogetherRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="enterprisePropertyDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnterprisePropertyDefinition</returns>
        public EnterprisePropertyDefinition PropertyDefinitionsUpdate(string id, string projectId, EnterprisePropertyDefinition enterprisePropertyDefinition = default(EnterprisePropertyDefinition), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<EnterprisePropertyDefinition> localVarResponse = PropertyDefinitionsUpdateWithHttpInfo(id, projectId, enterprisePropertyDefinition);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="enterprisePropertyDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnterprisePropertyDefinition</returns>
        public DotPostHog.Client.ApiResponse<EnterprisePropertyDefinition> PropertyDefinitionsUpdateWithHttpInfo(string id, string projectId, EnterprisePropertyDefinition enterprisePropertyDefinition = default(EnterprisePropertyDefinition), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'id' when calling PropertyDefinitionsApi->PropertyDefinitionsUpdate");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling PropertyDefinitionsApi->PropertyDefinitionsUpdate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = enterprisePropertyDefinition;

            localVarRequestOptions.Operation = "PropertyDefinitionsApi.PropertyDefinitionsUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<EnterprisePropertyDefinition>("/api/projects/{project_id}/property_definitions/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PropertyDefinitionsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="enterprisePropertyDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnterprisePropertyDefinition</returns>
        public async System.Threading.Tasks.Task<EnterprisePropertyDefinition> PropertyDefinitionsUpdateAsync(string id, string projectId, EnterprisePropertyDefinition enterprisePropertyDefinition = default(EnterprisePropertyDefinition), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<EnterprisePropertyDefinition> localVarResponse = await PropertyDefinitionsUpdateWithHttpInfoAsync(id, projectId, enterprisePropertyDefinition, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="enterprisePropertyDefinition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnterprisePropertyDefinition)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<EnterprisePropertyDefinition>> PropertyDefinitionsUpdateWithHttpInfoAsync(string id, string projectId, EnterprisePropertyDefinition enterprisePropertyDefinition = default(EnterprisePropertyDefinition), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'id' when calling PropertyDefinitionsApi->PropertyDefinitionsUpdate");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling PropertyDefinitionsApi->PropertyDefinitionsUpdate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = enterprisePropertyDefinition;

            localVarRequestOptions.Operation = "PropertyDefinitionsApi.PropertyDefinitionsUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EnterprisePropertyDefinition>("/api/projects/{project_id}/property_definitions/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PropertyDefinitionsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
