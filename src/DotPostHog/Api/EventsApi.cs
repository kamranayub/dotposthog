/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DotPostHog.Client;
using DotPostHog.Model;

namespace DotPostHog.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="after">Only return events with a timestamp after this time. (optional)</param>
        /// <param name="before">Only return events with a timestamp before this time. (optional)</param>
        /// <param name="distinctId">Filter list by distinct id. (optional)</param>
        /// <param name="varEvent">Filter list by event. For example &#x60;user sign up&#x60; or &#x60;$pageview&#x60;. (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="limit">The maximum number of results to return (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="personId">Filter list by person id. (optional)</param>
        /// <param name="properties">Filter events by event property, person property, cohort, groups and more. (optional)</param>
        /// <param name="select">(Experimental) JSON-serialized array of HogQL expressions to return (optional)</param>
        /// <param name="where">(Experimental) JSON-serialized array of HogQL expressions that must pass (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedClickhouseEventList</returns>
        PostHogPaginatedClickhouseEventList EventsList(string projectId, DateTime? after = default(DateTime?), DateTime? before = default(DateTime?), int? distinctId = default(int?), string varEvent = default(string), string format = default(string), int? limit = default(int?), int? offset = default(int?), int? personId = default(int?), List<PostHogProperty> properties = default(List<PostHogProperty>), List<string> select = default(List<string>), List<string> where = default(List<string>), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="after">Only return events with a timestamp after this time. (optional)</param>
        /// <param name="before">Only return events with a timestamp before this time. (optional)</param>
        /// <param name="distinctId">Filter list by distinct id. (optional)</param>
        /// <param name="varEvent">Filter list by event. For example &#x60;user sign up&#x60; or &#x60;$pageview&#x60;. (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="limit">The maximum number of results to return (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="personId">Filter list by person id. (optional)</param>
        /// <param name="properties">Filter events by event property, person property, cohort, groups and more. (optional)</param>
        /// <param name="select">(Experimental) JSON-serialized array of HogQL expressions to return (optional)</param>
        /// <param name="where">(Experimental) JSON-serialized array of HogQL expressions that must pass (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedClickhouseEventList</returns>
        ApiResponse<PostHogPaginatedClickhouseEventList> EventsListWithHttpInfo(string projectId, DateTime? after = default(DateTime?), DateTime? before = default(DateTime?), int? distinctId = default(int?), string varEvent = default(string), string format = default(string), int? limit = default(int?), int? offset = default(int?), int? personId = default(int?), List<PostHogProperty> properties = default(List<PostHogProperty>), List<string> select = default(List<string>), List<string> where = default(List<string>), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogClickhouseEvent</returns>
        PostHogClickhouseEvent EventsRetrieve(string id, string projectId, string format = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogClickhouseEvent</returns>
        ApiResponse<PostHogClickhouseEvent> EventsRetrieveWithHttpInfo(string id, string projectId, string format = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogClickhouseEvent</returns>
        PostHogClickhouseEvent EventsValuesRetrieve(string projectId, string format = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogClickhouseEvent</returns>
        ApiResponse<PostHogClickhouseEvent> EventsValuesRetrieveWithHttpInfo(string projectId, string format = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="after">Only return events with a timestamp after this time. (optional)</param>
        /// <param name="before">Only return events with a timestamp before this time. (optional)</param>
        /// <param name="distinctId">Filter list by distinct id. (optional)</param>
        /// <param name="varEvent">Filter list by event. For example &#x60;user sign up&#x60; or &#x60;$pageview&#x60;. (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="limit">The maximum number of results to return (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="personId">Filter list by person id. (optional)</param>
        /// <param name="properties">Filter events by event property, person property, cohort, groups and more. (optional)</param>
        /// <param name="select">(Experimental) JSON-serialized array of HogQL expressions to return (optional)</param>
        /// <param name="where">(Experimental) JSON-serialized array of HogQL expressions that must pass (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedClickhouseEventList</returns>
        System.Threading.Tasks.Task<PostHogPaginatedClickhouseEventList> EventsListAsync(string projectId, DateTime? after = default(DateTime?), DateTime? before = default(DateTime?), int? distinctId = default(int?), string varEvent = default(string), string format = default(string), int? limit = default(int?), int? offset = default(int?), int? personId = default(int?), List<PostHogProperty> properties = default(List<PostHogProperty>), List<string> select = default(List<string>), List<string> where = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="after">Only return events with a timestamp after this time. (optional)</param>
        /// <param name="before">Only return events with a timestamp before this time. (optional)</param>
        /// <param name="distinctId">Filter list by distinct id. (optional)</param>
        /// <param name="varEvent">Filter list by event. For example &#x60;user sign up&#x60; or &#x60;$pageview&#x60;. (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="limit">The maximum number of results to return (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="personId">Filter list by person id. (optional)</param>
        /// <param name="properties">Filter events by event property, person property, cohort, groups and more. (optional)</param>
        /// <param name="select">(Experimental) JSON-serialized array of HogQL expressions to return (optional)</param>
        /// <param name="where">(Experimental) JSON-serialized array of HogQL expressions that must pass (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedClickhouseEventList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPaginatedClickhouseEventList>> EventsListWithHttpInfoAsync(string projectId, DateTime? after = default(DateTime?), DateTime? before = default(DateTime?), int? distinctId = default(int?), string varEvent = default(string), string format = default(string), int? limit = default(int?), int? offset = default(int?), int? personId = default(int?), List<PostHogProperty> properties = default(List<PostHogProperty>), List<string> select = default(List<string>), List<string> where = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogClickhouseEvent</returns>
        System.Threading.Tasks.Task<PostHogClickhouseEvent> EventsRetrieveAsync(string id, string projectId, string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogClickhouseEvent)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogClickhouseEvent>> EventsRetrieveWithHttpInfoAsync(string id, string projectId, string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogClickhouseEvent</returns>
        System.Threading.Tasks.Task<PostHogClickhouseEvent> EventsValuesRetrieveAsync(string projectId, string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogClickhouseEvent)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogClickhouseEvent>> EventsValuesRetrieveWithHttpInfoAsync(string projectId, string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApi : IEventsApiSync, IEventsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventsApi : IEventsApi
    {
        private DotPostHog.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi(string basePath)
        {
            this.Configuration = DotPostHog.Client.Configuration.MergeConfigurations(
                DotPostHog.Client.GlobalConfiguration.Instance,
                new DotPostHog.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DotPostHog.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventsApi(DotPostHog.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DotPostHog.Client.Configuration.MergeConfigurations(
                DotPostHog.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DotPostHog.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EventsApi(DotPostHog.Client.ISynchronousClient client, DotPostHog.Client.IAsynchronousClient asyncClient, DotPostHog.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DotPostHog.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DotPostHog.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DotPostHog.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DotPostHog.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DotPostHog.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="after">Only return events with a timestamp after this time. (optional)</param>
        /// <param name="before">Only return events with a timestamp before this time. (optional)</param>
        /// <param name="distinctId">Filter list by distinct id. (optional)</param>
        /// <param name="varEvent">Filter list by event. For example &#x60;user sign up&#x60; or &#x60;$pageview&#x60;. (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="limit">The maximum number of results to return (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="personId">Filter list by person id. (optional)</param>
        /// <param name="properties">Filter events by event property, person property, cohort, groups and more. (optional)</param>
        /// <param name="select">(Experimental) JSON-serialized array of HogQL expressions to return (optional)</param>
        /// <param name="where">(Experimental) JSON-serialized array of HogQL expressions that must pass (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedClickhouseEventList</returns>
        public PostHogPaginatedClickhouseEventList EventsList(string projectId, DateTime? after = default(DateTime?), DateTime? before = default(DateTime?), int? distinctId = default(int?), string varEvent = default(string), string format = default(string), int? limit = default(int?), int? offset = default(int?), int? personId = default(int?), List<PostHogProperty> properties = default(List<PostHogProperty>), List<string> select = default(List<string>), List<string> where = default(List<string>), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedClickhouseEventList> localVarResponse = EventsListWithHttpInfo(projectId, after, before, distinctId, varEvent, format, limit, offset, personId, properties, select, where);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="after">Only return events with a timestamp after this time. (optional)</param>
        /// <param name="before">Only return events with a timestamp before this time. (optional)</param>
        /// <param name="distinctId">Filter list by distinct id. (optional)</param>
        /// <param name="varEvent">Filter list by event. For example &#x60;user sign up&#x60; or &#x60;$pageview&#x60;. (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="limit">The maximum number of results to return (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="personId">Filter list by person id. (optional)</param>
        /// <param name="properties">Filter events by event property, person property, cohort, groups and more. (optional)</param>
        /// <param name="select">(Experimental) JSON-serialized array of HogQL expressions to return (optional)</param>
        /// <param name="where">(Experimental) JSON-serialized array of HogQL expressions that must pass (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedClickhouseEventList</returns>
        public DotPostHog.Client.ApiResponse<PostHogPaginatedClickhouseEventList> EventsListWithHttpInfo(string projectId, DateTime? after = default(DateTime?), DateTime? before = default(DateTime?), int? distinctId = default(int?), string varEvent = default(string), string format = default(string), int? limit = default(int?), int? offset = default(int?), int? personId = default(int?), List<PostHogProperty> properties = default(List<PostHogProperty>), List<string> select = default(List<string>), List<string> where = default(List<string>), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling EventsApi->EventsList");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (distinctId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "distinct_id", distinctId));
            }
            if (varEvent != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "event", varEvent));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (personId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "person_id", personId));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("multi", "select", select));
            }
            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("multi", "where", where));
            }

            localVarRequestOptions.Operation = "EventsApi.EventsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPaginatedClickhouseEventList>("/api/projects/{project_id}/events/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="after">Only return events with a timestamp after this time. (optional)</param>
        /// <param name="before">Only return events with a timestamp before this time. (optional)</param>
        /// <param name="distinctId">Filter list by distinct id. (optional)</param>
        /// <param name="varEvent">Filter list by event. For example &#x60;user sign up&#x60; or &#x60;$pageview&#x60;. (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="limit">The maximum number of results to return (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="personId">Filter list by person id. (optional)</param>
        /// <param name="properties">Filter events by event property, person property, cohort, groups and more. (optional)</param>
        /// <param name="select">(Experimental) JSON-serialized array of HogQL expressions to return (optional)</param>
        /// <param name="where">(Experimental) JSON-serialized array of HogQL expressions that must pass (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedClickhouseEventList</returns>
        public async System.Threading.Tasks.Task<PostHogPaginatedClickhouseEventList> EventsListAsync(string projectId, DateTime? after = default(DateTime?), DateTime? before = default(DateTime?), int? distinctId = default(int?), string varEvent = default(string), string format = default(string), int? limit = default(int?), int? offset = default(int?), int? personId = default(int?), List<PostHogProperty> properties = default(List<PostHogProperty>), List<string> select = default(List<string>), List<string> where = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedClickhouseEventList> localVarResponse = await EventsListWithHttpInfoAsync(projectId, after, before, distinctId, varEvent, format, limit, offset, personId, properties, select, where, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="after">Only return events with a timestamp after this time. (optional)</param>
        /// <param name="before">Only return events with a timestamp before this time. (optional)</param>
        /// <param name="distinctId">Filter list by distinct id. (optional)</param>
        /// <param name="varEvent">Filter list by event. For example &#x60;user sign up&#x60; or &#x60;$pageview&#x60;. (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="limit">The maximum number of results to return (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="personId">Filter list by person id. (optional)</param>
        /// <param name="properties">Filter events by event property, person property, cohort, groups and more. (optional)</param>
        /// <param name="select">(Experimental) JSON-serialized array of HogQL expressions to return (optional)</param>
        /// <param name="where">(Experimental) JSON-serialized array of HogQL expressions that must pass (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedClickhouseEventList)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPaginatedClickhouseEventList>> EventsListWithHttpInfoAsync(string projectId, DateTime? after = default(DateTime?), DateTime? before = default(DateTime?), int? distinctId = default(int?), string varEvent = default(string), string format = default(string), int? limit = default(int?), int? offset = default(int?), int? personId = default(int?), List<PostHogProperty> properties = default(List<PostHogProperty>), List<string> select = default(List<string>), List<string> where = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling EventsApi->EventsList");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (distinctId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "distinct_id", distinctId));
            }
            if (varEvent != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "event", varEvent));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (personId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "person_id", personId));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (select != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("multi", "select", select));
            }
            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("multi", "where", where));
            }

            localVarRequestOptions.Operation = "EventsApi.EventsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPaginatedClickhouseEventList>("/api/projects/{project_id}/events/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogClickhouseEvent</returns>
        public PostHogClickhouseEvent EventsRetrieve(string id, string projectId, string format = default(string), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogClickhouseEvent> localVarResponse = EventsRetrieveWithHttpInfo(id, projectId, format);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogClickhouseEvent</returns>
        public DotPostHog.Client.ApiResponse<PostHogClickhouseEvent> EventsRetrieveWithHttpInfo(string id, string projectId, string format = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'id' when calling EventsApi->EventsRetrieve");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling EventsApi->EventsRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "EventsApi.EventsRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogClickhouseEvent>("/api/projects/{project_id}/events/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventsRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogClickhouseEvent</returns>
        public async System.Threading.Tasks.Task<PostHogClickhouseEvent> EventsRetrieveAsync(string id, string projectId, string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogClickhouseEvent> localVarResponse = await EventsRetrieveWithHttpInfoAsync(id, projectId, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogClickhouseEvent)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogClickhouseEvent>> EventsRetrieveWithHttpInfoAsync(string id, string projectId, string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'id' when calling EventsApi->EventsRetrieve");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling EventsApi->EventsRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "EventsApi.EventsRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogClickhouseEvent>("/api/projects/{project_id}/events/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventsRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogClickhouseEvent</returns>
        public PostHogClickhouseEvent EventsValuesRetrieve(string projectId, string format = default(string), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogClickhouseEvent> localVarResponse = EventsValuesRetrieveWithHttpInfo(projectId, format);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogClickhouseEvent</returns>
        public DotPostHog.Client.ApiResponse<PostHogClickhouseEvent> EventsValuesRetrieveWithHttpInfo(string projectId, string format = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling EventsApi->EventsValuesRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "EventsApi.EventsValuesRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogClickhouseEvent>("/api/projects/{project_id}/events/values/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventsValuesRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogClickhouseEvent</returns>
        public async System.Threading.Tasks.Task<PostHogClickhouseEvent> EventsValuesRetrieveAsync(string projectId, string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogClickhouseEvent> localVarResponse = await EventsValuesRetrieveWithHttpInfoAsync(projectId, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogClickhouseEvent)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogClickhouseEvent>> EventsValuesRetrieveWithHttpInfoAsync(string projectId, string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling EventsApi->EventsValuesRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "EventsApi.EventsValuesRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogClickhouseEvent>("/api/projects/{project_id}/events/values/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventsValuesRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
