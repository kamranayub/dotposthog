/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DotPostHog.Client;
using DotPostHog.Model;

namespace DotPostHog.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Sending multiple events
        /// </summary>
        /// <remarks>
        /// You can send multiple events in one go with the Batch API.  There is no limit on the number of events you can send in a batch, but the entire request body must be less than 20MB by default (see API overview).  &gt; Note: Timestamp is optional. If not set, it&#39;ll automatically be set to the current time. 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ip"> (optional)</param>
        /// <param name="compression">The compression method used to compress the request body.  (optional)</param>
        /// <param name="postHogEventsCaptureRequest">Provides a method to capture events. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogEventsCaptureResponse</returns>
        PostHogEventsCaptureResponse BatchPost(string ip = default(string), string compression = default(string), PostHogEventsCaptureRequest postHogEventsCaptureRequest = default(PostHogEventsCaptureRequest), int operationIndex = 0);

        /// <summary>
        /// Sending multiple events
        /// </summary>
        /// <remarks>
        /// You can send multiple events in one go with the Batch API.  There is no limit on the number of events you can send in a batch, but the entire request body must be less than 20MB by default (see API overview).  &gt; Note: Timestamp is optional. If not set, it&#39;ll automatically be set to the current time. 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ip"> (optional)</param>
        /// <param name="compression">The compression method used to compress the request body.  (optional)</param>
        /// <param name="postHogEventsCaptureRequest">Provides a method to capture events. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogEventsCaptureResponse</returns>
        ApiResponse<PostHogEventsCaptureResponse> BatchPostWithHttpInfo(string ip = default(string), string compression = default(string), PostHogEventsCaptureRequest postHogEventsCaptureRequest = default(PostHogEventsCaptureRequest), int operationIndex = 0);
        /// <summary>
        /// Sending an event
        /// </summary>
        /// <remarks>
        /// &gt; Note: Timestamp is optional. If not set, it&#39;ll automatically be set to the current time.  Capture an event. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog. 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ip"> (optional)</param>
        /// <param name="compression">The compression method used to compress the request body.  (optional)</param>
        /// <param name="body">Provides a method to capture events. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogEventsCaptureResponse</returns>
        PostHogEventsCaptureResponse CapturePost(string ip = default(string), string compression = default(string), PostHogEvent body = default(PostHogEvent), int operationIndex = 0);

        /// <summary>
        /// Sending an event
        /// </summary>
        /// <remarks>
        /// &gt; Note: Timestamp is optional. If not set, it&#39;ll automatically be set to the current time.  Capture an event. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog. 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ip"> (optional)</param>
        /// <param name="compression">The compression method used to compress the request body.  (optional)</param>
        /// <param name="body">Provides a method to capture events. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogEventsCaptureResponse</returns>
        ApiResponse<PostHogEventsCaptureResponse> CapturePostWithHttpInfo(string ip = default(string), string compression = default(string), PostHogEvent body = default(PostHogEvent), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Sending multiple events
        /// </summary>
        /// <remarks>
        /// You can send multiple events in one go with the Batch API.  There is no limit on the number of events you can send in a batch, but the entire request body must be less than 20MB by default (see API overview).  &gt; Note: Timestamp is optional. If not set, it&#39;ll automatically be set to the current time. 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ip"> (optional)</param>
        /// <param name="compression">The compression method used to compress the request body.  (optional)</param>
        /// <param name="postHogEventsCaptureRequest">Provides a method to capture events. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogEventsCaptureResponse</returns>
        System.Threading.Tasks.Task<PostHogEventsCaptureResponse> BatchPostAsync(string ip = default(string), string compression = default(string), PostHogEventsCaptureRequest postHogEventsCaptureRequest = default(PostHogEventsCaptureRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sending multiple events
        /// </summary>
        /// <remarks>
        /// You can send multiple events in one go with the Batch API.  There is no limit on the number of events you can send in a batch, but the entire request body must be less than 20MB by default (see API overview).  &gt; Note: Timestamp is optional. If not set, it&#39;ll automatically be set to the current time. 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ip"> (optional)</param>
        /// <param name="compression">The compression method used to compress the request body.  (optional)</param>
        /// <param name="postHogEventsCaptureRequest">Provides a method to capture events. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogEventsCaptureResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogEventsCaptureResponse>> BatchPostWithHttpInfoAsync(string ip = default(string), string compression = default(string), PostHogEventsCaptureRequest postHogEventsCaptureRequest = default(PostHogEventsCaptureRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sending an event
        /// </summary>
        /// <remarks>
        /// &gt; Note: Timestamp is optional. If not set, it&#39;ll automatically be set to the current time.  Capture an event. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog. 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ip"> (optional)</param>
        /// <param name="compression">The compression method used to compress the request body.  (optional)</param>
        /// <param name="body">Provides a method to capture events. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogEventsCaptureResponse</returns>
        System.Threading.Tasks.Task<PostHogEventsCaptureResponse> CapturePostAsync(string ip = default(string), string compression = default(string), PostHogEvent body = default(PostHogEvent), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sending an event
        /// </summary>
        /// <remarks>
        /// &gt; Note: Timestamp is optional. If not set, it&#39;ll automatically be set to the current time.  Capture an event. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog. 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ip"> (optional)</param>
        /// <param name="compression">The compression method used to compress the request body.  (optional)</param>
        /// <param name="body">Provides a method to capture events. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogEventsCaptureResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogEventsCaptureResponse>> CapturePostWithHttpInfoAsync(string ip = default(string), string compression = default(string), PostHogEvent body = default(PostHogEvent), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private DotPostHog.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = DotPostHog.Client.Configuration.MergeConfigurations(
                DotPostHog.Client.GlobalConfiguration.Instance,
                new DotPostHog.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DotPostHog.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(DotPostHog.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DotPostHog.Client.Configuration.MergeConfigurations(
                DotPostHog.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DotPostHog.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(DotPostHog.Client.ISynchronousClient client, DotPostHog.Client.IAsynchronousClient asyncClient, DotPostHog.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DotPostHog.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DotPostHog.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DotPostHog.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DotPostHog.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DotPostHog.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Sending multiple events You can send multiple events in one go with the Batch API.  There is no limit on the number of events you can send in a batch, but the entire request body must be less than 20MB by default (see API overview).  &gt; Note: Timestamp is optional. If not set, it&#39;ll automatically be set to the current time. 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ip"> (optional)</param>
        /// <param name="compression">The compression method used to compress the request body.  (optional)</param>
        /// <param name="postHogEventsCaptureRequest">Provides a method to capture events. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogEventsCaptureResponse</returns>
        public PostHogEventsCaptureResponse BatchPost(string ip = default(string), string compression = default(string), PostHogEventsCaptureRequest postHogEventsCaptureRequest = default(PostHogEventsCaptureRequest), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogEventsCaptureResponse> localVarResponse = BatchPostWithHttpInfo(ip, compression, postHogEventsCaptureRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sending multiple events You can send multiple events in one go with the Batch API.  There is no limit on the number of events you can send in a batch, but the entire request body must be less than 20MB by default (see API overview).  &gt; Note: Timestamp is optional. If not set, it&#39;ll automatically be set to the current time. 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ip"> (optional)</param>
        /// <param name="compression">The compression method used to compress the request body.  (optional)</param>
        /// <param name="postHogEventsCaptureRequest">Provides a method to capture events. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogEventsCaptureResponse</returns>
        public DotPostHog.Client.ApiResponse<PostHogEventsCaptureResponse> BatchPostWithHttpInfo(string ip = default(string), string compression = default(string), PostHogEventsCaptureRequest postHogEventsCaptureRequest = default(PostHogEventsCaptureRequest), int operationIndex = 0)
        {
            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "multipart/form-data",
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ip != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "ip", ip));
            }
            if (compression != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "compression", compression));
            }
            localVarRequestOptions.Data = postHogEventsCaptureRequest;

            localVarRequestOptions.Operation = "DefaultApi.BatchPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostHogEventsCaptureResponse>("/batch/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sending multiple events You can send multiple events in one go with the Batch API.  There is no limit on the number of events you can send in a batch, but the entire request body must be less than 20MB by default (see API overview).  &gt; Note: Timestamp is optional. If not set, it&#39;ll automatically be set to the current time. 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ip"> (optional)</param>
        /// <param name="compression">The compression method used to compress the request body.  (optional)</param>
        /// <param name="postHogEventsCaptureRequest">Provides a method to capture events. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogEventsCaptureResponse</returns>
        public async System.Threading.Tasks.Task<PostHogEventsCaptureResponse> BatchPostAsync(string ip = default(string), string compression = default(string), PostHogEventsCaptureRequest postHogEventsCaptureRequest = default(PostHogEventsCaptureRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogEventsCaptureResponse> localVarResponse = await BatchPostWithHttpInfoAsync(ip, compression, postHogEventsCaptureRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sending multiple events You can send multiple events in one go with the Batch API.  There is no limit on the number of events you can send in a batch, but the entire request body must be less than 20MB by default (see API overview).  &gt; Note: Timestamp is optional. If not set, it&#39;ll automatically be set to the current time. 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ip"> (optional)</param>
        /// <param name="compression">The compression method used to compress the request body.  (optional)</param>
        /// <param name="postHogEventsCaptureRequest">Provides a method to capture events. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogEventsCaptureResponse)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogEventsCaptureResponse>> BatchPostWithHttpInfoAsync(string ip = default(string), string compression = default(string), PostHogEventsCaptureRequest postHogEventsCaptureRequest = default(PostHogEventsCaptureRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "multipart/form-data", 
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ip != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "ip", ip));
            }
            if (compression != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "compression", compression));
            }
            localVarRequestOptions.Data = postHogEventsCaptureRequest;

            localVarRequestOptions.Operation = "DefaultApi.BatchPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostHogEventsCaptureResponse>("/batch/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sending an event &gt; Note: Timestamp is optional. If not set, it&#39;ll automatically be set to the current time.  Capture an event. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog. 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ip"> (optional)</param>
        /// <param name="compression">The compression method used to compress the request body.  (optional)</param>
        /// <param name="body">Provides a method to capture events. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogEventsCaptureResponse</returns>
        public PostHogEventsCaptureResponse CapturePost(string ip = default(string), string compression = default(string), PostHogEvent body = default(PostHogEvent), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogEventsCaptureResponse> localVarResponse = CapturePostWithHttpInfo(ip, compression, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sending an event &gt; Note: Timestamp is optional. If not set, it&#39;ll automatically be set to the current time.  Capture an event. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog. 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ip"> (optional)</param>
        /// <param name="compression">The compression method used to compress the request body.  (optional)</param>
        /// <param name="body">Provides a method to capture events. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogEventsCaptureResponse</returns>
        public DotPostHog.Client.ApiResponse<PostHogEventsCaptureResponse> CapturePostWithHttpInfo(string ip = default(string), string compression = default(string), PostHogEvent body = default(PostHogEvent), int operationIndex = 0)
        {
            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "multipart/form-data",
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ip != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "ip", ip));
            }
            if (compression != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "compression", compression));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefaultApi.CapturePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostHogEventsCaptureResponse>("/capture/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CapturePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sending an event &gt; Note: Timestamp is optional. If not set, it&#39;ll automatically be set to the current time.  Capture an event. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog. 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ip"> (optional)</param>
        /// <param name="compression">The compression method used to compress the request body.  (optional)</param>
        /// <param name="body">Provides a method to capture events. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogEventsCaptureResponse</returns>
        public async System.Threading.Tasks.Task<PostHogEventsCaptureResponse> CapturePostAsync(string ip = default(string), string compression = default(string), PostHogEvent body = default(PostHogEvent), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogEventsCaptureResponse> localVarResponse = await CapturePostWithHttpInfoAsync(ip, compression, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sending an event &gt; Note: Timestamp is optional. If not set, it&#39;ll automatically be set to the current time.  Capture an event. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog. 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ip"> (optional)</param>
        /// <param name="compression">The compression method used to compress the request body.  (optional)</param>
        /// <param name="body">Provides a method to capture events. Events are the core of PostHog, and are what you use to track user behavior, and then analyze and visualize in PostHog.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogEventsCaptureResponse)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogEventsCaptureResponse>> CapturePostWithHttpInfoAsync(string ip = default(string), string compression = default(string), PostHogEvent body = default(PostHogEvent), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "multipart/form-data", 
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ip != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "ip", ip));
            }
            if (compression != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "compression", compression));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefaultApi.CapturePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostHogEventsCaptureResponse>("/capture/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CapturePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
