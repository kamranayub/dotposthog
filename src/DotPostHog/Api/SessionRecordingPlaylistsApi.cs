/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DotPostHog.Client;
using DotPostHog.Model;

namespace DotPostHog.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISessionRecordingPlaylistsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogSessionRecordingPlaylist</returns>
        PostHogSessionRecordingPlaylist SessionRecordingPlaylistsCreate(string projectId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogSessionRecordingPlaylist</returns>
        ApiResponse<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsCreateWithHttpInfo(string projectId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Hard delete of this model is not allowed. Use a patch API call to set \&quot;deleted\&quot; to true
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SessionRecordingPlaylistsDestroy(string projectId, string shortId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Hard delete of this model is not allowed. Use a patch API call to set \&quot;deleted\&quot; to true
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SessionRecordingPlaylistsDestroyWithHttpInfo(string projectId, string shortId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="shortId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedSessionRecordingPlaylistList</returns>
        PostHogPaginatedSessionRecordingPlaylistList SessionRecordingPlaylistsList(string projectId, int? createdBy = default(int?), int? limit = default(int?), int? offset = default(int?), string shortId = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="shortId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedSessionRecordingPlaylistList</returns>
        ApiResponse<PostHogPaginatedSessionRecordingPlaylistList> SessionRecordingPlaylistsListWithHttpInfo(string projectId, int? createdBy = default(int?), int? limit = default(int?), int? offset = default(int?), string shortId = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="postHogPatchedSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogSessionRecordingPlaylist</returns>
        PostHogSessionRecordingPlaylist SessionRecordingPlaylistsPartialUpdate(string projectId, string shortId, PostHogPatchedSessionRecordingPlaylist postHogPatchedSessionRecordingPlaylist = default(PostHogPatchedSessionRecordingPlaylist), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="postHogPatchedSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogSessionRecordingPlaylist</returns>
        ApiResponse<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsPartialUpdateWithHttpInfo(string projectId, string shortId, PostHogPatchedSessionRecordingPlaylist postHogPatchedSessionRecordingPlaylist = default(PostHogPatchedSessionRecordingPlaylist), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="sessionRecordingId"></param>
        /// <param name="shortId"></param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogSessionRecordingPlaylist</returns>
        PostHogSessionRecordingPlaylist SessionRecordingPlaylistsRecordingsCreate(string projectId, string sessionRecordingId, string shortId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="sessionRecordingId"></param>
        /// <param name="shortId"></param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogSessionRecordingPlaylist</returns>
        ApiResponse<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsRecordingsCreateWithHttpInfo(string projectId, string sessionRecordingId, string shortId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="sessionRecordingId"></param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SessionRecordingPlaylistsRecordingsDestroy(string projectId, string sessionRecordingId, string shortId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="sessionRecordingId"></param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SessionRecordingPlaylistsRecordingsDestroyWithHttpInfo(string projectId, string sessionRecordingId, string shortId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogSessionRecordingPlaylist</returns>
        PostHogSessionRecordingPlaylist SessionRecordingPlaylistsRecordingsRetrieve(string projectId, string shortId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogSessionRecordingPlaylist</returns>
        ApiResponse<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsRecordingsRetrieveWithHttpInfo(string projectId, string shortId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogSessionRecordingPlaylist</returns>
        PostHogSessionRecordingPlaylist SessionRecordingPlaylistsRetrieve(string projectId, string shortId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogSessionRecordingPlaylist</returns>
        ApiResponse<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsRetrieveWithHttpInfo(string projectId, string shortId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogSessionRecordingPlaylist</returns>
        PostHogSessionRecordingPlaylist SessionRecordingPlaylistsUpdate(string projectId, string shortId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogSessionRecordingPlaylist</returns>
        ApiResponse<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsUpdateWithHttpInfo(string projectId, string shortId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISessionRecordingPlaylistsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogSessionRecordingPlaylist</returns>
        System.Threading.Tasks.Task<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsCreateAsync(string projectId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogSessionRecordingPlaylist)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogSessionRecordingPlaylist>> SessionRecordingPlaylistsCreateWithHttpInfoAsync(string projectId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Hard delete of this model is not allowed. Use a patch API call to set \&quot;deleted\&quot; to true
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SessionRecordingPlaylistsDestroyAsync(string projectId, string shortId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Hard delete of this model is not allowed. Use a patch API call to set \&quot;deleted\&quot; to true
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SessionRecordingPlaylistsDestroyWithHttpInfoAsync(string projectId, string shortId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="shortId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedSessionRecordingPlaylistList</returns>
        System.Threading.Tasks.Task<PostHogPaginatedSessionRecordingPlaylistList> SessionRecordingPlaylistsListAsync(string projectId, int? createdBy = default(int?), int? limit = default(int?), int? offset = default(int?), string shortId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="shortId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedSessionRecordingPlaylistList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPaginatedSessionRecordingPlaylistList>> SessionRecordingPlaylistsListWithHttpInfoAsync(string projectId, int? createdBy = default(int?), int? limit = default(int?), int? offset = default(int?), string shortId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="postHogPatchedSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogSessionRecordingPlaylist</returns>
        System.Threading.Tasks.Task<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsPartialUpdateAsync(string projectId, string shortId, PostHogPatchedSessionRecordingPlaylist postHogPatchedSessionRecordingPlaylist = default(PostHogPatchedSessionRecordingPlaylist), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="postHogPatchedSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogSessionRecordingPlaylist)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogSessionRecordingPlaylist>> SessionRecordingPlaylistsPartialUpdateWithHttpInfoAsync(string projectId, string shortId, PostHogPatchedSessionRecordingPlaylist postHogPatchedSessionRecordingPlaylist = default(PostHogPatchedSessionRecordingPlaylist), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="sessionRecordingId"></param>
        /// <param name="shortId"></param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogSessionRecordingPlaylist</returns>
        System.Threading.Tasks.Task<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsRecordingsCreateAsync(string projectId, string sessionRecordingId, string shortId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="sessionRecordingId"></param>
        /// <param name="shortId"></param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogSessionRecordingPlaylist)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogSessionRecordingPlaylist>> SessionRecordingPlaylistsRecordingsCreateWithHttpInfoAsync(string projectId, string sessionRecordingId, string shortId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="sessionRecordingId"></param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SessionRecordingPlaylistsRecordingsDestroyAsync(string projectId, string sessionRecordingId, string shortId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="sessionRecordingId"></param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SessionRecordingPlaylistsRecordingsDestroyWithHttpInfoAsync(string projectId, string sessionRecordingId, string shortId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogSessionRecordingPlaylist</returns>
        System.Threading.Tasks.Task<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsRecordingsRetrieveAsync(string projectId, string shortId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogSessionRecordingPlaylist)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogSessionRecordingPlaylist>> SessionRecordingPlaylistsRecordingsRetrieveWithHttpInfoAsync(string projectId, string shortId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogSessionRecordingPlaylist</returns>
        System.Threading.Tasks.Task<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsRetrieveAsync(string projectId, string shortId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogSessionRecordingPlaylist)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogSessionRecordingPlaylist>> SessionRecordingPlaylistsRetrieveWithHttpInfoAsync(string projectId, string shortId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogSessionRecordingPlaylist</returns>
        System.Threading.Tasks.Task<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsUpdateAsync(string projectId, string shortId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogSessionRecordingPlaylist)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogSessionRecordingPlaylist>> SessionRecordingPlaylistsUpdateWithHttpInfoAsync(string projectId, string shortId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISessionRecordingPlaylistsApi : ISessionRecordingPlaylistsApiSync, ISessionRecordingPlaylistsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SessionRecordingPlaylistsApi : ISessionRecordingPlaylistsApi
    {
        private DotPostHog.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionRecordingPlaylistsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SessionRecordingPlaylistsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionRecordingPlaylistsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SessionRecordingPlaylistsApi(string basePath)
        {
            this.Configuration = DotPostHog.Client.Configuration.MergeConfigurations(
                DotPostHog.Client.GlobalConfiguration.Instance,
                new DotPostHog.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DotPostHog.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionRecordingPlaylistsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SessionRecordingPlaylistsApi(DotPostHog.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DotPostHog.Client.Configuration.MergeConfigurations(
                DotPostHog.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DotPostHog.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionRecordingPlaylistsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SessionRecordingPlaylistsApi(DotPostHog.Client.ISynchronousClient client, DotPostHog.Client.IAsynchronousClient asyncClient, DotPostHog.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DotPostHog.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DotPostHog.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DotPostHog.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DotPostHog.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DotPostHog.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogSessionRecordingPlaylist</returns>
        public PostHogSessionRecordingPlaylist SessionRecordingPlaylistsCreate(string projectId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist> localVarResponse = SessionRecordingPlaylistsCreateWithHttpInfo(projectId, postHogSessionRecordingPlaylist);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogSessionRecordingPlaylist</returns>
        public DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsCreateWithHttpInfo(string projectId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsCreate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = postHogSessionRecordingPlaylist;

            localVarRequestOptions.Operation = "SessionRecordingPlaylistsApi.SessionRecordingPlaylistsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostHogSessionRecordingPlaylist>("/api/projects/{project_id}/session_recording_playlists/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SessionRecordingPlaylistsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogSessionRecordingPlaylist</returns>
        public async System.Threading.Tasks.Task<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsCreateAsync(string projectId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist> localVarResponse = await SessionRecordingPlaylistsCreateWithHttpInfoAsync(projectId, postHogSessionRecordingPlaylist, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogSessionRecordingPlaylist)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist>> SessionRecordingPlaylistsCreateWithHttpInfoAsync(string projectId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsCreate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = postHogSessionRecordingPlaylist;

            localVarRequestOptions.Operation = "SessionRecordingPlaylistsApi.SessionRecordingPlaylistsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostHogSessionRecordingPlaylist>("/api/projects/{project_id}/session_recording_playlists/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SessionRecordingPlaylistsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Hard delete of this model is not allowed. Use a patch API call to set \&quot;deleted\&quot; to true
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SessionRecordingPlaylistsDestroy(string projectId, string shortId, int operationIndex = 0)
        {
            SessionRecordingPlaylistsDestroyWithHttpInfo(projectId, shortId);
        }

        /// <summary>
        ///  Hard delete of this model is not allowed. Use a patch API call to set \&quot;deleted\&quot; to true
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotPostHog.Client.ApiResponse<Object> SessionRecordingPlaylistsDestroyWithHttpInfo(string projectId, string shortId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsDestroy");
            }

            // verify the required parameter 'shortId' is set
            if (shortId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'shortId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsDestroy");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("short_id", DotPostHog.Client.ClientUtils.ParameterToString(shortId)); // path parameter

            localVarRequestOptions.Operation = "SessionRecordingPlaylistsApi.SessionRecordingPlaylistsDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/projects/{project_id}/session_recording_playlists/{short_id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SessionRecordingPlaylistsDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Hard delete of this model is not allowed. Use a patch API call to set \&quot;deleted\&quot; to true
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SessionRecordingPlaylistsDestroyAsync(string projectId, string shortId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SessionRecordingPlaylistsDestroyWithHttpInfoAsync(projectId, shortId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Hard delete of this model is not allowed. Use a patch API call to set \&quot;deleted\&quot; to true
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<Object>> SessionRecordingPlaylistsDestroyWithHttpInfoAsync(string projectId, string shortId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsDestroy");
            }

            // verify the required parameter 'shortId' is set
            if (shortId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'shortId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsDestroy");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("short_id", DotPostHog.Client.ClientUtils.ParameterToString(shortId)); // path parameter

            localVarRequestOptions.Operation = "SessionRecordingPlaylistsApi.SessionRecordingPlaylistsDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/projects/{project_id}/session_recording_playlists/{short_id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SessionRecordingPlaylistsDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="shortId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedSessionRecordingPlaylistList</returns>
        public PostHogPaginatedSessionRecordingPlaylistList SessionRecordingPlaylistsList(string projectId, int? createdBy = default(int?), int? limit = default(int?), int? offset = default(int?), string shortId = default(string), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedSessionRecordingPlaylistList> localVarResponse = SessionRecordingPlaylistsListWithHttpInfo(projectId, createdBy, limit, offset, shortId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="shortId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedSessionRecordingPlaylistList</returns>
        public DotPostHog.Client.ApiResponse<PostHogPaginatedSessionRecordingPlaylistList> SessionRecordingPlaylistsListWithHttpInfo(string projectId, int? createdBy = default(int?), int? limit = default(int?), int? offset = default(int?), string shortId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsList");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (createdBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "created_by", createdBy));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (shortId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "short_id", shortId));
            }

            localVarRequestOptions.Operation = "SessionRecordingPlaylistsApi.SessionRecordingPlaylistsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPaginatedSessionRecordingPlaylistList>("/api/projects/{project_id}/session_recording_playlists/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SessionRecordingPlaylistsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="shortId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedSessionRecordingPlaylistList</returns>
        public async System.Threading.Tasks.Task<PostHogPaginatedSessionRecordingPlaylistList> SessionRecordingPlaylistsListAsync(string projectId, int? createdBy = default(int?), int? limit = default(int?), int? offset = default(int?), string shortId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedSessionRecordingPlaylistList> localVarResponse = await SessionRecordingPlaylistsListWithHttpInfoAsync(projectId, createdBy, limit, offset, shortId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="shortId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedSessionRecordingPlaylistList)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPaginatedSessionRecordingPlaylistList>> SessionRecordingPlaylistsListWithHttpInfoAsync(string projectId, int? createdBy = default(int?), int? limit = default(int?), int? offset = default(int?), string shortId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsList");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (createdBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "created_by", createdBy));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (shortId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "short_id", shortId));
            }

            localVarRequestOptions.Operation = "SessionRecordingPlaylistsApi.SessionRecordingPlaylistsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPaginatedSessionRecordingPlaylistList>("/api/projects/{project_id}/session_recording_playlists/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SessionRecordingPlaylistsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="postHogPatchedSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogSessionRecordingPlaylist</returns>
        public PostHogSessionRecordingPlaylist SessionRecordingPlaylistsPartialUpdate(string projectId, string shortId, PostHogPatchedSessionRecordingPlaylist postHogPatchedSessionRecordingPlaylist = default(PostHogPatchedSessionRecordingPlaylist), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist> localVarResponse = SessionRecordingPlaylistsPartialUpdateWithHttpInfo(projectId, shortId, postHogPatchedSessionRecordingPlaylist);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="postHogPatchedSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogSessionRecordingPlaylist</returns>
        public DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsPartialUpdateWithHttpInfo(string projectId, string shortId, PostHogPatchedSessionRecordingPlaylist postHogPatchedSessionRecordingPlaylist = default(PostHogPatchedSessionRecordingPlaylist), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsPartialUpdate");
            }

            // verify the required parameter 'shortId' is set
            if (shortId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'shortId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsPartialUpdate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("short_id", DotPostHog.Client.ClientUtils.ParameterToString(shortId)); // path parameter
            localVarRequestOptions.Data = postHogPatchedSessionRecordingPlaylist;

            localVarRequestOptions.Operation = "SessionRecordingPlaylistsApi.SessionRecordingPlaylistsPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<PostHogSessionRecordingPlaylist>("/api/projects/{project_id}/session_recording_playlists/{short_id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SessionRecordingPlaylistsPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="postHogPatchedSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogSessionRecordingPlaylist</returns>
        public async System.Threading.Tasks.Task<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsPartialUpdateAsync(string projectId, string shortId, PostHogPatchedSessionRecordingPlaylist postHogPatchedSessionRecordingPlaylist = default(PostHogPatchedSessionRecordingPlaylist), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist> localVarResponse = await SessionRecordingPlaylistsPartialUpdateWithHttpInfoAsync(projectId, shortId, postHogPatchedSessionRecordingPlaylist, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="postHogPatchedSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogSessionRecordingPlaylist)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist>> SessionRecordingPlaylistsPartialUpdateWithHttpInfoAsync(string projectId, string shortId, PostHogPatchedSessionRecordingPlaylist postHogPatchedSessionRecordingPlaylist = default(PostHogPatchedSessionRecordingPlaylist), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsPartialUpdate");
            }

            // verify the required parameter 'shortId' is set
            if (shortId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'shortId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsPartialUpdate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("short_id", DotPostHog.Client.ClientUtils.ParameterToString(shortId)); // path parameter
            localVarRequestOptions.Data = postHogPatchedSessionRecordingPlaylist;

            localVarRequestOptions.Operation = "SessionRecordingPlaylistsApi.SessionRecordingPlaylistsPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<PostHogSessionRecordingPlaylist>("/api/projects/{project_id}/session_recording_playlists/{short_id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SessionRecordingPlaylistsPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="sessionRecordingId"></param>
        /// <param name="shortId"></param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogSessionRecordingPlaylist</returns>
        public PostHogSessionRecordingPlaylist SessionRecordingPlaylistsRecordingsCreate(string projectId, string sessionRecordingId, string shortId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist> localVarResponse = SessionRecordingPlaylistsRecordingsCreateWithHttpInfo(projectId, sessionRecordingId, shortId, postHogSessionRecordingPlaylist);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="sessionRecordingId"></param>
        /// <param name="shortId"></param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogSessionRecordingPlaylist</returns>
        public DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsRecordingsCreateWithHttpInfo(string projectId, string sessionRecordingId, string shortId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsRecordingsCreate");
            }

            // verify the required parameter 'sessionRecordingId' is set
            if (sessionRecordingId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'sessionRecordingId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsRecordingsCreate");
            }

            // verify the required parameter 'shortId' is set
            if (shortId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'shortId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsRecordingsCreate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("session_recording_id", DotPostHog.Client.ClientUtils.ParameterToString(sessionRecordingId)); // path parameter
            localVarRequestOptions.PathParameters.Add("short_id", DotPostHog.Client.ClientUtils.ParameterToString(shortId)); // path parameter
            localVarRequestOptions.Data = postHogSessionRecordingPlaylist;

            localVarRequestOptions.Operation = "SessionRecordingPlaylistsApi.SessionRecordingPlaylistsRecordingsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostHogSessionRecordingPlaylist>("/api/projects/{project_id}/session_recording_playlists/{short_id}/recordings/{session_recording_id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SessionRecordingPlaylistsRecordingsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="sessionRecordingId"></param>
        /// <param name="shortId"></param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogSessionRecordingPlaylist</returns>
        public async System.Threading.Tasks.Task<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsRecordingsCreateAsync(string projectId, string sessionRecordingId, string shortId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist> localVarResponse = await SessionRecordingPlaylistsRecordingsCreateWithHttpInfoAsync(projectId, sessionRecordingId, shortId, postHogSessionRecordingPlaylist, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="sessionRecordingId"></param>
        /// <param name="shortId"></param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogSessionRecordingPlaylist)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist>> SessionRecordingPlaylistsRecordingsCreateWithHttpInfoAsync(string projectId, string sessionRecordingId, string shortId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsRecordingsCreate");
            }

            // verify the required parameter 'sessionRecordingId' is set
            if (sessionRecordingId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'sessionRecordingId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsRecordingsCreate");
            }

            // verify the required parameter 'shortId' is set
            if (shortId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'shortId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsRecordingsCreate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("session_recording_id", DotPostHog.Client.ClientUtils.ParameterToString(sessionRecordingId)); // path parameter
            localVarRequestOptions.PathParameters.Add("short_id", DotPostHog.Client.ClientUtils.ParameterToString(shortId)); // path parameter
            localVarRequestOptions.Data = postHogSessionRecordingPlaylist;

            localVarRequestOptions.Operation = "SessionRecordingPlaylistsApi.SessionRecordingPlaylistsRecordingsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostHogSessionRecordingPlaylist>("/api/projects/{project_id}/session_recording_playlists/{short_id}/recordings/{session_recording_id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SessionRecordingPlaylistsRecordingsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="sessionRecordingId"></param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SessionRecordingPlaylistsRecordingsDestroy(string projectId, string sessionRecordingId, string shortId, int operationIndex = 0)
        {
            SessionRecordingPlaylistsRecordingsDestroyWithHttpInfo(projectId, sessionRecordingId, shortId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="sessionRecordingId"></param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotPostHog.Client.ApiResponse<Object> SessionRecordingPlaylistsRecordingsDestroyWithHttpInfo(string projectId, string sessionRecordingId, string shortId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsRecordingsDestroy");
            }

            // verify the required parameter 'sessionRecordingId' is set
            if (sessionRecordingId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'sessionRecordingId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsRecordingsDestroy");
            }

            // verify the required parameter 'shortId' is set
            if (shortId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'shortId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsRecordingsDestroy");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("session_recording_id", DotPostHog.Client.ClientUtils.ParameterToString(sessionRecordingId)); // path parameter
            localVarRequestOptions.PathParameters.Add("short_id", DotPostHog.Client.ClientUtils.ParameterToString(shortId)); // path parameter

            localVarRequestOptions.Operation = "SessionRecordingPlaylistsApi.SessionRecordingPlaylistsRecordingsDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/projects/{project_id}/session_recording_playlists/{short_id}/recordings/{session_recording_id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SessionRecordingPlaylistsRecordingsDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="sessionRecordingId"></param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SessionRecordingPlaylistsRecordingsDestroyAsync(string projectId, string sessionRecordingId, string shortId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SessionRecordingPlaylistsRecordingsDestroyWithHttpInfoAsync(projectId, sessionRecordingId, shortId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="sessionRecordingId"></param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<Object>> SessionRecordingPlaylistsRecordingsDestroyWithHttpInfoAsync(string projectId, string sessionRecordingId, string shortId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsRecordingsDestroy");
            }

            // verify the required parameter 'sessionRecordingId' is set
            if (sessionRecordingId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'sessionRecordingId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsRecordingsDestroy");
            }

            // verify the required parameter 'shortId' is set
            if (shortId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'shortId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsRecordingsDestroy");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("session_recording_id", DotPostHog.Client.ClientUtils.ParameterToString(sessionRecordingId)); // path parameter
            localVarRequestOptions.PathParameters.Add("short_id", DotPostHog.Client.ClientUtils.ParameterToString(shortId)); // path parameter

            localVarRequestOptions.Operation = "SessionRecordingPlaylistsApi.SessionRecordingPlaylistsRecordingsDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/projects/{project_id}/session_recording_playlists/{short_id}/recordings/{session_recording_id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SessionRecordingPlaylistsRecordingsDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogSessionRecordingPlaylist</returns>
        public PostHogSessionRecordingPlaylist SessionRecordingPlaylistsRecordingsRetrieve(string projectId, string shortId, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist> localVarResponse = SessionRecordingPlaylistsRecordingsRetrieveWithHttpInfo(projectId, shortId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogSessionRecordingPlaylist</returns>
        public DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsRecordingsRetrieveWithHttpInfo(string projectId, string shortId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsRecordingsRetrieve");
            }

            // verify the required parameter 'shortId' is set
            if (shortId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'shortId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsRecordingsRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("short_id", DotPostHog.Client.ClientUtils.ParameterToString(shortId)); // path parameter

            localVarRequestOptions.Operation = "SessionRecordingPlaylistsApi.SessionRecordingPlaylistsRecordingsRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogSessionRecordingPlaylist>("/api/projects/{project_id}/session_recording_playlists/{short_id}/recordings/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SessionRecordingPlaylistsRecordingsRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogSessionRecordingPlaylist</returns>
        public async System.Threading.Tasks.Task<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsRecordingsRetrieveAsync(string projectId, string shortId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist> localVarResponse = await SessionRecordingPlaylistsRecordingsRetrieveWithHttpInfoAsync(projectId, shortId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogSessionRecordingPlaylist)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist>> SessionRecordingPlaylistsRecordingsRetrieveWithHttpInfoAsync(string projectId, string shortId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsRecordingsRetrieve");
            }

            // verify the required parameter 'shortId' is set
            if (shortId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'shortId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsRecordingsRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("short_id", DotPostHog.Client.ClientUtils.ParameterToString(shortId)); // path parameter

            localVarRequestOptions.Operation = "SessionRecordingPlaylistsApi.SessionRecordingPlaylistsRecordingsRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogSessionRecordingPlaylist>("/api/projects/{project_id}/session_recording_playlists/{short_id}/recordings/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SessionRecordingPlaylistsRecordingsRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogSessionRecordingPlaylist</returns>
        public PostHogSessionRecordingPlaylist SessionRecordingPlaylistsRetrieve(string projectId, string shortId, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist> localVarResponse = SessionRecordingPlaylistsRetrieveWithHttpInfo(projectId, shortId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogSessionRecordingPlaylist</returns>
        public DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsRetrieveWithHttpInfo(string projectId, string shortId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsRetrieve");
            }

            // verify the required parameter 'shortId' is set
            if (shortId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'shortId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("short_id", DotPostHog.Client.ClientUtils.ParameterToString(shortId)); // path parameter

            localVarRequestOptions.Operation = "SessionRecordingPlaylistsApi.SessionRecordingPlaylistsRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogSessionRecordingPlaylist>("/api/projects/{project_id}/session_recording_playlists/{short_id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SessionRecordingPlaylistsRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogSessionRecordingPlaylist</returns>
        public async System.Threading.Tasks.Task<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsRetrieveAsync(string projectId, string shortId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist> localVarResponse = await SessionRecordingPlaylistsRetrieveWithHttpInfoAsync(projectId, shortId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogSessionRecordingPlaylist)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist>> SessionRecordingPlaylistsRetrieveWithHttpInfoAsync(string projectId, string shortId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsRetrieve");
            }

            // verify the required parameter 'shortId' is set
            if (shortId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'shortId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("short_id", DotPostHog.Client.ClientUtils.ParameterToString(shortId)); // path parameter

            localVarRequestOptions.Operation = "SessionRecordingPlaylistsApi.SessionRecordingPlaylistsRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogSessionRecordingPlaylist>("/api/projects/{project_id}/session_recording_playlists/{short_id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SessionRecordingPlaylistsRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogSessionRecordingPlaylist</returns>
        public PostHogSessionRecordingPlaylist SessionRecordingPlaylistsUpdate(string projectId, string shortId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist> localVarResponse = SessionRecordingPlaylistsUpdateWithHttpInfo(projectId, shortId, postHogSessionRecordingPlaylist);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogSessionRecordingPlaylist</returns>
        public DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsUpdateWithHttpInfo(string projectId, string shortId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsUpdate");
            }

            // verify the required parameter 'shortId' is set
            if (shortId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'shortId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsUpdate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("short_id", DotPostHog.Client.ClientUtils.ParameterToString(shortId)); // path parameter
            localVarRequestOptions.Data = postHogSessionRecordingPlaylist;

            localVarRequestOptions.Operation = "SessionRecordingPlaylistsApi.SessionRecordingPlaylistsUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<PostHogSessionRecordingPlaylist>("/api/projects/{project_id}/session_recording_playlists/{short_id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SessionRecordingPlaylistsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogSessionRecordingPlaylist</returns>
        public async System.Threading.Tasks.Task<PostHogSessionRecordingPlaylist> SessionRecordingPlaylistsUpdateAsync(string projectId, string shortId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist> localVarResponse = await SessionRecordingPlaylistsUpdateWithHttpInfoAsync(projectId, shortId, postHogSessionRecordingPlaylist, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="shortId"></param>
        /// <param name="postHogSessionRecordingPlaylist"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogSessionRecordingPlaylist)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogSessionRecordingPlaylist>> SessionRecordingPlaylistsUpdateWithHttpInfoAsync(string projectId, string shortId, PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = default(PostHogSessionRecordingPlaylist), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsUpdate");
            }

            // verify the required parameter 'shortId' is set
            if (shortId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'shortId' when calling SessionRecordingPlaylistsApi->SessionRecordingPlaylistsUpdate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("short_id", DotPostHog.Client.ClientUtils.ParameterToString(shortId)); // path parameter
            localVarRequestOptions.Data = postHogSessionRecordingPlaylist;

            localVarRequestOptions.Operation = "SessionRecordingPlaylistsApi.SessionRecordingPlaylistsUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PostHogSessionRecordingPlaylist>("/api/projects/{project_id}/session_recording_playlists/{short_id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SessionRecordingPlaylistsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
