/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DotPostHog.Client;
using DotPostHog.Model;

namespace DotPostHog.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchExportsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Trigger a backfill for a BatchExport.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogBatchExport</returns>
        PostHogBatchExport BatchExportsBackfillCreate(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Trigger a backfill for a BatchExport.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogBatchExport</returns>
        ApiResponse<PostHogBatchExport> BatchExportsBackfillCreateWithHttpInfo(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogBatchExport</returns>
        PostHogBatchExport BatchExportsCreate(string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogBatchExport</returns>
        ApiResponse<PostHogBatchExport> BatchExportsCreateWithHttpInfo(string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void BatchExportsDestroy(Guid id, string projectId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BatchExportsDestroyWithHttpInfo(Guid id, string projectId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedBatchExportList</returns>
        PostHogPaginatedBatchExportList BatchExportsList(string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedBatchExportList</returns>
        ApiResponse<PostHogPaginatedBatchExportList> BatchExportsListWithHttpInfo(string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedBatchExportLogEntryList</returns>
        PostHogPaginatedBatchExportLogEntryList BatchExportsLogsList(string parentLookupBatchExportId, string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedBatchExportLogEntryList</returns>
        ApiResponse<PostHogPaginatedBatchExportLogEntryList> BatchExportsLogsListWithHttpInfo(string parentLookupBatchExportId, string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogPatchedBatchExport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogBatchExport</returns>
        PostHogBatchExport BatchExportsPartialUpdate(Guid id, string projectId, PostHogPatchedBatchExport postHogPatchedBatchExport = default(PostHogPatchedBatchExport), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogPatchedBatchExport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogBatchExport</returns>
        ApiResponse<PostHogBatchExport> BatchExportsPartialUpdateWithHttpInfo(Guid id, string projectId, PostHogPatchedBatchExport postHogPatchedBatchExport = default(PostHogPatchedBatchExport), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Pause a BatchExport.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogBatchExport</returns>
        PostHogBatchExport BatchExportsPauseCreate(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Pause a BatchExport.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogBatchExport</returns>
        ApiResponse<PostHogBatchExport> BatchExportsPauseCreateWithHttpInfo(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogBatchExport</returns>
        PostHogBatchExport BatchExportsRetrieve(Guid id, string projectId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogBatchExport</returns>
        ApiResponse<PostHogBatchExport> BatchExportsRetrieveWithHttpInfo(Guid id, string projectId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all BatchExportRuns for a BatchExport.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedBatchExportRunList</returns>
        PostHogPaginatedBatchExportRunList BatchExportsRunsList(string parentLookupBatchExportId, string projectId, string cursor = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all BatchExportRuns for a BatchExport.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedBatchExportRunList</returns>
        ApiResponse<PostHogPaginatedBatchExportRunList> BatchExportsRunsListWithHttpInfo(string parentLookupBatchExportId, string projectId, string cursor = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="parentLookupRunId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedBatchExportLogEntryList</returns>
        PostHogPaginatedBatchExportLogEntryList BatchExportsRunsLogsList(string parentLookupBatchExportId, string parentLookupRunId, string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="parentLookupRunId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedBatchExportLogEntryList</returns>
        ApiResponse<PostHogPaginatedBatchExportLogEntryList> BatchExportsRunsLogsListWithHttpInfo(string parentLookupBatchExportId, string parentLookupRunId, string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export run.</param>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogBatchExportRun</returns>
        PostHogBatchExportRun BatchExportsRunsRetrieve(Guid id, string parentLookupBatchExportId, string projectId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export run.</param>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogBatchExportRun</returns>
        ApiResponse<PostHogBatchExportRun> BatchExportsRunsRetrieveWithHttpInfo(Guid id, string parentLookupBatchExportId, string projectId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unpause a BatchExport.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogBatchExport</returns>
        PostHogBatchExport BatchExportsUnpauseCreate(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unpause a BatchExport.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogBatchExport</returns>
        ApiResponse<PostHogBatchExport> BatchExportsUnpauseCreateWithHttpInfo(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogBatchExport</returns>
        PostHogBatchExport BatchExportsUpdate(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogBatchExport</returns>
        ApiResponse<PostHogBatchExport> BatchExportsUpdateWithHttpInfo(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchExportsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Trigger a backfill for a BatchExport.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogBatchExport</returns>
        System.Threading.Tasks.Task<PostHogBatchExport> BatchExportsBackfillCreateAsync(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Trigger a backfill for a BatchExport.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogBatchExport)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogBatchExport>> BatchExportsBackfillCreateWithHttpInfoAsync(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogBatchExport</returns>
        System.Threading.Tasks.Task<PostHogBatchExport> BatchExportsCreateAsync(string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogBatchExport)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogBatchExport>> BatchExportsCreateWithHttpInfoAsync(string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BatchExportsDestroyAsync(Guid id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BatchExportsDestroyWithHttpInfoAsync(Guid id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedBatchExportList</returns>
        System.Threading.Tasks.Task<PostHogPaginatedBatchExportList> BatchExportsListAsync(string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedBatchExportList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPaginatedBatchExportList>> BatchExportsListWithHttpInfoAsync(string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedBatchExportLogEntryList</returns>
        System.Threading.Tasks.Task<PostHogPaginatedBatchExportLogEntryList> BatchExportsLogsListAsync(string parentLookupBatchExportId, string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedBatchExportLogEntryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPaginatedBatchExportLogEntryList>> BatchExportsLogsListWithHttpInfoAsync(string parentLookupBatchExportId, string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogPatchedBatchExport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogBatchExport</returns>
        System.Threading.Tasks.Task<PostHogBatchExport> BatchExportsPartialUpdateAsync(Guid id, string projectId, PostHogPatchedBatchExport postHogPatchedBatchExport = default(PostHogPatchedBatchExport), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogPatchedBatchExport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogBatchExport)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogBatchExport>> BatchExportsPartialUpdateWithHttpInfoAsync(Guid id, string projectId, PostHogPatchedBatchExport postHogPatchedBatchExport = default(PostHogPatchedBatchExport), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Pause a BatchExport.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogBatchExport</returns>
        System.Threading.Tasks.Task<PostHogBatchExport> BatchExportsPauseCreateAsync(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Pause a BatchExport.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogBatchExport)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogBatchExport>> BatchExportsPauseCreateWithHttpInfoAsync(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogBatchExport</returns>
        System.Threading.Tasks.Task<PostHogBatchExport> BatchExportsRetrieveAsync(Guid id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogBatchExport)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogBatchExport>> BatchExportsRetrieveWithHttpInfoAsync(Guid id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all BatchExportRuns for a BatchExport.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedBatchExportRunList</returns>
        System.Threading.Tasks.Task<PostHogPaginatedBatchExportRunList> BatchExportsRunsListAsync(string parentLookupBatchExportId, string projectId, string cursor = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all BatchExportRuns for a BatchExport.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedBatchExportRunList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPaginatedBatchExportRunList>> BatchExportsRunsListWithHttpInfoAsync(string parentLookupBatchExportId, string projectId, string cursor = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="parentLookupRunId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedBatchExportLogEntryList</returns>
        System.Threading.Tasks.Task<PostHogPaginatedBatchExportLogEntryList> BatchExportsRunsLogsListAsync(string parentLookupBatchExportId, string parentLookupRunId, string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="parentLookupRunId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedBatchExportLogEntryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogPaginatedBatchExportLogEntryList>> BatchExportsRunsLogsListWithHttpInfoAsync(string parentLookupBatchExportId, string parentLookupRunId, string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export run.</param>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogBatchExportRun</returns>
        System.Threading.Tasks.Task<PostHogBatchExportRun> BatchExportsRunsRetrieveAsync(Guid id, string parentLookupBatchExportId, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export run.</param>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogBatchExportRun)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogBatchExportRun>> BatchExportsRunsRetrieveWithHttpInfoAsync(Guid id, string parentLookupBatchExportId, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unpause a BatchExport.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogBatchExport</returns>
        System.Threading.Tasks.Task<PostHogBatchExport> BatchExportsUnpauseCreateAsync(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unpause a BatchExport.
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogBatchExport)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogBatchExport>> BatchExportsUnpauseCreateWithHttpInfoAsync(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogBatchExport</returns>
        System.Threading.Tasks.Task<PostHogBatchExport> BatchExportsUpdateAsync(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogBatchExport)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostHogBatchExport>> BatchExportsUpdateWithHttpInfoAsync(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchExportsApi : IBatchExportsApiSync, IBatchExportsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BatchExportsApi : IBatchExportsApi
    {
        private DotPostHog.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchExportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BatchExportsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchExportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BatchExportsApi(string basePath)
        {
            this.Configuration = DotPostHog.Client.Configuration.MergeConfigurations(
                DotPostHog.Client.GlobalConfiguration.Instance,
                new DotPostHog.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DotPostHog.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchExportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BatchExportsApi(DotPostHog.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DotPostHog.Client.Configuration.MergeConfigurations(
                DotPostHog.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DotPostHog.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DotPostHog.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchExportsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BatchExportsApi(DotPostHog.Client.ISynchronousClient client, DotPostHog.Client.IAsynchronousClient asyncClient, DotPostHog.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DotPostHog.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DotPostHog.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DotPostHog.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DotPostHog.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DotPostHog.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Trigger a backfill for a BatchExport.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogBatchExport</returns>
        public PostHogBatchExport BatchExportsBackfillCreate(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogBatchExport> localVarResponse = BatchExportsBackfillCreateWithHttpInfo(id, projectId, postHogBatchExport);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Trigger a backfill for a BatchExport.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogBatchExport</returns>
        public DotPostHog.Client.ApiResponse<PostHogBatchExport> BatchExportsBackfillCreateWithHttpInfo(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsBackfillCreate");
            }

            // verify the required parameter 'postHogBatchExport' is set
            if (postHogBatchExport == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogBatchExport' when calling BatchExportsApi->BatchExportsBackfillCreate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = postHogBatchExport;

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsBackfillCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostHogBatchExport>("/api/projects/{project_id}/batch_exports/{id}/backfill/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsBackfillCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Trigger a backfill for a BatchExport.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogBatchExport</returns>
        public async System.Threading.Tasks.Task<PostHogBatchExport> BatchExportsBackfillCreateAsync(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogBatchExport> localVarResponse = await BatchExportsBackfillCreateWithHttpInfoAsync(id, projectId, postHogBatchExport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Trigger a backfill for a BatchExport.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogBatchExport)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogBatchExport>> BatchExportsBackfillCreateWithHttpInfoAsync(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsBackfillCreate");
            }

            // verify the required parameter 'postHogBatchExport' is set
            if (postHogBatchExport == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogBatchExport' when calling BatchExportsApi->BatchExportsBackfillCreate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = postHogBatchExport;

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsBackfillCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostHogBatchExport>("/api/projects/{project_id}/batch_exports/{id}/backfill/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsBackfillCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogBatchExport</returns>
        public PostHogBatchExport BatchExportsCreate(string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogBatchExport> localVarResponse = BatchExportsCreateWithHttpInfo(projectId, postHogBatchExport);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogBatchExport</returns>
        public DotPostHog.Client.ApiResponse<PostHogBatchExport> BatchExportsCreateWithHttpInfo(string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsCreate");
            }

            // verify the required parameter 'postHogBatchExport' is set
            if (postHogBatchExport == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogBatchExport' when calling BatchExportsApi->BatchExportsCreate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = postHogBatchExport;

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostHogBatchExport>("/api/projects/{project_id}/batch_exports/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogBatchExport</returns>
        public async System.Threading.Tasks.Task<PostHogBatchExport> BatchExportsCreateAsync(string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogBatchExport> localVarResponse = await BatchExportsCreateWithHttpInfoAsync(projectId, postHogBatchExport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogBatchExport)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogBatchExport>> BatchExportsCreateWithHttpInfoAsync(string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsCreate");
            }

            // verify the required parameter 'postHogBatchExport' is set
            if (postHogBatchExport == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogBatchExport' when calling BatchExportsApi->BatchExportsCreate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = postHogBatchExport;

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostHogBatchExport>("/api/projects/{project_id}/batch_exports/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void BatchExportsDestroy(Guid id, string projectId, int operationIndex = 0)
        {
            BatchExportsDestroyWithHttpInfo(id, projectId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotPostHog.Client.ApiResponse<Object> BatchExportsDestroyWithHttpInfo(Guid id, string projectId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsDestroy");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/projects/{project_id}/batch_exports/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BatchExportsDestroyAsync(Guid id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await BatchExportsDestroyWithHttpInfoAsync(id, projectId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<Object>> BatchExportsDestroyWithHttpInfoAsync(Guid id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsDestroy");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/projects/{project_id}/batch_exports/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedBatchExportList</returns>
        public PostHogPaginatedBatchExportList BatchExportsList(string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedBatchExportList> localVarResponse = BatchExportsListWithHttpInfo(projectId, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedBatchExportList</returns>
        public DotPostHog.Client.ApiResponse<PostHogPaginatedBatchExportList> BatchExportsListWithHttpInfo(string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsList");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPaginatedBatchExportList>("/api/projects/{project_id}/batch_exports/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedBatchExportList</returns>
        public async System.Threading.Tasks.Task<PostHogPaginatedBatchExportList> BatchExportsListAsync(string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedBatchExportList> localVarResponse = await BatchExportsListWithHttpInfoAsync(projectId, limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedBatchExportList)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPaginatedBatchExportList>> BatchExportsListWithHttpInfoAsync(string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsList");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPaginatedBatchExportList>("/api/projects/{project_id}/batch_exports/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedBatchExportLogEntryList</returns>
        public PostHogPaginatedBatchExportLogEntryList BatchExportsLogsList(string parentLookupBatchExportId, string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedBatchExportLogEntryList> localVarResponse = BatchExportsLogsListWithHttpInfo(parentLookupBatchExportId, projectId, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedBatchExportLogEntryList</returns>
        public DotPostHog.Client.ApiResponse<PostHogPaginatedBatchExportLogEntryList> BatchExportsLogsListWithHttpInfo(string parentLookupBatchExportId, string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupBatchExportId' is set
            if (parentLookupBatchExportId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupBatchExportId' when calling BatchExportsApi->BatchExportsLogsList");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsLogsList");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_batch_export_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupBatchExportId)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsLogsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPaginatedBatchExportLogEntryList>("/api/projects/{project_id}/batch_exports/{parent_lookup_batch_export_id}/logs/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsLogsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedBatchExportLogEntryList</returns>
        public async System.Threading.Tasks.Task<PostHogPaginatedBatchExportLogEntryList> BatchExportsLogsListAsync(string parentLookupBatchExportId, string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedBatchExportLogEntryList> localVarResponse = await BatchExportsLogsListWithHttpInfoAsync(parentLookupBatchExportId, projectId, limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedBatchExportLogEntryList)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPaginatedBatchExportLogEntryList>> BatchExportsLogsListWithHttpInfoAsync(string parentLookupBatchExportId, string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupBatchExportId' is set
            if (parentLookupBatchExportId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupBatchExportId' when calling BatchExportsApi->BatchExportsLogsList");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsLogsList");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_batch_export_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupBatchExportId)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsLogsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPaginatedBatchExportLogEntryList>("/api/projects/{project_id}/batch_exports/{parent_lookup_batch_export_id}/logs/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsLogsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogPatchedBatchExport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogBatchExport</returns>
        public PostHogBatchExport BatchExportsPartialUpdate(Guid id, string projectId, PostHogPatchedBatchExport postHogPatchedBatchExport = default(PostHogPatchedBatchExport), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogBatchExport> localVarResponse = BatchExportsPartialUpdateWithHttpInfo(id, projectId, postHogPatchedBatchExport);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogPatchedBatchExport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogBatchExport</returns>
        public DotPostHog.Client.ApiResponse<PostHogBatchExport> BatchExportsPartialUpdateWithHttpInfo(Guid id, string projectId, PostHogPatchedBatchExport postHogPatchedBatchExport = default(PostHogPatchedBatchExport), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsPartialUpdate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = postHogPatchedBatchExport;

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<PostHogBatchExport>("/api/projects/{project_id}/batch_exports/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogPatchedBatchExport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogBatchExport</returns>
        public async System.Threading.Tasks.Task<PostHogBatchExport> BatchExportsPartialUpdateAsync(Guid id, string projectId, PostHogPatchedBatchExport postHogPatchedBatchExport = default(PostHogPatchedBatchExport), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogBatchExport> localVarResponse = await BatchExportsPartialUpdateWithHttpInfoAsync(id, projectId, postHogPatchedBatchExport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogPatchedBatchExport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogBatchExport)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogBatchExport>> BatchExportsPartialUpdateWithHttpInfoAsync(Guid id, string projectId, PostHogPatchedBatchExport postHogPatchedBatchExport = default(PostHogPatchedBatchExport), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsPartialUpdate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = postHogPatchedBatchExport;

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<PostHogBatchExport>("/api/projects/{project_id}/batch_exports/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Pause a BatchExport.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogBatchExport</returns>
        public PostHogBatchExport BatchExportsPauseCreate(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogBatchExport> localVarResponse = BatchExportsPauseCreateWithHttpInfo(id, projectId, postHogBatchExport);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Pause a BatchExport.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogBatchExport</returns>
        public DotPostHog.Client.ApiResponse<PostHogBatchExport> BatchExportsPauseCreateWithHttpInfo(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsPauseCreate");
            }

            // verify the required parameter 'postHogBatchExport' is set
            if (postHogBatchExport == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogBatchExport' when calling BatchExportsApi->BatchExportsPauseCreate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = postHogBatchExport;

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsPauseCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostHogBatchExport>("/api/projects/{project_id}/batch_exports/{id}/pause/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsPauseCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Pause a BatchExport.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogBatchExport</returns>
        public async System.Threading.Tasks.Task<PostHogBatchExport> BatchExportsPauseCreateAsync(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogBatchExport> localVarResponse = await BatchExportsPauseCreateWithHttpInfoAsync(id, projectId, postHogBatchExport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Pause a BatchExport.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogBatchExport)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogBatchExport>> BatchExportsPauseCreateWithHttpInfoAsync(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsPauseCreate");
            }

            // verify the required parameter 'postHogBatchExport' is set
            if (postHogBatchExport == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogBatchExport' when calling BatchExportsApi->BatchExportsPauseCreate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = postHogBatchExport;

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsPauseCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostHogBatchExport>("/api/projects/{project_id}/batch_exports/{id}/pause/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsPauseCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogBatchExport</returns>
        public PostHogBatchExport BatchExportsRetrieve(Guid id, string projectId, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogBatchExport> localVarResponse = BatchExportsRetrieveWithHttpInfo(id, projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogBatchExport</returns>
        public DotPostHog.Client.ApiResponse<PostHogBatchExport> BatchExportsRetrieveWithHttpInfo(Guid id, string projectId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogBatchExport>("/api/projects/{project_id}/batch_exports/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogBatchExport</returns>
        public async System.Threading.Tasks.Task<PostHogBatchExport> BatchExportsRetrieveAsync(Guid id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogBatchExport> localVarResponse = await BatchExportsRetrieveWithHttpInfoAsync(id, projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogBatchExport)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogBatchExport>> BatchExportsRetrieveWithHttpInfoAsync(Guid id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogBatchExport>("/api/projects/{project_id}/batch_exports/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get all BatchExportRuns for a BatchExport.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedBatchExportRunList</returns>
        public PostHogPaginatedBatchExportRunList BatchExportsRunsList(string parentLookupBatchExportId, string projectId, string cursor = default(string), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedBatchExportRunList> localVarResponse = BatchExportsRunsListWithHttpInfo(parentLookupBatchExportId, projectId, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all BatchExportRuns for a BatchExport.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedBatchExportRunList</returns>
        public DotPostHog.Client.ApiResponse<PostHogPaginatedBatchExportRunList> BatchExportsRunsListWithHttpInfo(string parentLookupBatchExportId, string projectId, string cursor = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupBatchExportId' is set
            if (parentLookupBatchExportId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupBatchExportId' when calling BatchExportsApi->BatchExportsRunsList");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsRunsList");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_batch_export_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupBatchExportId)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsRunsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPaginatedBatchExportRunList>("/api/projects/{project_id}/batch_exports/{parent_lookup_batch_export_id}/runs/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsRunsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get all BatchExportRuns for a BatchExport.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedBatchExportRunList</returns>
        public async System.Threading.Tasks.Task<PostHogPaginatedBatchExportRunList> BatchExportsRunsListAsync(string parentLookupBatchExportId, string projectId, string cursor = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedBatchExportRunList> localVarResponse = await BatchExportsRunsListWithHttpInfoAsync(parentLookupBatchExportId, projectId, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all BatchExportRuns for a BatchExport.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedBatchExportRunList)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPaginatedBatchExportRunList>> BatchExportsRunsListWithHttpInfoAsync(string parentLookupBatchExportId, string projectId, string cursor = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupBatchExportId' is set
            if (parentLookupBatchExportId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupBatchExportId' when calling BatchExportsApi->BatchExportsRunsList");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsRunsList");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_batch_export_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupBatchExportId)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsRunsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPaginatedBatchExportRunList>("/api/projects/{project_id}/batch_exports/{parent_lookup_batch_export_id}/runs/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsRunsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="parentLookupRunId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogPaginatedBatchExportLogEntryList</returns>
        public PostHogPaginatedBatchExportLogEntryList BatchExportsRunsLogsList(string parentLookupBatchExportId, string parentLookupRunId, string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedBatchExportLogEntryList> localVarResponse = BatchExportsRunsLogsListWithHttpInfo(parentLookupBatchExportId, parentLookupRunId, projectId, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="parentLookupRunId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogPaginatedBatchExportLogEntryList</returns>
        public DotPostHog.Client.ApiResponse<PostHogPaginatedBatchExportLogEntryList> BatchExportsRunsLogsListWithHttpInfo(string parentLookupBatchExportId, string parentLookupRunId, string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupBatchExportId' is set
            if (parentLookupBatchExportId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupBatchExportId' when calling BatchExportsApi->BatchExportsRunsLogsList");
            }

            // verify the required parameter 'parentLookupRunId' is set
            if (parentLookupRunId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupRunId' when calling BatchExportsApi->BatchExportsRunsLogsList");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsRunsLogsList");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_batch_export_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupBatchExportId)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_run_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupRunId)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsRunsLogsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogPaginatedBatchExportLogEntryList>("/api/projects/{project_id}/batch_exports/{parent_lookup_batch_export_id}/runs/{parent_lookup_run_id}/logs/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsRunsLogsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="parentLookupRunId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogPaginatedBatchExportLogEntryList</returns>
        public async System.Threading.Tasks.Task<PostHogPaginatedBatchExportLogEntryList> BatchExportsRunsLogsListAsync(string parentLookupBatchExportId, string parentLookupRunId, string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogPaginatedBatchExportLogEntryList> localVarResponse = await BatchExportsRunsLogsListWithHttpInfoAsync(parentLookupBatchExportId, parentLookupRunId, projectId, limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="parentLookupRunId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogPaginatedBatchExportLogEntryList)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogPaginatedBatchExportLogEntryList>> BatchExportsRunsLogsListWithHttpInfoAsync(string parentLookupBatchExportId, string parentLookupRunId, string projectId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupBatchExportId' is set
            if (parentLookupBatchExportId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupBatchExportId' when calling BatchExportsApi->BatchExportsRunsLogsList");
            }

            // verify the required parameter 'parentLookupRunId' is set
            if (parentLookupRunId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupRunId' when calling BatchExportsApi->BatchExportsRunsLogsList");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsRunsLogsList");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parent_lookup_batch_export_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupBatchExportId)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_run_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupRunId)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotPostHog.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsRunsLogsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogPaginatedBatchExportLogEntryList>("/api/projects/{project_id}/batch_exports/{parent_lookup_batch_export_id}/runs/{parent_lookup_run_id}/logs/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsRunsLogsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export run.</param>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogBatchExportRun</returns>
        public PostHogBatchExportRun BatchExportsRunsRetrieve(Guid id, string parentLookupBatchExportId, string projectId, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogBatchExportRun> localVarResponse = BatchExportsRunsRetrieveWithHttpInfo(id, parentLookupBatchExportId, projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export run.</param>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogBatchExportRun</returns>
        public DotPostHog.Client.ApiResponse<PostHogBatchExportRun> BatchExportsRunsRetrieveWithHttpInfo(Guid id, string parentLookupBatchExportId, string projectId, int operationIndex = 0)
        {
            // verify the required parameter 'parentLookupBatchExportId' is set
            if (parentLookupBatchExportId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupBatchExportId' when calling BatchExportsApi->BatchExportsRunsRetrieve");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsRunsRetrieve");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_batch_export_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupBatchExportId)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsRunsRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostHogBatchExportRun>("/api/projects/{project_id}/batch_exports/{parent_lookup_batch_export_id}/runs/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsRunsRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export run.</param>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogBatchExportRun</returns>
        public async System.Threading.Tasks.Task<PostHogBatchExportRun> BatchExportsRunsRetrieveAsync(Guid id, string parentLookupBatchExportId, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogBatchExportRun> localVarResponse = await BatchExportsRunsRetrieveWithHttpInfoAsync(id, parentLookupBatchExportId, projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export run.</param>
        /// <param name="parentLookupBatchExportId"></param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogBatchExportRun)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogBatchExportRun>> BatchExportsRunsRetrieveWithHttpInfoAsync(Guid id, string parentLookupBatchExportId, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentLookupBatchExportId' is set
            if (parentLookupBatchExportId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'parentLookupBatchExportId' when calling BatchExportsApi->BatchExportsRunsRetrieve");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsRunsRetrieve");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("parent_lookup_batch_export_id", DotPostHog.Client.ClientUtils.ParameterToString(parentLookupBatchExportId)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsRunsRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostHogBatchExportRun>("/api/projects/{project_id}/batch_exports/{parent_lookup_batch_export_id}/runs/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsRunsRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Unpause a BatchExport.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogBatchExport</returns>
        public PostHogBatchExport BatchExportsUnpauseCreate(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogBatchExport> localVarResponse = BatchExportsUnpauseCreateWithHttpInfo(id, projectId, postHogBatchExport);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Unpause a BatchExport.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogBatchExport</returns>
        public DotPostHog.Client.ApiResponse<PostHogBatchExport> BatchExportsUnpauseCreateWithHttpInfo(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsUnpauseCreate");
            }

            // verify the required parameter 'postHogBatchExport' is set
            if (postHogBatchExport == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogBatchExport' when calling BatchExportsApi->BatchExportsUnpauseCreate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = postHogBatchExport;

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsUnpauseCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PostHogBatchExport>("/api/projects/{project_id}/batch_exports/{id}/unpause/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsUnpauseCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Unpause a BatchExport.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogBatchExport</returns>
        public async System.Threading.Tasks.Task<PostHogBatchExport> BatchExportsUnpauseCreateAsync(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogBatchExport> localVarResponse = await BatchExportsUnpauseCreateWithHttpInfoAsync(id, projectId, postHogBatchExport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Unpause a BatchExport.
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogBatchExport)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogBatchExport>> BatchExportsUnpauseCreateWithHttpInfoAsync(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsUnpauseCreate");
            }

            // verify the required parameter 'postHogBatchExport' is set
            if (postHogBatchExport == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogBatchExport' when calling BatchExportsApi->BatchExportsUnpauseCreate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = postHogBatchExport;

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsUnpauseCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostHogBatchExport>("/api/projects/{project_id}/batch_exports/{id}/unpause/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsUnpauseCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostHogBatchExport</returns>
        public PostHogBatchExport BatchExportsUpdate(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0)
        {
            DotPostHog.Client.ApiResponse<PostHogBatchExport> localVarResponse = BatchExportsUpdateWithHttpInfo(id, projectId, postHogBatchExport);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostHogBatchExport</returns>
        public DotPostHog.Client.ApiResponse<PostHogBatchExport> BatchExportsUpdateWithHttpInfo(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsUpdate");
            }

            // verify the required parameter 'postHogBatchExport' is set
            if (postHogBatchExport == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogBatchExport' when calling BatchExportsApi->BatchExportsUpdate");
            }

            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = postHogBatchExport;

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<PostHogBatchExport>("/api/projects/{project_id}/batch_exports/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostHogBatchExport</returns>
        public async System.Threading.Tasks.Task<PostHogBatchExport> BatchExportsUpdateAsync(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DotPostHog.Client.ApiResponse<PostHogBatchExport> localVarResponse = await BatchExportsUpdateWithHttpInfoAsync(id, projectId, postHogBatchExport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DotPostHog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this batch export.</param>
        /// <param name="projectId">Project ID of the project you&#39;re trying to access. To find the ID of the project, make a call to /api/projects/.</param>
        /// <param name="postHogBatchExport"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostHogBatchExport)</returns>
        public async System.Threading.Tasks.Task<DotPostHog.Client.ApiResponse<PostHogBatchExport>> BatchExportsUpdateWithHttpInfoAsync(Guid id, string projectId, PostHogBatchExport postHogBatchExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'projectId' when calling BatchExportsApi->BatchExportsUpdate");
            }

            // verify the required parameter 'postHogBatchExport' is set
            if (postHogBatchExport == null)
            {
                throw new DotPostHog.Client.ApiException(400, "Missing required parameter 'postHogBatchExport' when calling BatchExportsApi->BatchExportsUpdate");
            }


            DotPostHog.Client.RequestOptions localVarRequestOptions = new DotPostHog.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotPostHog.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DotPostHog.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DotPostHog.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", DotPostHog.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = postHogBatchExport;

            localVarRequestOptions.Operation = "BatchExportsApi.BatchExportsUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PostHogBatchExport>("/api/projects/{project_id}/batch_exports/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchExportsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
