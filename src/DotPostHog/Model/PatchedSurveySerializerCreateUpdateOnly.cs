/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// PatchedSurveySerializerCreateUpdateOnly
    /// </summary>
    [DataContract(Name = "PatchedSurveySerializerCreateUpdateOnly")]
    public partial class PatchedSurveySerializerCreateUpdateOnly : IEquatable<PatchedSurveySerializerCreateUpdateOnly>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Popover for value: popover
            /// </summary>
            [EnumMember(Value = "popover")]
            Popover = 1,

            /// <summary>
            /// Enum Button for value: button
            /// </summary>
            [EnumMember(Value = "button")]
            Button = 2,

            /// <summary>
            /// Enum Email for value: email
            /// </summary>
            [EnumMember(Value = "email")]
            Email = 3,

            /// <summary>
            /// Enum FullScreen for value: full_screen
            /// </summary>
            [EnumMember(Value = "full_screen")]
            FullScreen = 4,

            /// <summary>
            /// Enum Api for value: api
            /// </summary>
            [EnumMember(Value = "api")]
            Api = 5
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PatchedSurveySerializerCreateUpdateOnly" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="type">type.</param>
        /// <param name="linkedFlagId">linkedFlagId.</param>
        /// <param name="targetingFlagId">targetingFlagId.</param>
        /// <param name="targetingFlagFilters">targetingFlagFilters.</param>
        /// <param name="removeTargetingFlag">removeTargetingFlag.</param>
        /// <param name="questions">questions.</param>
        /// <param name="conditions">conditions.</param>
        /// <param name="appearance">appearance.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="archived">archived.</param>
        public PatchedSurveySerializerCreateUpdateOnly(string name = default(string), string description = default(string), TypeEnum? type = default(TypeEnum?), int? linkedFlagId = default(int?), int targetingFlagId = default(int), Dictionary<string, Object> targetingFlagFilters = default(Dictionary<string, Object>), bool? removeTargetingFlag = default(bool?), Dictionary<string, Object> questions = default(Dictionary<string, Object>), Dictionary<string, Object> conditions = default(Dictionary<string, Object>), Dictionary<string, Object> appearance = default(Dictionary<string, Object>), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), bool archived = default(bool))
        {
            this.Name = name;
            this.Description = description;
            this.Type = type;
            this.LinkedFlagId = linkedFlagId;
            this.TargetingFlagId = targetingFlagId;
            this.TargetingFlagFilters = targetingFlagFilters;
            this.RemoveTargetingFlag = removeTargetingFlag;
            this.Questions = questions;
            this.Conditions = conditions;
            this.Appearance = appearance;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.Archived = archived;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets LinkedFlag
        /// </summary>
        [DataMember(Name = "linked_flag", EmitDefaultValue = false)]
        public MinimalFeatureFlag LinkedFlag { get; private set; }

        /// <summary>
        /// Returns false as LinkedFlag should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLinkedFlag()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets LinkedFlagId
        /// </summary>
        [DataMember(Name = "linked_flag_id", EmitDefaultValue = true)]
        public int? LinkedFlagId { get; set; }

        /// <summary>
        /// Gets or Sets TargetingFlagId
        /// </summary>
        [DataMember(Name = "targeting_flag_id", EmitDefaultValue = false)]
        public int TargetingFlagId { get; set; }

        /// <summary>
        /// Gets or Sets TargetingFlag
        /// </summary>
        [DataMember(Name = "targeting_flag", EmitDefaultValue = false)]
        public MinimalFeatureFlag TargetingFlag { get; private set; }

        /// <summary>
        /// Returns false as TargetingFlag should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTargetingFlag()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets TargetingFlagFilters
        /// </summary>
        [DataMember(Name = "targeting_flag_filters", EmitDefaultValue = true)]
        public Dictionary<string, Object> TargetingFlagFilters { get; set; }

        /// <summary>
        /// Gets or Sets RemoveTargetingFlag
        /// </summary>
        [DataMember(Name = "remove_targeting_flag", EmitDefaultValue = true)]
        public bool? RemoveTargetingFlag { get; set; }

        /// <summary>
        /// Gets or Sets Questions
        /// </summary>
        [DataMember(Name = "questions", EmitDefaultValue = true)]
        public Dictionary<string, Object> Questions { get; set; }

        /// <summary>
        /// Gets or Sets Conditions
        /// </summary>
        [DataMember(Name = "conditions", EmitDefaultValue = true)]
        public Dictionary<string, Object> Conditions { get; set; }

        /// <summary>
        /// Gets or Sets Appearance
        /// </summary>
        [DataMember(Name = "appearance", EmitDefaultValue = true)]
        public Dictionary<string, Object> Appearance { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = false)]
        public UserBasic CreatedBy { get; private set; }

        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "start_date", EmitDefaultValue = true)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name = "end_date", EmitDefaultValue = true)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets Archived
        /// </summary>
        [DataMember(Name = "archived", EmitDefaultValue = true)]
        public bool Archived { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PatchedSurveySerializerCreateUpdateOnly {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  LinkedFlag: ").Append(LinkedFlag).Append("\n");
            sb.Append("  LinkedFlagId: ").Append(LinkedFlagId).Append("\n");
            sb.Append("  TargetingFlagId: ").Append(TargetingFlagId).Append("\n");
            sb.Append("  TargetingFlag: ").Append(TargetingFlag).Append("\n");
            sb.Append("  TargetingFlagFilters: ").Append(TargetingFlagFilters).Append("\n");
            sb.Append("  RemoveTargetingFlag: ").Append(RemoveTargetingFlag).Append("\n");
            sb.Append("  Questions: ").Append(Questions).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  Appearance: ").Append(Appearance).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PatchedSurveySerializerCreateUpdateOnly);
        }

        /// <summary>
        /// Returns true if PatchedSurveySerializerCreateUpdateOnly instances are equal
        /// </summary>
        /// <param name="input">Instance of PatchedSurveySerializerCreateUpdateOnly to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatchedSurveySerializerCreateUpdateOnly input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.LinkedFlag == input.LinkedFlag ||
                    (this.LinkedFlag != null &&
                    this.LinkedFlag.Equals(input.LinkedFlag))
                ) && 
                (
                    this.LinkedFlagId == input.LinkedFlagId ||
                    (this.LinkedFlagId != null &&
                    this.LinkedFlagId.Equals(input.LinkedFlagId))
                ) && 
                (
                    this.TargetingFlagId == input.TargetingFlagId ||
                    this.TargetingFlagId.Equals(input.TargetingFlagId)
                ) && 
                (
                    this.TargetingFlag == input.TargetingFlag ||
                    (this.TargetingFlag != null &&
                    this.TargetingFlag.Equals(input.TargetingFlag))
                ) && 
                (
                    this.TargetingFlagFilters == input.TargetingFlagFilters ||
                    this.TargetingFlagFilters != null &&
                    input.TargetingFlagFilters != null &&
                    this.TargetingFlagFilters.SequenceEqual(input.TargetingFlagFilters)
                ) && 
                (
                    this.RemoveTargetingFlag == input.RemoveTargetingFlag ||
                    (this.RemoveTargetingFlag != null &&
                    this.RemoveTargetingFlag.Equals(input.RemoveTargetingFlag))
                ) && 
                (
                    this.Questions == input.Questions ||
                    this.Questions != null &&
                    input.Questions != null &&
                    this.Questions.SequenceEqual(input.Questions)
                ) && 
                (
                    this.Conditions == input.Conditions ||
                    this.Conditions != null &&
                    input.Conditions != null &&
                    this.Conditions.SequenceEqual(input.Conditions)
                ) && 
                (
                    this.Appearance == input.Appearance ||
                    this.Appearance != null &&
                    input.Appearance != null &&
                    this.Appearance.SequenceEqual(input.Appearance)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Archived == input.Archived ||
                    this.Archived.Equals(input.Archived)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.LinkedFlag != null)
                {
                    hashCode = (hashCode * 59) + this.LinkedFlag.GetHashCode();
                }
                if (this.LinkedFlagId != null)
                {
                    hashCode = (hashCode * 59) + this.LinkedFlagId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TargetingFlagId.GetHashCode();
                if (this.TargetingFlag != null)
                {
                    hashCode = (hashCode * 59) + this.TargetingFlag.GetHashCode();
                }
                if (this.TargetingFlagFilters != null)
                {
                    hashCode = (hashCode * 59) + this.TargetingFlagFilters.GetHashCode();
                }
                if (this.RemoveTargetingFlag != null)
                {
                    hashCode = (hashCode * 59) + this.RemoveTargetingFlag.GetHashCode();
                }
                if (this.Questions != null)
                {
                    hashCode = (hashCode * 59) + this.Questions.GetHashCode();
                }
                if (this.Conditions != null)
                {
                    hashCode = (hashCode * 59) + this.Conditions.GetHashCode();
                }
                if (this.Appearance != null)
                {
                    hashCode = (hashCode * 59) + this.Appearance.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Archived.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 400)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 400.", new [] { "Name" });
            }

            yield break;
        }
    }

}
