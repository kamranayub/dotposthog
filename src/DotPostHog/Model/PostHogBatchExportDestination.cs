/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// Serializer for an BatchExportDestination model.
    /// </summary>
    [DataContract(Name = "BatchExportDestination")]
    public partial class PostHogBatchExportDestination : IEquatable<PostHogBatchExportDestination>, IValidatableObject
    {
        /// <summary>
        /// A choice of supported BatchExportDestination types.
        /// </summary>
        /// <value>A choice of supported BatchExportDestination types.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum S3 for value: S3
            /// </summary>
            [EnumMember(Value = "S3")]
            S3 = 1,

            /// <summary>
            /// Enum Snowflake for value: Snowflake
            /// </summary>
            [EnumMember(Value = "Snowflake")]
            Snowflake = 2,

            /// <summary>
            /// Enum Postgres for value: Postgres
            /// </summary>
            [EnumMember(Value = "Postgres")]
            Postgres = 3,

            /// <summary>
            /// Enum Redshift for value: Redshift
            /// </summary>
            [EnumMember(Value = "Redshift")]
            Redshift = 4,

            /// <summary>
            /// Enum BigQuery for value: BigQuery
            /// </summary>
            [EnumMember(Value = "BigQuery")]
            BigQuery = 5,

            /// <summary>
            /// Enum NoOp for value: NoOp
            /// </summary>
            [EnumMember(Value = "NoOp")]
            NoOp = 6
        }


        /// <summary>
        /// A choice of supported BatchExportDestination types.
        /// </summary>
        /// <value>A choice of supported BatchExportDestination types.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostHogBatchExportDestination" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostHogBatchExportDestination() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostHogBatchExportDestination" /> class.
        /// </summary>
        /// <param name="type">A choice of supported BatchExportDestination types. (required).</param>
        /// <param name="config">A JSON field to store all configuration parameters required to access a BatchExportDestination..</param>
        public PostHogBatchExportDestination(TypeEnum type = default(TypeEnum), Dictionary<string, Object> config = default(Dictionary<string, Object>))
        {
            this.Type = type;
            this.Config = config;
        }

        /// <summary>
        /// A JSON field to store all configuration parameters required to access a BatchExportDestination.
        /// </summary>
        /// <value>A JSON field to store all configuration parameters required to access a BatchExportDestination.</value>
        [DataMember(Name = "config", EmitDefaultValue = false)]
        public Dictionary<string, Object> Config { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostHogBatchExportDestination {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostHogBatchExportDestination);
        }

        /// <summary>
        /// Returns true if PostHogBatchExportDestination instances are equal
        /// </summary>
        /// <param name="input">Instance of PostHogBatchExportDestination to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostHogBatchExportDestination input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Config == input.Config ||
                    this.Config != null &&
                    input.Config != null &&
                    this.Config.SequenceEqual(input.Config)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Config != null)
                {
                    hashCode = (hashCode * 59) + this.Config.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
