/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// PropertyItem
    /// </summary>
    [DataContract(Name = "PropertyItem")]
    public partial class PropertyItem : IEquatable<PropertyItem>, IValidatableObject
    {
        /// <summary>
        /// Defines VarOperator
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatorEnum
        {
            /// <summary>
            /// Enum Exact for value: exact
            /// </summary>
            [EnumMember(Value = "exact")]
            Exact = 1,

            /// <summary>
            /// Enum IsNot for value: is_not
            /// </summary>
            [EnumMember(Value = "is_not")]
            IsNot = 2,

            /// <summary>
            /// Enum Icontains for value: icontains
            /// </summary>
            [EnumMember(Value = "icontains")]
            Icontains = 3,

            /// <summary>
            /// Enum NotIcontains for value: not_icontains
            /// </summary>
            [EnumMember(Value = "not_icontains")]
            NotIcontains = 4,

            /// <summary>
            /// Enum Regex for value: regex
            /// </summary>
            [EnumMember(Value = "regex")]
            Regex = 5,

            /// <summary>
            /// Enum NotRegex for value: not_regex
            /// </summary>
            [EnumMember(Value = "not_regex")]
            NotRegex = 6,

            /// <summary>
            /// Enum Gt for value: gt
            /// </summary>
            [EnumMember(Value = "gt")]
            Gt = 7,

            /// <summary>
            /// Enum Lt for value: lt
            /// </summary>
            [EnumMember(Value = "lt")]
            Lt = 8,

            /// <summary>
            /// Enum Gte for value: gte
            /// </summary>
            [EnumMember(Value = "gte")]
            Gte = 9,

            /// <summary>
            /// Enum Lte for value: lte
            /// </summary>
            [EnumMember(Value = "lte")]
            Lte = 10,

            /// <summary>
            /// Enum IsSet for value: is_set
            /// </summary>
            [EnumMember(Value = "is_set")]
            IsSet = 11,

            /// <summary>
            /// Enum IsNotSet for value: is_not_set
            /// </summary>
            [EnumMember(Value = "is_not_set")]
            IsNotSet = 12,

            /// <summary>
            /// Enum IsDateExact for value: is_date_exact
            /// </summary>
            [EnumMember(Value = "is_date_exact")]
            IsDateExact = 13,

            /// <summary>
            /// Enum IsDateAfter for value: is_date_after
            /// </summary>
            [EnumMember(Value = "is_date_after")]
            IsDateAfter = 14,

            /// <summary>
            /// Enum IsDateBefore for value: is_date_before
            /// </summary>
            [EnumMember(Value = "is_date_before")]
            IsDateBefore = 15,

            /// <summary>
            /// Enum IsRelativeDateAfter for value: is_relative_date_after
            /// </summary>
            [EnumMember(Value = "is_relative_date_after")]
            IsRelativeDateAfter = 16,

            /// <summary>
            /// Enum IsRelativeDateBefore for value: is_relative_date_before
            /// </summary>
            [EnumMember(Value = "is_relative_date_before")]
            IsRelativeDateBefore = 17,

            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 18,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 19
        }


        /// <summary>
        /// Gets or Sets VarOperator
        /// </summary>
        [DataMember(Name = "operator", EmitDefaultValue = true)]
        public OperatorEnum? VarOperator { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Event for value: event
            /// </summary>
            [EnumMember(Value = "event")]
            Event = 1,

            /// <summary>
            /// Enum Person for value: person
            /// </summary>
            [EnumMember(Value = "person")]
            Person = 2,

            /// <summary>
            /// Enum Cohort for value: cohort
            /// </summary>
            [EnumMember(Value = "cohort")]
            Cohort = 3,

            /// <summary>
            /// Enum Element for value: element
            /// </summary>
            [EnumMember(Value = "element")]
            Element = 4,

            /// <summary>
            /// Enum StaticCohort for value: static-cohort
            /// </summary>
            [EnumMember(Value = "static-cohort")]
            StaticCohort = 5,

            /// <summary>
            /// Enum PrecalculatedCohort for value: precalculated-cohort
            /// </summary>
            [EnumMember(Value = "precalculated-cohort")]
            PrecalculatedCohort = 6,

            /// <summary>
            /// Enum Group for value: group
            /// </summary>
            [EnumMember(Value = "group")]
            Group = 7,

            /// <summary>
            /// Enum Recording for value: recording
            /// </summary>
            [EnumMember(Value = "recording")]
            Recording = 8,

            /// <summary>
            /// Enum Behavioral for value: behavioral
            /// </summary>
            [EnumMember(Value = "behavioral")]
            Behavioral = 9,

            /// <summary>
            /// Enum Session for value: session
            /// </summary>
            [EnumMember(Value = "session")]
            Session = 10,

            /// <summary>
            /// Enum Hogql for value: hogql
            /// </summary>
            [EnumMember(Value = "hogql")]
            Hogql = 11,

            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 12
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PropertyItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyItem" /> class.
        /// </summary>
        /// <param name="key">Key of the property you&#39;re filtering on. For example &#x60;email&#x60; or &#x60;$current_url&#x60; (required).</param>
        /// <param name="value">Value of your filter. For example &#x60;test@example.com&#x60; or &#x60;https://example.com/test/&#x60;. Can be an array for an OR query, like &#x60;[\&quot;test@example.com\&quot;,\&quot;ok@example.com\&quot;]&#x60; (required).</param>
        /// <param name="varOperator">varOperator (default to OperatorEnum.Exact).</param>
        /// <param name="type">type (default to TypeEnum.Event).</param>
        public PropertyItem(string key = default(string), string value = default(string), OperatorEnum? varOperator = OperatorEnum.Exact, TypeEnum? type = TypeEnum.Event)
        {
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new ArgumentNullException("key is a required property for PropertyItem and cannot be null");
            }
            this.Key = key;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for PropertyItem and cannot be null");
            }
            this.Value = value;
            this.VarOperator = varOperator;
            this.Type = type;
        }

        /// <summary>
        /// Key of the property you&#39;re filtering on. For example &#x60;email&#x60; or &#x60;$current_url&#x60;
        /// </summary>
        /// <value>Key of the property you&#39;re filtering on. For example &#x60;email&#x60; or &#x60;$current_url&#x60;</value>
        [DataMember(Name = "key", IsRequired = true, EmitDefaultValue = true)]
        public string Key { get; set; }

        /// <summary>
        /// Value of your filter. For example &#x60;test@example.com&#x60; or &#x60;https://example.com/test/&#x60;. Can be an array for an OR query, like &#x60;[\&quot;test@example.com\&quot;,\&quot;ok@example.com\&quot;]&#x60;
        /// </summary>
        /// <value>Value of your filter. For example &#x60;test@example.com&#x60; or &#x60;https://example.com/test/&#x60;. Can be an array for an OR query, like &#x60;[\&quot;test@example.com\&quot;,\&quot;ok@example.com\&quot;]&#x60;</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PropertyItem {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  VarOperator: ").Append(VarOperator).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertyItem);
        }

        /// <summary>
        /// Returns true if PropertyItem instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertyItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertyItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.VarOperator == input.VarOperator ||
                    this.VarOperator.Equals(input.VarOperator)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VarOperator.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
