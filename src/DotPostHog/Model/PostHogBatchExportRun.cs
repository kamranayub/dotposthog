/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// Serializer for a BatchExportRun model.
    /// </summary>
    [DataContract(Name = "BatchExportRun")]
    public partial class PostHogBatchExportRun : IEquatable<PostHogBatchExportRun>, IValidatableObject
    {
        /// <summary>
        /// The status of this run.
        /// </summary>
        /// <value>The status of this run.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Cancelled for value: Cancelled
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            Cancelled = 1,

            /// <summary>
            /// Enum Completed for value: Completed
            /// </summary>
            [EnumMember(Value = "Completed")]
            Completed = 2,

            /// <summary>
            /// Enum ContinuedAsNew for value: ContinuedAsNew
            /// </summary>
            [EnumMember(Value = "ContinuedAsNew")]
            ContinuedAsNew = 3,

            /// <summary>
            /// Enum Failed for value: Failed
            /// </summary>
            [EnumMember(Value = "Failed")]
            Failed = 4,

            /// <summary>
            /// Enum Terminated for value: Terminated
            /// </summary>
            [EnumMember(Value = "Terminated")]
            Terminated = 5,

            /// <summary>
            /// Enum TimedOut for value: TimedOut
            /// </summary>
            [EnumMember(Value = "TimedOut")]
            TimedOut = 6,

            /// <summary>
            /// Enum Running for value: Running
            /// </summary>
            [EnumMember(Value = "Running")]
            Running = 7,

            /// <summary>
            /// Enum Starting for value: Starting
            /// </summary>
            [EnumMember(Value = "Starting")]
            Starting = 8
        }


        /// <summary>
        /// The status of this run.
        /// </summary>
        /// <value>The status of this run.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostHogBatchExportRun" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostHogBatchExportRun() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostHogBatchExportRun" /> class.
        /// </summary>
        /// <param name="status">The status of this run. (required).</param>
        /// <param name="recordsCompleted">The number of records that have been exported..</param>
        /// <param name="latestError">The latest error that occurred during this run..</param>
        /// <param name="dataIntervalStart">The start of the data interval. (required).</param>
        /// <param name="dataIntervalEnd">The end of the data interval. (required).</param>
        /// <param name="cursor">An opaque cursor that may be used to resume..</param>
        /// <param name="finishedAt">The timestamp at which this BatchExportRun finished, successfully or not..</param>
        public PostHogBatchExportRun(StatusEnum status = default(StatusEnum), int? recordsCompleted = default(int?), string latestError = default(string), DateTime dataIntervalStart = default(DateTime), DateTime dataIntervalEnd = default(DateTime), string cursor = default(string), DateTime? finishedAt = default(DateTime?))
        {
            this.Status = status;
            this.DataIntervalStart = dataIntervalStart;
            this.DataIntervalEnd = dataIntervalEnd;
            this.RecordsCompleted = recordsCompleted;
            this.LatestError = latestError;
            this.Cursor = cursor;
            this.FinishedAt = finishedAt;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// The number of records that have been exported.
        /// </summary>
        /// <value>The number of records that have been exported.</value>
        [DataMember(Name = "records_completed", EmitDefaultValue = true)]
        public int? RecordsCompleted { get; set; }

        /// <summary>
        /// The latest error that occurred during this run.
        /// </summary>
        /// <value>The latest error that occurred during this run.</value>
        [DataMember(Name = "latest_error", EmitDefaultValue = true)]
        public string LatestError { get; set; }

        /// <summary>
        /// The start of the data interval.
        /// </summary>
        /// <value>The start of the data interval.</value>
        [DataMember(Name = "data_interval_start", IsRequired = true, EmitDefaultValue = true)]
        public DateTime DataIntervalStart { get; set; }

        /// <summary>
        /// The end of the data interval.
        /// </summary>
        /// <value>The end of the data interval.</value>
        [DataMember(Name = "data_interval_end", IsRequired = true, EmitDefaultValue = true)]
        public DateTime DataIntervalEnd { get; set; }

        /// <summary>
        /// An opaque cursor that may be used to resume.
        /// </summary>
        /// <value>An opaque cursor that may be used to resume.</value>
        [DataMember(Name = "cursor", EmitDefaultValue = true)]
        public string Cursor { get; set; }

        /// <summary>
        /// The timestamp at which this BatchExportRun was created.
        /// </summary>
        /// <value>The timestamp at which this BatchExportRun was created.</value>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// The timestamp at which this BatchExportRun finished, successfully or not.
        /// </summary>
        /// <value>The timestamp at which this BatchExportRun finished, successfully or not.</value>
        [DataMember(Name = "finished_at", EmitDefaultValue = true)]
        public DateTime? FinishedAt { get; set; }

        /// <summary>
        /// The timestamp at which this BatchExportRun was last updated.
        /// </summary>
        /// <value>The timestamp at which this BatchExportRun was last updated.</value>
        [DataMember(Name = "last_updated_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime LastUpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as LastUpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// The BatchExport this run belongs to.
        /// </summary>
        /// <value>The BatchExport this run belongs to.</value>
        [DataMember(Name = "batch_export", IsRequired = true, EmitDefaultValue = true)]
        public Guid BatchExport { get; private set; }

        /// <summary>
        /// Returns false as BatchExport should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBatchExport()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostHogBatchExportRun {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  RecordsCompleted: ").Append(RecordsCompleted).Append("\n");
            sb.Append("  LatestError: ").Append(LatestError).Append("\n");
            sb.Append("  DataIntervalStart: ").Append(DataIntervalStart).Append("\n");
            sb.Append("  DataIntervalEnd: ").Append(DataIntervalEnd).Append("\n");
            sb.Append("  Cursor: ").Append(Cursor).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  LastUpdatedAt: ").Append(LastUpdatedAt).Append("\n");
            sb.Append("  BatchExport: ").Append(BatchExport).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostHogBatchExportRun);
        }

        /// <summary>
        /// Returns true if PostHogBatchExportRun instances are equal
        /// </summary>
        /// <param name="input">Instance of PostHogBatchExportRun to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostHogBatchExportRun input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.RecordsCompleted == input.RecordsCompleted ||
                    (this.RecordsCompleted != null &&
                    this.RecordsCompleted.Equals(input.RecordsCompleted))
                ) && 
                (
                    this.LatestError == input.LatestError ||
                    (this.LatestError != null &&
                    this.LatestError.Equals(input.LatestError))
                ) && 
                (
                    this.DataIntervalStart == input.DataIntervalStart ||
                    (this.DataIntervalStart != null &&
                    this.DataIntervalStart.Equals(input.DataIntervalStart))
                ) && 
                (
                    this.DataIntervalEnd == input.DataIntervalEnd ||
                    (this.DataIntervalEnd != null &&
                    this.DataIntervalEnd.Equals(input.DataIntervalEnd))
                ) && 
                (
                    this.Cursor == input.Cursor ||
                    (this.Cursor != null &&
                    this.Cursor.Equals(input.Cursor))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.FinishedAt == input.FinishedAt ||
                    (this.FinishedAt != null &&
                    this.FinishedAt.Equals(input.FinishedAt))
                ) && 
                (
                    this.LastUpdatedAt == input.LastUpdatedAt ||
                    (this.LastUpdatedAt != null &&
                    this.LastUpdatedAt.Equals(input.LastUpdatedAt))
                ) && 
                (
                    this.BatchExport == input.BatchExport ||
                    (this.BatchExport != null &&
                    this.BatchExport.Equals(input.BatchExport))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.RecordsCompleted != null)
                {
                    hashCode = (hashCode * 59) + this.RecordsCompleted.GetHashCode();
                }
                if (this.LatestError != null)
                {
                    hashCode = (hashCode * 59) + this.LatestError.GetHashCode();
                }
                if (this.DataIntervalStart != null)
                {
                    hashCode = (hashCode * 59) + this.DataIntervalStart.GetHashCode();
                }
                if (this.DataIntervalEnd != null)
                {
                    hashCode = (hashCode * 59) + this.DataIntervalEnd.GetHashCode();
                }
                if (this.Cursor != null)
                {
                    hashCode = (hashCode * 59) + this.Cursor.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.FinishedAt != null)
                {
                    hashCode = (hashCode * 59) + this.FinishedAt.GetHashCode();
                }
                if (this.LastUpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdatedAt.GetHashCode();
                }
                if (this.BatchExport != null)
                {
                    hashCode = (hashCode * 59) + this.BatchExport.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RecordsCompleted (int?) maximum
            if (this.RecordsCompleted > (int?)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RecordsCompleted, must be a value less than or equal to 2147483647.", new [] { "RecordsCompleted" });
            }

            // RecordsCompleted (int?) minimum
            if (this.RecordsCompleted < (int?)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RecordsCompleted, must be a value greater than or equal to -2147483648.", new [] { "RecordsCompleted" });
            }

            yield break;
        }
    }

}
