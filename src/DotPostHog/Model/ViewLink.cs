/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// ViewLink
    /// </summary>
    [DataContract(Name = "ViewLink")]
    public partial class ViewLink : IEquatable<ViewLink>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ViewLink" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ViewLink() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ViewLink" /> class.
        /// </summary>
        /// <param name="deleted">deleted.</param>
        /// <param name="table">table (required).</param>
        /// <param name="savedQueryId">savedQueryId (required).</param>
        /// <param name="toJoinKey">toJoinKey (required).</param>
        /// <param name="fromJoinKey">fromJoinKey (required).</param>
        public ViewLink(bool? deleted = default(bool?), string table = default(string), Guid savedQueryId = default(Guid), string toJoinKey = default(string), string fromJoinKey = default(string))
        {
            // to ensure "table" is required (not null)
            if (table == null)
            {
                throw new ArgumentNullException("table is a required property for ViewLink and cannot be null");
            }
            this.Table = table;
            this.SavedQueryId = savedQueryId;
            // to ensure "toJoinKey" is required (not null)
            if (toJoinKey == null)
            {
                throw new ArgumentNullException("toJoinKey is a required property for ViewLink and cannot be null");
            }
            this.ToJoinKey = toJoinKey;
            // to ensure "fromJoinKey" is required (not null)
            if (fromJoinKey == null)
            {
                throw new ArgumentNullException("fromJoinKey is a required property for ViewLink and cannot be null");
            }
            this.FromJoinKey = fromJoinKey;
            this.Deleted = deleted;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Deleted
        /// </summary>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool? Deleted { get; set; }

        /// <summary>
        /// Gets or Sets Table
        /// </summary>
        [DataMember(Name = "table", IsRequired = true, EmitDefaultValue = true)]
        public string Table { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", IsRequired = true, EmitDefaultValue = true)]
        public UserBasic CreatedBy { get; private set; }

        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets SavedQueryId
        /// </summary>
        [DataMember(Name = "saved_query_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid SavedQueryId { get; set; }

        /// <summary>
        /// Gets or Sets SavedQuery
        /// </summary>
        [DataMember(Name = "saved_query", IsRequired = true, EmitDefaultValue = true)]
        public Guid SavedQuery { get; private set; }

        /// <summary>
        /// Returns false as SavedQuery should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSavedQuery()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ToJoinKey
        /// </summary>
        [DataMember(Name = "to_join_key", IsRequired = true, EmitDefaultValue = true)]
        public string ToJoinKey { get; set; }

        /// <summary>
        /// Gets or Sets FromJoinKey
        /// </summary>
        [DataMember(Name = "from_join_key", IsRequired = true, EmitDefaultValue = true)]
        public string FromJoinKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ViewLink {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  Table: ").Append(Table).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  SavedQueryId: ").Append(SavedQueryId).Append("\n");
            sb.Append("  SavedQuery: ").Append(SavedQuery).Append("\n");
            sb.Append("  ToJoinKey: ").Append(ToJoinKey).Append("\n");
            sb.Append("  FromJoinKey: ").Append(FromJoinKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ViewLink);
        }

        /// <summary>
        /// Returns true if ViewLink instances are equal
        /// </summary>
        /// <param name="input">Instance of ViewLink to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ViewLink input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    (this.Deleted != null &&
                    this.Deleted.Equals(input.Deleted))
                ) && 
                (
                    this.Table == input.Table ||
                    (this.Table != null &&
                    this.Table.Equals(input.Table))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.SavedQueryId == input.SavedQueryId ||
                    (this.SavedQueryId != null &&
                    this.SavedQueryId.Equals(input.SavedQueryId))
                ) && 
                (
                    this.SavedQuery == input.SavedQuery ||
                    (this.SavedQuery != null &&
                    this.SavedQuery.Equals(input.SavedQuery))
                ) && 
                (
                    this.ToJoinKey == input.ToJoinKey ||
                    (this.ToJoinKey != null &&
                    this.ToJoinKey.Equals(input.ToJoinKey))
                ) && 
                (
                    this.FromJoinKey == input.FromJoinKey ||
                    (this.FromJoinKey != null &&
                    this.FromJoinKey.Equals(input.FromJoinKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Deleted != null)
                {
                    hashCode = (hashCode * 59) + this.Deleted.GetHashCode();
                }
                if (this.Table != null)
                {
                    hashCode = (hashCode * 59) + this.Table.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.SavedQueryId != null)
                {
                    hashCode = (hashCode * 59) + this.SavedQueryId.GetHashCode();
                }
                if (this.SavedQuery != null)
                {
                    hashCode = (hashCode * 59) + this.SavedQuery.GetHashCode();
                }
                if (this.ToJoinKey != null)
                {
                    hashCode = (hashCode * 59) + this.ToJoinKey.GetHashCode();
                }
                if (this.FromJoinKey != null)
                {
                    hashCode = (hashCode * 59) + this.FromJoinKey.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Table (string) maxLength
            if (this.Table != null && this.Table.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Table, length must be less than 128.", new [] { "Table" });
            }

            // ToJoinKey (string) maxLength
            if (this.ToJoinKey != null && this.ToJoinKey.Length > 400)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ToJoinKey, length must be less than 400.", new [] { "ToJoinKey" });
            }

            // FromJoinKey (string) maxLength
            if (this.FromJoinKey != null && this.FromJoinKey.Length > 400)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FromJoinKey, length must be less than 400.", new [] { "FromJoinKey" });
            }

            yield break;
        }
    }

}
