/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// Standard ExportedAsset serializer that doesn&#39;t return content.
    /// </summary>
    [DataContract(Name = "ExportedAsset")]
    public partial class PostHogExportedAsset : IEquatable<PostHogExportedAsset>, IValidatableObject
    {
        /// <summary>
        /// Defines ExportFormat
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExportFormatEnum
        {
            /// <summary>
            /// Enum ImagePng for value: image/png
            /// </summary>
            [EnumMember(Value = "image/png")]
            ImagePng = 1,

            /// <summary>
            /// Enum ApplicationPdf for value: application/pdf
            /// </summary>
            [EnumMember(Value = "application/pdf")]
            ApplicationPdf = 2,

            /// <summary>
            /// Enum TextCsv for value: text/csv
            /// </summary>
            [EnumMember(Value = "text/csv")]
            TextCsv = 3
        }


        /// <summary>
        /// Gets or Sets ExportFormat
        /// </summary>
        [DataMember(Name = "export_format", IsRequired = true, EmitDefaultValue = true)]
        public ExportFormatEnum ExportFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostHogExportedAsset" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostHogExportedAsset() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostHogExportedAsset" /> class.
        /// </summary>
        /// <param name="dashboard">dashboard.</param>
        /// <param name="insight">insight.</param>
        /// <param name="exportFormat">exportFormat (required).</param>
        /// <param name="exportContext">exportContext.</param>
        /// <param name="expiresAfter">expiresAfter.</param>
        public PostHogExportedAsset(int? dashboard = default(int?), int? insight = default(int?), ExportFormatEnum exportFormat = default(ExportFormatEnum), Dictionary<string, Object> exportContext = default(Dictionary<string, Object>), DateTime? expiresAfter = default(DateTime?))
        {
            this.ExportFormat = exportFormat;
            this.Dashboard = dashboard;
            this.Insight = insight;
            this.ExportContext = exportContext;
            this.ExpiresAfter = expiresAfter;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Dashboard
        /// </summary>
        [DataMember(Name = "dashboard", EmitDefaultValue = true)]
        public int? Dashboard { get; set; }

        /// <summary>
        /// Gets or Sets Insight
        /// </summary>
        [DataMember(Name = "insight", EmitDefaultValue = true)]
        public int? Insight { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets HasContent
        /// </summary>
        [DataMember(Name = "has_content", IsRequired = true, EmitDefaultValue = true)]
        public string HasContent { get; private set; }

        /// <summary>
        /// Returns false as HasContent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHasContent()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ExportContext
        /// </summary>
        [DataMember(Name = "export_context", EmitDefaultValue = true)]
        public Dictionary<string, Object> ExportContext { get; set; }

        /// <summary>
        /// Gets or Sets Filename
        /// </summary>
        [DataMember(Name = "filename", IsRequired = true, EmitDefaultValue = true)]
        public string Filename { get; private set; }

        /// <summary>
        /// Returns false as Filename should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFilename()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ExpiresAfter
        /// </summary>
        [DataMember(Name = "expires_after", EmitDefaultValue = true)]
        public DateTime? ExpiresAfter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostHogExportedAsset {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Dashboard: ").Append(Dashboard).Append("\n");
            sb.Append("  Insight: ").Append(Insight).Append("\n");
            sb.Append("  ExportFormat: ").Append(ExportFormat).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  HasContent: ").Append(HasContent).Append("\n");
            sb.Append("  ExportContext: ").Append(ExportContext).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  ExpiresAfter: ").Append(ExpiresAfter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostHogExportedAsset);
        }

        /// <summary>
        /// Returns true if PostHogExportedAsset instances are equal
        /// </summary>
        /// <param name="input">Instance of PostHogExportedAsset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostHogExportedAsset input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Dashboard == input.Dashboard ||
                    (this.Dashboard != null &&
                    this.Dashboard.Equals(input.Dashboard))
                ) && 
                (
                    this.Insight == input.Insight ||
                    (this.Insight != null &&
                    this.Insight.Equals(input.Insight))
                ) && 
                (
                    this.ExportFormat == input.ExportFormat ||
                    this.ExportFormat.Equals(input.ExportFormat)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.HasContent == input.HasContent ||
                    (this.HasContent != null &&
                    this.HasContent.Equals(input.HasContent))
                ) && 
                (
                    this.ExportContext == input.ExportContext ||
                    this.ExportContext != null &&
                    input.ExportContext != null &&
                    this.ExportContext.SequenceEqual(input.ExportContext)
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.ExpiresAfter == input.ExpiresAfter ||
                    (this.ExpiresAfter != null &&
                    this.ExpiresAfter.Equals(input.ExpiresAfter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Dashboard != null)
                {
                    hashCode = (hashCode * 59) + this.Dashboard.GetHashCode();
                }
                if (this.Insight != null)
                {
                    hashCode = (hashCode * 59) + this.Insight.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExportFormat.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.HasContent != null)
                {
                    hashCode = (hashCode * 59) + this.HasContent.GetHashCode();
                }
                if (this.ExportContext != null)
                {
                    hashCode = (hashCode * 59) + this.ExportContext.GetHashCode();
                }
                if (this.Filename != null)
                {
                    hashCode = (hashCode * 59) + this.Filename.GetHashCode();
                }
                if (this.ExpiresAfter != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiresAfter.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
