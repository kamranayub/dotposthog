/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// FunnelStepsResult
    /// </summary>
    [DataContract(Name = "FunnelStepsResult")]
    public partial class FunnelStepsResult : IEquatable<FunnelStepsResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FunnelStepsResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FunnelStepsResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FunnelStepsResult" /> class.
        /// </summary>
        /// <param name="count">Number of people in this step. (required).</param>
        /// <param name="actionId">Corresponds to the &#x60;id&#x60; of the entities passed through to &#x60;events&#x60; or &#x60;actions&#x60;. (required).</param>
        /// <param name="averageConversionTime">Average conversion time of person or groups between steps. &#x60;null&#x60; for the first step. (required).</param>
        /// <param name="medianConversionTime">Median conversion time of person or groups between steps. &#x60;null&#x60; for the first step. (required).</param>
        /// <param name="convertedPeopleUrl">Path of a URL to get a list of people that converted after this step. In this format: &#x60;/api/person/funnel?...&#x60; (required).</param>
        /// <param name="droppedPeopleUrl">Path of a URL to get a list of people that dropped after this step. In this format: &#x60;/api/person/funnel?...&#x60; (required).</param>
        /// <param name="order">Order of this step in the funnel. The API should return the steps in order anyway. (required).</param>
        public FunnelStepsResult(int count = default(int), string actionId = default(string), double averageConversionTime = default(double), double medianConversionTime = default(double), string convertedPeopleUrl = default(string), string droppedPeopleUrl = default(string), string order = default(string))
        {
            this.Count = count;
            // to ensure "actionId" is required (not null)
            if (actionId == null)
            {
                throw new ArgumentNullException("actionId is a required property for FunnelStepsResult and cannot be null");
            }
            this.ActionId = actionId;
            this.AverageConversionTime = averageConversionTime;
            this.MedianConversionTime = medianConversionTime;
            // to ensure "convertedPeopleUrl" is required (not null)
            if (convertedPeopleUrl == null)
            {
                throw new ArgumentNullException("convertedPeopleUrl is a required property for FunnelStepsResult and cannot be null");
            }
            this.ConvertedPeopleUrl = convertedPeopleUrl;
            // to ensure "droppedPeopleUrl" is required (not null)
            if (droppedPeopleUrl == null)
            {
                throw new ArgumentNullException("droppedPeopleUrl is a required property for FunnelStepsResult and cannot be null");
            }
            this.DroppedPeopleUrl = droppedPeopleUrl;
            // to ensure "order" is required (not null)
            if (order == null)
            {
                throw new ArgumentNullException("order is a required property for FunnelStepsResult and cannot be null");
            }
            this.Order = order;
        }

        /// <summary>
        /// Number of people in this step.
        /// </summary>
        /// <value>Number of people in this step.</value>
        [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = true)]
        public int Count { get; set; }

        /// <summary>
        /// Corresponds to the &#x60;id&#x60; of the entities passed through to &#x60;events&#x60; or &#x60;actions&#x60;.
        /// </summary>
        /// <value>Corresponds to the &#x60;id&#x60; of the entities passed through to &#x60;events&#x60; or &#x60;actions&#x60;.</value>
        [DataMember(Name = "action_id", IsRequired = true, EmitDefaultValue = true)]
        public string ActionId { get; set; }

        /// <summary>
        /// Average conversion time of person or groups between steps. &#x60;null&#x60; for the first step.
        /// </summary>
        /// <value>Average conversion time of person or groups between steps. &#x60;null&#x60; for the first step.</value>
        [DataMember(Name = "average_conversion_time", IsRequired = true, EmitDefaultValue = true)]
        public double AverageConversionTime { get; set; }

        /// <summary>
        /// Median conversion time of person or groups between steps. &#x60;null&#x60; for the first step.
        /// </summary>
        /// <value>Median conversion time of person or groups between steps. &#x60;null&#x60; for the first step.</value>
        [DataMember(Name = "median_conversion_time", IsRequired = true, EmitDefaultValue = true)]
        public double MedianConversionTime { get; set; }

        /// <summary>
        /// Path of a URL to get a list of people that converted after this step. In this format: &#x60;/api/person/funnel?...&#x60;
        /// </summary>
        /// <value>Path of a URL to get a list of people that converted after this step. In this format: &#x60;/api/person/funnel?...&#x60;</value>
        [DataMember(Name = "converted_people_url", IsRequired = true, EmitDefaultValue = true)]
        public string ConvertedPeopleUrl { get; set; }

        /// <summary>
        /// Path of a URL to get a list of people that dropped after this step. In this format: &#x60;/api/person/funnel?...&#x60;
        /// </summary>
        /// <value>Path of a URL to get a list of people that dropped after this step. In this format: &#x60;/api/person/funnel?...&#x60;</value>
        [DataMember(Name = "dropped_people_url", IsRequired = true, EmitDefaultValue = true)]
        public string DroppedPeopleUrl { get; set; }

        /// <summary>
        /// Order of this step in the funnel. The API should return the steps in order anyway.
        /// </summary>
        /// <value>Order of this step in the funnel. The API should return the steps in order anyway.</value>
        [DataMember(Name = "order", IsRequired = true, EmitDefaultValue = true)]
        public string Order { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FunnelStepsResult {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  ActionId: ").Append(ActionId).Append("\n");
            sb.Append("  AverageConversionTime: ").Append(AverageConversionTime).Append("\n");
            sb.Append("  MedianConversionTime: ").Append(MedianConversionTime).Append("\n");
            sb.Append("  ConvertedPeopleUrl: ").Append(ConvertedPeopleUrl).Append("\n");
            sb.Append("  DroppedPeopleUrl: ").Append(DroppedPeopleUrl).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FunnelStepsResult);
        }

        /// <summary>
        /// Returns true if FunnelStepsResult instances are equal
        /// </summary>
        /// <param name="input">Instance of FunnelStepsResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FunnelStepsResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.ActionId == input.ActionId ||
                    (this.ActionId != null &&
                    this.ActionId.Equals(input.ActionId))
                ) && 
                (
                    this.AverageConversionTime == input.AverageConversionTime ||
                    this.AverageConversionTime.Equals(input.AverageConversionTime)
                ) && 
                (
                    this.MedianConversionTime == input.MedianConversionTime ||
                    this.MedianConversionTime.Equals(input.MedianConversionTime)
                ) && 
                (
                    this.ConvertedPeopleUrl == input.ConvertedPeopleUrl ||
                    (this.ConvertedPeopleUrl != null &&
                    this.ConvertedPeopleUrl.Equals(input.ConvertedPeopleUrl))
                ) && 
                (
                    this.DroppedPeopleUrl == input.DroppedPeopleUrl ||
                    (this.DroppedPeopleUrl != null &&
                    this.DroppedPeopleUrl.Equals(input.DroppedPeopleUrl))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.ActionId != null)
                {
                    hashCode = (hashCode * 59) + this.ActionId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AverageConversionTime.GetHashCode();
                hashCode = (hashCode * 59) + this.MedianConversionTime.GetHashCode();
                if (this.ConvertedPeopleUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ConvertedPeopleUrl.GetHashCode();
                }
                if (this.DroppedPeopleUrl != null)
                {
                    hashCode = (hashCode * 59) + this.DroppedPeopleUrl.GetHashCode();
                }
                if (this.Order != null)
                {
                    hashCode = (hashCode * 59) + this.Order.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
