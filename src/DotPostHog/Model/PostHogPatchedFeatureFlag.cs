/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// Serializer mixin that resolves appropriate response for tags depending on license.
    /// </summary>
    [DataContract(Name = "PatchedFeatureFlag")]
    public partial class PostHogPatchedFeatureFlag : IEquatable<PostHogPatchedFeatureFlag>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostHogPatchedFeatureFlag" /> class.
        /// </summary>
        /// <param name="name">contains the description for the flag (field name &#x60;name&#x60; is kept for backwards-compatibility).</param>
        /// <param name="key">key.</param>
        /// <param name="filters">filters.</param>
        /// <param name="deleted">deleted.</param>
        /// <param name="active">active.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="ensureExperienceContinuity">ensureExperienceContinuity.</param>
        /// <param name="rollbackConditions">rollbackConditions.</param>
        /// <param name="performedRollback">performedRollback.</param>
        /// <param name="tags">tags.</param>
        /// <param name="analyticsDashboards">analyticsDashboards.</param>
        /// <param name="hasEnrichedAnalytics">hasEnrichedAnalytics.</param>
        public PostHogPatchedFeatureFlag(string name = default(string), string key = default(string), Dictionary<string, Object> filters = default(Dictionary<string, Object>), bool deleted = default(bool), bool active = default(bool), DateTime createdAt = default(DateTime), bool? ensureExperienceContinuity = default(bool?), Dictionary<string, Object> rollbackConditions = default(Dictionary<string, Object>), bool? performedRollback = default(bool?), List<Object> tags = default(List<Object>), List<int> analyticsDashboards = default(List<int>), bool? hasEnrichedAnalytics = default(bool?))
        {
            this.Name = name;
            this.Key = key;
            this.Filters = filters;
            this.Deleted = deleted;
            this.Active = active;
            this.CreatedAt = createdAt;
            this.EnsureExperienceContinuity = ensureExperienceContinuity;
            this.RollbackConditions = rollbackConditions;
            this.PerformedRollback = performedRollback;
            this.Tags = tags;
            this.AnalyticsDashboards = analyticsDashboards;
            this.HasEnrichedAnalytics = hasEnrichedAnalytics;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// contains the description for the flag (field name &#x60;name&#x60; is kept for backwards-compatibility)
        /// </summary>
        /// <value>contains the description for the flag (field name &#x60;name&#x60; is kept for backwards-compatibility)</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Filters
        /// </summary>
        [DataMember(Name = "filters", EmitDefaultValue = false)]
        public Dictionary<string, Object> Filters { get; set; }

        /// <summary>
        /// Gets or Sets Deleted
        /// </summary>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool Deleted { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = false)]
        public PostHogUserBasic CreatedBy { get; private set; }

        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets IsSimpleFlag
        /// </summary>
        [DataMember(Name = "is_simple_flag", EmitDefaultValue = true)]
        public bool IsSimpleFlag { get; private set; }

        /// <summary>
        /// Returns false as IsSimpleFlag should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsSimpleFlag()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets RolloutPercentage
        /// </summary>
        [DataMember(Name = "rollout_percentage", EmitDefaultValue = true)]
        public int? RolloutPercentage { get; private set; }

        /// <summary>
        /// Returns false as RolloutPercentage should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRolloutPercentage()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets EnsureExperienceContinuity
        /// </summary>
        [DataMember(Name = "ensure_experience_continuity", EmitDefaultValue = true)]
        public bool? EnsureExperienceContinuity { get; set; }

        /// <summary>
        /// Gets or Sets ExperimentSet
        /// </summary>
        [DataMember(Name = "experiment_set", EmitDefaultValue = false)]
        public List<int> ExperimentSet { get; private set; }

        /// <summary>
        /// Returns false as ExperimentSet should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExperimentSet()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Surveys
        /// </summary>
        [DataMember(Name = "surveys", EmitDefaultValue = false)]
        public Dictionary<string, Object> Surveys { get; private set; }

        /// <summary>
        /// Returns false as Surveys should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSurveys()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name = "features", EmitDefaultValue = false)]
        public Dictionary<string, Object> Features { get; private set; }

        /// <summary>
        /// Returns false as Features should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFeatures()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets RollbackConditions
        /// </summary>
        [DataMember(Name = "rollback_conditions", EmitDefaultValue = true)]
        public Dictionary<string, Object> RollbackConditions { get; set; }

        /// <summary>
        /// Gets or Sets PerformedRollback
        /// </summary>
        [DataMember(Name = "performed_rollback", EmitDefaultValue = true)]
        public bool? PerformedRollback { get; set; }

        /// <summary>
        /// Gets or Sets CanEdit
        /// </summary>
        [DataMember(Name = "can_edit", EmitDefaultValue = true)]
        public bool CanEdit { get; private set; }

        /// <summary>
        /// Returns false as CanEdit should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCanEdit()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<Object> Tags { get; set; }

        /// <summary>
        /// Gets or Sets UsageDashboard
        /// </summary>
        [DataMember(Name = "usage_dashboard", EmitDefaultValue = false)]
        public int UsageDashboard { get; private set; }

        /// <summary>
        /// Returns false as UsageDashboard should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUsageDashboard()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets AnalyticsDashboards
        /// </summary>
        [DataMember(Name = "analytics_dashboards", EmitDefaultValue = false)]
        public List<int> AnalyticsDashboards { get; set; }

        /// <summary>
        /// Gets or Sets HasEnrichedAnalytics
        /// </summary>
        [DataMember(Name = "has_enriched_analytics", EmitDefaultValue = true)]
        public bool? HasEnrichedAnalytics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostHogPatchedFeatureFlag {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  IsSimpleFlag: ").Append(IsSimpleFlag).Append("\n");
            sb.Append("  RolloutPercentage: ").Append(RolloutPercentage).Append("\n");
            sb.Append("  EnsureExperienceContinuity: ").Append(EnsureExperienceContinuity).Append("\n");
            sb.Append("  ExperimentSet: ").Append(ExperimentSet).Append("\n");
            sb.Append("  Surveys: ").Append(Surveys).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  RollbackConditions: ").Append(RollbackConditions).Append("\n");
            sb.Append("  PerformedRollback: ").Append(PerformedRollback).Append("\n");
            sb.Append("  CanEdit: ").Append(CanEdit).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  UsageDashboard: ").Append(UsageDashboard).Append("\n");
            sb.Append("  AnalyticsDashboards: ").Append(AnalyticsDashboards).Append("\n");
            sb.Append("  HasEnrichedAnalytics: ").Append(HasEnrichedAnalytics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostHogPatchedFeatureFlag);
        }

        /// <summary>
        /// Returns true if PostHogPatchedFeatureFlag instances are equal
        /// </summary>
        /// <param name="input">Instance of PostHogPatchedFeatureFlag to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostHogPatchedFeatureFlag input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Filters == input.Filters ||
                    this.Filters != null &&
                    input.Filters != null &&
                    this.Filters.SequenceEqual(input.Filters)
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    this.Deleted.Equals(input.Deleted)
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.IsSimpleFlag == input.IsSimpleFlag ||
                    this.IsSimpleFlag.Equals(input.IsSimpleFlag)
                ) && 
                (
                    this.RolloutPercentage == input.RolloutPercentage ||
                    (this.RolloutPercentage != null &&
                    this.RolloutPercentage.Equals(input.RolloutPercentage))
                ) && 
                (
                    this.EnsureExperienceContinuity == input.EnsureExperienceContinuity ||
                    (this.EnsureExperienceContinuity != null &&
                    this.EnsureExperienceContinuity.Equals(input.EnsureExperienceContinuity))
                ) && 
                (
                    this.ExperimentSet == input.ExperimentSet ||
                    this.ExperimentSet != null &&
                    input.ExperimentSet != null &&
                    this.ExperimentSet.SequenceEqual(input.ExperimentSet)
                ) && 
                (
                    this.Surveys == input.Surveys ||
                    this.Surveys != null &&
                    input.Surveys != null &&
                    this.Surveys.SequenceEqual(input.Surveys)
                ) && 
                (
                    this.Features == input.Features ||
                    this.Features != null &&
                    input.Features != null &&
                    this.Features.SequenceEqual(input.Features)
                ) && 
                (
                    this.RollbackConditions == input.RollbackConditions ||
                    this.RollbackConditions != null &&
                    input.RollbackConditions != null &&
                    this.RollbackConditions.SequenceEqual(input.RollbackConditions)
                ) && 
                (
                    this.PerformedRollback == input.PerformedRollback ||
                    (this.PerformedRollback != null &&
                    this.PerformedRollback.Equals(input.PerformedRollback))
                ) && 
                (
                    this.CanEdit == input.CanEdit ||
                    this.CanEdit.Equals(input.CanEdit)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.UsageDashboard == input.UsageDashboard ||
                    this.UsageDashboard.Equals(input.UsageDashboard)
                ) && 
                (
                    this.AnalyticsDashboards == input.AnalyticsDashboards ||
                    this.AnalyticsDashboards != null &&
                    input.AnalyticsDashboards != null &&
                    this.AnalyticsDashboards.SequenceEqual(input.AnalyticsDashboards)
                ) && 
                (
                    this.HasEnrichedAnalytics == input.HasEnrichedAnalytics ||
                    (this.HasEnrichedAnalytics != null &&
                    this.HasEnrichedAnalytics.Equals(input.HasEnrichedAnalytics))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.Filters != null)
                {
                    hashCode = (hashCode * 59) + this.Filters.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Deleted.GetHashCode();
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsSimpleFlag.GetHashCode();
                if (this.RolloutPercentage != null)
                {
                    hashCode = (hashCode * 59) + this.RolloutPercentage.GetHashCode();
                }
                if (this.EnsureExperienceContinuity != null)
                {
                    hashCode = (hashCode * 59) + this.EnsureExperienceContinuity.GetHashCode();
                }
                if (this.ExperimentSet != null)
                {
                    hashCode = (hashCode * 59) + this.ExperimentSet.GetHashCode();
                }
                if (this.Surveys != null)
                {
                    hashCode = (hashCode * 59) + this.Surveys.GetHashCode();
                }
                if (this.Features != null)
                {
                    hashCode = (hashCode * 59) + this.Features.GetHashCode();
                }
                if (this.RollbackConditions != null)
                {
                    hashCode = (hashCode * 59) + this.RollbackConditions.GetHashCode();
                }
                if (this.PerformedRollback != null)
                {
                    hashCode = (hashCode * 59) + this.PerformedRollback.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CanEdit.GetHashCode();
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UsageDashboard.GetHashCode();
                if (this.AnalyticsDashboards != null)
                {
                    hashCode = (hashCode * 59) + this.AnalyticsDashboards.GetHashCode();
                }
                if (this.HasEnrichedAnalytics != null)
                {
                    hashCode = (hashCode * 59) + this.HasEnrichedAnalytics.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Key (string) maxLength
            if (this.Key != null && this.Key.Length > 400)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Key, length must be less than 400.", new [] { "Key" });
            }

            yield break;
        }
    }

}
