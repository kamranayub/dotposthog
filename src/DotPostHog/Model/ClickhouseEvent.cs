/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// ClickhouseEvent
    /// </summary>
    [DataContract(Name = "ClickhouseEvent")]
    public partial class ClickhouseEvent : IEquatable<ClickhouseEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClickhouseEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ClickhouseEvent()
        {
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets DistinctId
        /// </summary>
        [DataMember(Name = "distinct_id", IsRequired = true, EmitDefaultValue = true)]
        public string DistinctId { get; private set; }

        /// <summary>
        /// Returns false as DistinctId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDistinctId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", IsRequired = true, EmitDefaultValue = true)]
        public string Properties { get; private set; }

        /// <summary>
        /// Returns false as Properties should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProperties()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets VarEvent
        /// </summary>
        [DataMember(Name = "event", IsRequired = true, EmitDefaultValue = true)]
        public string VarEvent { get; private set; }

        /// <summary>
        /// Returns false as VarEvent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVarEvent()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public string Timestamp { get; private set; }

        /// <summary>
        /// Returns false as Timestamp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTimestamp()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Person
        /// </summary>
        [DataMember(Name = "person", IsRequired = true, EmitDefaultValue = true)]
        public string Person { get; private set; }

        /// <summary>
        /// Returns false as Person should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePerson()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Elements
        /// </summary>
        [DataMember(Name = "elements", IsRequired = true, EmitDefaultValue = true)]
        public string Elements { get; private set; }

        /// <summary>
        /// Returns false as Elements should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeElements()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ElementsChain
        /// </summary>
        [DataMember(Name = "elements_chain", IsRequired = true, EmitDefaultValue = true)]
        public string ElementsChain { get; private set; }

        /// <summary>
        /// Returns false as ElementsChain should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeElementsChain()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClickhouseEvent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DistinctId: ").Append(DistinctId).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  VarEvent: ").Append(VarEvent).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  Elements: ").Append(Elements).Append("\n");
            sb.Append("  ElementsChain: ").Append(ElementsChain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClickhouseEvent);
        }

        /// <summary>
        /// Returns true if ClickhouseEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of ClickhouseEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClickhouseEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DistinctId == input.DistinctId ||
                    (this.DistinctId != null &&
                    this.DistinctId.Equals(input.DistinctId))
                ) && 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.Equals(input.Properties))
                ) && 
                (
                    this.VarEvent == input.VarEvent ||
                    (this.VarEvent != null &&
                    this.VarEvent.Equals(input.VarEvent))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Person == input.Person ||
                    (this.Person != null &&
                    this.Person.Equals(input.Person))
                ) && 
                (
                    this.Elements == input.Elements ||
                    (this.Elements != null &&
                    this.Elements.Equals(input.Elements))
                ) && 
                (
                    this.ElementsChain == input.ElementsChain ||
                    (this.ElementsChain != null &&
                    this.ElementsChain.Equals(input.ElementsChain))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.DistinctId != null)
                {
                    hashCode = (hashCode * 59) + this.DistinctId.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.VarEvent != null)
                {
                    hashCode = (hashCode * 59) + this.VarEvent.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                if (this.Person != null)
                {
                    hashCode = (hashCode * 59) + this.Person.GetHashCode();
                }
                if (this.Elements != null)
                {
                    hashCode = (hashCode * 59) + this.Elements.GetHashCode();
                }
                if (this.ElementsChain != null)
                {
                    hashCode = (hashCode * 59) + this.ElementsChain.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
