/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// PostHogDashboardTemplate
    /// </summary>
    [DataContract(Name = "DashboardTemplate")]
    public partial class PostHogDashboardTemplate : IEquatable<PostHogDashboardTemplate>, IValidatableObject
    {
        /// <summary>
        /// Defines Scope
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScopeEnum
        {
            /// <summary>
            /// Enum Team for value: team
            /// </summary>
            [EnumMember(Value = "team")]
            Team = 1,

            /// <summary>
            /// Enum Global for value: global
            /// </summary>
            [EnumMember(Value = "global")]
            Global = 2,

            /// <summary>
            /// Enum FeatureFlag for value: feature_flag
            /// </summary>
            [EnumMember(Value = "feature_flag")]
            FeatureFlag = 3,

            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 4,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 5
        }


        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name = "scope", EmitDefaultValue = true)]
        public ScopeEnum? Scope { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostHogDashboardTemplate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostHogDashboardTemplate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostHogDashboardTemplate" /> class.
        /// </summary>
        /// <param name="templateName">templateName.</param>
        /// <param name="dashboardDescription">dashboardDescription.</param>
        /// <param name="dashboardFilters">dashboardFilters.</param>
        /// <param name="tags">tags.</param>
        /// <param name="tiles">tiles.</param>
        /// <param name="variables">variables.</param>
        /// <param name="deleted">deleted.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="imageUrl">imageUrl.</param>
        /// <param name="scope">scope.</param>
        public PostHogDashboardTemplate(string templateName = default(string), string dashboardDescription = default(string), Dictionary<string, Object> dashboardFilters = default(Dictionary<string, Object>), List<string> tags = default(List<string>), Dictionary<string, Object> tiles = default(Dictionary<string, Object>), Dictionary<string, Object> variables = default(Dictionary<string, Object>), bool? deleted = default(bool?), int? createdBy = default(int?), string imageUrl = default(string), ScopeEnum? scope = default(ScopeEnum?))
        {
            this.TemplateName = templateName;
            this.DashboardDescription = dashboardDescription;
            this.DashboardFilters = dashboardFilters;
            this.Tags = tags;
            this.Tiles = tiles;
            this.Variables = variables;
            this.Deleted = deleted;
            this.CreatedBy = createdBy;
            this.ImageUrl = imageUrl;
            this.Scope = scope;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets TemplateName
        /// </summary>
        [DataMember(Name = "template_name", EmitDefaultValue = true)]
        public string TemplateName { get; set; }

        /// <summary>
        /// Gets or Sets DashboardDescription
        /// </summary>
        [DataMember(Name = "dashboard_description", EmitDefaultValue = true)]
        public string DashboardDescription { get; set; }

        /// <summary>
        /// Gets or Sets DashboardFilters
        /// </summary>
        [DataMember(Name = "dashboard_filters", EmitDefaultValue = true)]
        public Dictionary<string, Object> DashboardFilters { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Tiles
        /// </summary>
        [DataMember(Name = "tiles", EmitDefaultValue = true)]
        public Dictionary<string, Object> Tiles { get; set; }

        /// <summary>
        /// Gets or Sets Variables
        /// </summary>
        [DataMember(Name = "variables", EmitDefaultValue = true)]
        public Dictionary<string, Object> Variables { get; set; }

        /// <summary>
        /// Gets or Sets Deleted
        /// </summary>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool? Deleted { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public int? CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name = "image_url", EmitDefaultValue = true)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name = "team_id", IsRequired = true, EmitDefaultValue = true)]
        public int? TeamId { get; private set; }

        /// <summary>
        /// Returns false as TeamId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTeamId()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostHogDashboardTemplate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TemplateName: ").Append(TemplateName).Append("\n");
            sb.Append("  DashboardDescription: ").Append(DashboardDescription).Append("\n");
            sb.Append("  DashboardFilters: ").Append(DashboardFilters).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Tiles: ").Append(Tiles).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostHogDashboardTemplate);
        }

        /// <summary>
        /// Returns true if PostHogDashboardTemplate instances are equal
        /// </summary>
        /// <param name="input">Instance of PostHogDashboardTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostHogDashboardTemplate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TemplateName == input.TemplateName ||
                    (this.TemplateName != null &&
                    this.TemplateName.Equals(input.TemplateName))
                ) && 
                (
                    this.DashboardDescription == input.DashboardDescription ||
                    (this.DashboardDescription != null &&
                    this.DashboardDescription.Equals(input.DashboardDescription))
                ) && 
                (
                    this.DashboardFilters == input.DashboardFilters ||
                    this.DashboardFilters != null &&
                    input.DashboardFilters != null &&
                    this.DashboardFilters.SequenceEqual(input.DashboardFilters)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Tiles == input.Tiles ||
                    this.Tiles != null &&
                    input.Tiles != null &&
                    this.Tiles.SequenceEqual(input.Tiles)
                ) && 
                (
                    this.Variables == input.Variables ||
                    this.Variables != null &&
                    input.Variables != null &&
                    this.Variables.SequenceEqual(input.Variables)
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    (this.Deleted != null &&
                    this.Deleted.Equals(input.Deleted))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.TeamId == input.TeamId ||
                    (this.TeamId != null &&
                    this.TeamId.Equals(input.TeamId))
                ) && 
                (
                    this.Scope == input.Scope ||
                    this.Scope.Equals(input.Scope)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.TemplateName != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateName.GetHashCode();
                }
                if (this.DashboardDescription != null)
                {
                    hashCode = (hashCode * 59) + this.DashboardDescription.GetHashCode();
                }
                if (this.DashboardFilters != null)
                {
                    hashCode = (hashCode * 59) + this.DashboardFilters.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.Tiles != null)
                {
                    hashCode = (hashCode * 59) + this.Tiles.GetHashCode();
                }
                if (this.Variables != null)
                {
                    hashCode = (hashCode * 59) + this.Variables.GetHashCode();
                }
                if (this.Deleted != null)
                {
                    hashCode = (hashCode * 59) + this.Deleted.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.ImageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ImageUrl.GetHashCode();
                }
                if (this.TeamId != null)
                {
                    hashCode = (hashCode * 59) + this.TeamId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TemplateName (string) maxLength
            if (this.TemplateName != null && this.TemplateName.Length > 400)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TemplateName, length must be less than 400.", new [] { "TemplateName" });
            }

            // DashboardDescription (string) maxLength
            if (this.DashboardDescription != null && this.DashboardDescription.Length > 400)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DashboardDescription, length must be less than 400.", new [] { "DashboardDescription" });
            }

            // ImageUrl (string) maxLength
            if (this.ImageUrl != null && this.ImageUrl.Length > 8201)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ImageUrl, length must be less than 8201.", new [] { "ImageUrl" });
            }

            yield break;
        }
    }

}
