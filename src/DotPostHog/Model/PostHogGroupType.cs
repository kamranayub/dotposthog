/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// PostHogGroupType
    /// </summary>
    [DataContract(Name = "GroupType")]
    public partial class PostHogGroupType : IEquatable<PostHogGroupType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostHogGroupType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostHogGroupType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostHogGroupType" /> class.
        /// </summary>
        /// <param name="nameSingular">nameSingular.</param>
        /// <param name="namePlural">namePlural.</param>
        public PostHogGroupType(string nameSingular = default(string), string namePlural = default(string))
        {
            this.NameSingular = nameSingular;
            this.NamePlural = namePlural;
        }

        /// <summary>
        /// Gets or Sets GroupType
        /// </summary>
        [DataMember(Name = "group_type", IsRequired = true, EmitDefaultValue = true)]
        public string GroupType { get; private set; }

        /// <summary>
        /// Returns false as GroupType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGroupType()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets GroupTypeIndex
        /// </summary>
        [DataMember(Name = "group_type_index", IsRequired = true, EmitDefaultValue = true)]
        public int GroupTypeIndex { get; private set; }

        /// <summary>
        /// Returns false as GroupTypeIndex should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGroupTypeIndex()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets NameSingular
        /// </summary>
        [DataMember(Name = "name_singular", EmitDefaultValue = true)]
        public string NameSingular { get; set; }

        /// <summary>
        /// Gets or Sets NamePlural
        /// </summary>
        [DataMember(Name = "name_plural", EmitDefaultValue = true)]
        public string NamePlural { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostHogGroupType {\n");
            sb.Append("  GroupType: ").Append(GroupType).Append("\n");
            sb.Append("  GroupTypeIndex: ").Append(GroupTypeIndex).Append("\n");
            sb.Append("  NameSingular: ").Append(NameSingular).Append("\n");
            sb.Append("  NamePlural: ").Append(NamePlural).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostHogGroupType);
        }

        /// <summary>
        /// Returns true if PostHogGroupType instances are equal
        /// </summary>
        /// <param name="input">Instance of PostHogGroupType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostHogGroupType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.GroupType == input.GroupType ||
                    (this.GroupType != null &&
                    this.GroupType.Equals(input.GroupType))
                ) && 
                (
                    this.GroupTypeIndex == input.GroupTypeIndex ||
                    this.GroupTypeIndex.Equals(input.GroupTypeIndex)
                ) && 
                (
                    this.NameSingular == input.NameSingular ||
                    (this.NameSingular != null &&
                    this.NameSingular.Equals(input.NameSingular))
                ) && 
                (
                    this.NamePlural == input.NamePlural ||
                    (this.NamePlural != null &&
                    this.NamePlural.Equals(input.NamePlural))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GroupType != null)
                {
                    hashCode = (hashCode * 59) + this.GroupType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GroupTypeIndex.GetHashCode();
                if (this.NameSingular != null)
                {
                    hashCode = (hashCode * 59) + this.NameSingular.GetHashCode();
                }
                if (this.NamePlural != null)
                {
                    hashCode = (hashCode * 59) + this.NamePlural.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NameSingular (string) maxLength
            if (this.NameSingular != null && this.NameSingular.Length > 400)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NameSingular, length must be less than 400.", new [] { "NameSingular" });
            }

            // NamePlural (string) maxLength
            if (this.NamePlural != null && this.NamePlural.Length > 400)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NamePlural, length must be less than 400.", new [] { "NamePlural" });
            }

            yield break;
        }
    }

}
