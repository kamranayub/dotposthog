/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// PostHogTrend
    /// </summary>
    [DataContract(Name = "Trend")]
    public partial class PostHogTrend : IEquatable<PostHogTrend>, IValidatableObject
    {
        /// <summary>
        /// Type of property to break down on.
        /// </summary>
        /// <value>Type of property to break down on.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BreakdownTypeEnum
        {
            /// <summary>
            /// Enum Event for value: event
            /// </summary>
            [EnumMember(Value = "event")]
            Event = 1,

            /// <summary>
            /// Enum Person for value: person
            /// </summary>
            [EnumMember(Value = "person")]
            Person = 2,

            /// <summary>
            /// Enum Cohort for value: cohort
            /// </summary>
            [EnumMember(Value = "cohort")]
            Cohort = 3,

            /// <summary>
            /// Enum Group for value: group
            /// </summary>
            [EnumMember(Value = "group")]
            Group = 4,

            /// <summary>
            /// Enum Session for value: session
            /// </summary>
            [EnumMember(Value = "session")]
            Session = 5,

            /// <summary>
            /// Enum Hogql for value: hogql
            /// </summary>
            [EnumMember(Value = "hogql")]
            Hogql = 6
        }


        /// <summary>
        /// Type of property to break down on.
        /// </summary>
        /// <value>Type of property to break down on.</value>
        [DataMember(Name = "breakdown_type", EmitDefaultValue = false)]
        public BreakdownTypeEnum? BreakdownType { get; set; }
        /// <summary>
        /// How to display the data. Will change how the data is returned.
        /// </summary>
        /// <value>How to display the data. Will change how the data is returned.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DisplayEnum
        {
            /// <summary>
            /// Enum ActionsLineGraph for value: ActionsLineGraph
            /// </summary>
            [EnumMember(Value = "ActionsLineGraph")]
            ActionsLineGraph = 1,

            /// <summary>
            /// Enum ActionsLineGraphCumulative for value: ActionsLineGraphCumulative
            /// </summary>
            [EnumMember(Value = "ActionsLineGraphCumulative")]
            ActionsLineGraphCumulative = 2,

            /// <summary>
            /// Enum ActionsTable for value: ActionsTable
            /// </summary>
            [EnumMember(Value = "ActionsTable")]
            ActionsTable = 3,

            /// <summary>
            /// Enum ActionsPie for value: ActionsPie
            /// </summary>
            [EnumMember(Value = "ActionsPie")]
            ActionsPie = 4,

            /// <summary>
            /// Enum ActionsBar for value: ActionsBar
            /// </summary>
            [EnumMember(Value = "ActionsBar")]
            ActionsBar = 5,

            /// <summary>
            /// Enum ActionsBarValue for value: ActionsBarValue
            /// </summary>
            [EnumMember(Value = "ActionsBarValue")]
            ActionsBarValue = 6,

            /// <summary>
            /// Enum WorldMap for value: WorldMap
            /// </summary>
            [EnumMember(Value = "WorldMap")]
            WorldMap = 7,

            /// <summary>
            /// Enum BoldNumber for value: BoldNumber
            /// </summary>
            [EnumMember(Value = "BoldNumber")]
            BoldNumber = 8
        }


        /// <summary>
        /// How to display the data. Will change how the data is returned.
        /// </summary>
        /// <value>How to display the data. Will change how the data is returned.</value>
        [DataMember(Name = "display", EmitDefaultValue = false)]
        public DisplayEnum? Display { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostHogTrend" /> class.
        /// </summary>
        /// <param name="events">Events to filter on. One of &#x60;events&#x60; or &#x60;actions&#x60; is required..</param>
        /// <param name="actions">Actions to filter on. One of &#x60;events&#x60; or &#x60;actions&#x60; is required..</param>
        /// <param name="properties">properties.</param>
        /// <param name="filterTestAccounts">Whether to filter out internal and test accounts. See \&quot;project settings\&quot; in your PostHog account for the filters. (default to false).</param>
        /// <param name="dateFrom">What date to filter the results from. Can either be a date &#x60;2021-01-01&#x60;, or a relative date, like &#x60;-7d&#x60; for last seven days, &#x60;-1m&#x60; for last month, &#x60;mStart&#x60; for start of the month or &#x60;yStart&#x60; for the start of the year. (default to &quot;-7d&quot;).</param>
        /// <param name="dateTo">What date to filter the results to. Can either be a date &#x60;2021-01-01&#x60;, or a relative date, like &#x60;-7d&#x60; for last seven days, &#x60;-1m&#x60; for last month, &#x60;mStart&#x60; for start of the month or &#x60;yStart&#x60; for the start of the year. (default to &quot;-7d&quot;).</param>
        /// <param name="breakdown">A property or cohort to break down on. You can select the type of the property with breakdown_type. - &#x60;event&#x60; (default): a property key - &#x60;person&#x60;: a person property key - &#x60;cohort&#x60;: an array of cohort IDs (ie &#x60;[9581,5812]&#x60;).</param>
        /// <param name="breakdownType">Type of property to break down on. (default to BreakdownTypeEnum.Event).</param>
        /// <param name="display">How to display the data. Will change how the data is returned. (default to DisplayEnum.ActionsLineGraph).</param>
        /// <param name="formula">Combine the result of events or actions into a single number. For example &#x60;A + B&#x60; or &#x60;(A-B)/B&#x60;. The letters correspond to the order of the &#x60;events&#x60; or &#x60;actions&#x60; lists..</param>
        /// <param name="compare">For each returned result show the current period and the previous period. The result will contain &#x60;compare:true&#x60; and a &#x60;compare_label&#x60; with either &#x60;current&#x60; or &#x60;previous&#x60;..</param>
        public PostHogTrend(List<PostHogFilterEvent> events = default(List<PostHogFilterEvent>), List<PostHogFilterAction> actions = default(List<PostHogFilterAction>), PostHogProperty properties = default(PostHogProperty), bool filterTestAccounts = false, string dateFrom = @"-7d", string dateTo = @"-7d", string breakdown = default(string), BreakdownTypeEnum? breakdownType = BreakdownTypeEnum.Event, DisplayEnum? display = DisplayEnum.ActionsLineGraph, string formula = default(string), bool compare = default(bool))
        {
            this.Events = events;
            this.Actions = actions;
            this.Properties = properties;
            this.FilterTestAccounts = filterTestAccounts;
            // use default value if no "dateFrom" provided
            this.DateFrom = dateFrom ?? @"-7d";
            // use default value if no "dateTo" provided
            this.DateTo = dateTo ?? @"-7d";
            this.Breakdown = breakdown;
            this.BreakdownType = breakdownType;
            this.Display = display;
            this.Formula = formula;
            this.Compare = compare;
        }

        /// <summary>
        /// Events to filter on. One of &#x60;events&#x60; or &#x60;actions&#x60; is required.
        /// </summary>
        /// <value>Events to filter on. One of &#x60;events&#x60; or &#x60;actions&#x60; is required.</value>
        [DataMember(Name = "events", EmitDefaultValue = false)]
        public List<PostHogFilterEvent> Events { get; set; }

        /// <summary>
        /// Actions to filter on. One of &#x60;events&#x60; or &#x60;actions&#x60; is required.
        /// </summary>
        /// <value>Actions to filter on. One of &#x60;events&#x60; or &#x60;actions&#x60; is required.</value>
        [DataMember(Name = "actions", EmitDefaultValue = false)]
        public List<PostHogFilterAction> Actions { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public PostHogProperty Properties { get; set; }

        /// <summary>
        /// Whether to filter out internal and test accounts. See \&quot;project settings\&quot; in your PostHog account for the filters.
        /// </summary>
        /// <value>Whether to filter out internal and test accounts. See \&quot;project settings\&quot; in your PostHog account for the filters.</value>
        [DataMember(Name = "filter_test_accounts", EmitDefaultValue = true)]
        public bool FilterTestAccounts { get; set; }

        /// <summary>
        /// What date to filter the results from. Can either be a date &#x60;2021-01-01&#x60;, or a relative date, like &#x60;-7d&#x60; for last seven days, &#x60;-1m&#x60; for last month, &#x60;mStart&#x60; for start of the month or &#x60;yStart&#x60; for the start of the year.
        /// </summary>
        /// <value>What date to filter the results from. Can either be a date &#x60;2021-01-01&#x60;, or a relative date, like &#x60;-7d&#x60; for last seven days, &#x60;-1m&#x60; for last month, &#x60;mStart&#x60; for start of the month or &#x60;yStart&#x60; for the start of the year.</value>
        [DataMember(Name = "date_from", EmitDefaultValue = false)]
        public string DateFrom { get; set; }

        /// <summary>
        /// What date to filter the results to. Can either be a date &#x60;2021-01-01&#x60;, or a relative date, like &#x60;-7d&#x60; for last seven days, &#x60;-1m&#x60; for last month, &#x60;mStart&#x60; for start of the month or &#x60;yStart&#x60; for the start of the year.
        /// </summary>
        /// <value>What date to filter the results to. Can either be a date &#x60;2021-01-01&#x60;, or a relative date, like &#x60;-7d&#x60; for last seven days, &#x60;-1m&#x60; for last month, &#x60;mStart&#x60; for start of the month or &#x60;yStart&#x60; for the start of the year.</value>
        [DataMember(Name = "date_to", EmitDefaultValue = false)]
        public string DateTo { get; set; }

        /// <summary>
        /// A property or cohort to break down on. You can select the type of the property with breakdown_type. - &#x60;event&#x60; (default): a property key - &#x60;person&#x60;: a person property key - &#x60;cohort&#x60;: an array of cohort IDs (ie &#x60;[9581,5812]&#x60;)
        /// </summary>
        /// <value>A property or cohort to break down on. You can select the type of the property with breakdown_type. - &#x60;event&#x60; (default): a property key - &#x60;person&#x60;: a person property key - &#x60;cohort&#x60;: an array of cohort IDs (ie &#x60;[9581,5812]&#x60;)</value>
        [DataMember(Name = "breakdown", EmitDefaultValue = false)]
        public string Breakdown { get; set; }

        /// <summary>
        /// Combine the result of events or actions into a single number. For example &#x60;A + B&#x60; or &#x60;(A-B)/B&#x60;. The letters correspond to the order of the &#x60;events&#x60; or &#x60;actions&#x60; lists.
        /// </summary>
        /// <value>Combine the result of events or actions into a single number. For example &#x60;A + B&#x60; or &#x60;(A-B)/B&#x60;. The letters correspond to the order of the &#x60;events&#x60; or &#x60;actions&#x60; lists.</value>
        [DataMember(Name = "formula", EmitDefaultValue = false)]
        public string Formula { get; set; }

        /// <summary>
        /// For each returned result show the current period and the previous period. The result will contain &#x60;compare:true&#x60; and a &#x60;compare_label&#x60; with either &#x60;current&#x60; or &#x60;previous&#x60;.
        /// </summary>
        /// <value>For each returned result show the current period and the previous period. The result will contain &#x60;compare:true&#x60; and a &#x60;compare_label&#x60; with either &#x60;current&#x60; or &#x60;previous&#x60;.</value>
        [DataMember(Name = "compare", EmitDefaultValue = true)]
        public bool Compare { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostHogTrend {\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  FilterTestAccounts: ").Append(FilterTestAccounts).Append("\n");
            sb.Append("  DateFrom: ").Append(DateFrom).Append("\n");
            sb.Append("  DateTo: ").Append(DateTo).Append("\n");
            sb.Append("  Breakdown: ").Append(Breakdown).Append("\n");
            sb.Append("  BreakdownType: ").Append(BreakdownType).Append("\n");
            sb.Append("  Display: ").Append(Display).Append("\n");
            sb.Append("  Formula: ").Append(Formula).Append("\n");
            sb.Append("  Compare: ").Append(Compare).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostHogTrend);
        }

        /// <summary>
        /// Returns true if PostHogTrend instances are equal
        /// </summary>
        /// <param name="input">Instance of PostHogTrend to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostHogTrend input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    input.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                ) && 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    input.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                ) && 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.Equals(input.Properties))
                ) && 
                (
                    this.FilterTestAccounts == input.FilterTestAccounts ||
                    this.FilterTestAccounts.Equals(input.FilterTestAccounts)
                ) && 
                (
                    this.DateFrom == input.DateFrom ||
                    (this.DateFrom != null &&
                    this.DateFrom.Equals(input.DateFrom))
                ) && 
                (
                    this.DateTo == input.DateTo ||
                    (this.DateTo != null &&
                    this.DateTo.Equals(input.DateTo))
                ) && 
                (
                    this.Breakdown == input.Breakdown ||
                    (this.Breakdown != null &&
                    this.Breakdown.Equals(input.Breakdown))
                ) && 
                (
                    this.BreakdownType == input.BreakdownType ||
                    this.BreakdownType.Equals(input.BreakdownType)
                ) && 
                (
                    this.Display == input.Display ||
                    this.Display.Equals(input.Display)
                ) && 
                (
                    this.Formula == input.Formula ||
                    (this.Formula != null &&
                    this.Formula.Equals(input.Formula))
                ) && 
                (
                    this.Compare == input.Compare ||
                    this.Compare.Equals(input.Compare)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Events != null)
                {
                    hashCode = (hashCode * 59) + this.Events.GetHashCode();
                }
                if (this.Actions != null)
                {
                    hashCode = (hashCode * 59) + this.Actions.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FilterTestAccounts.GetHashCode();
                if (this.DateFrom != null)
                {
                    hashCode = (hashCode * 59) + this.DateFrom.GetHashCode();
                }
                if (this.DateTo != null)
                {
                    hashCode = (hashCode * 59) + this.DateTo.GetHashCode();
                }
                if (this.Breakdown != null)
                {
                    hashCode = (hashCode * 59) + this.Breakdown.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BreakdownType.GetHashCode();
                hashCode = (hashCode * 59) + this.Display.GetHashCode();
                if (this.Formula != null)
                {
                    hashCode = (hashCode * 59) + this.Formula.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Compare.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
