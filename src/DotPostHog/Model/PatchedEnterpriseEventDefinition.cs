/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// Serializer mixin that resolves appropriate response for tags depending on license.
    /// </summary>
    [DataContract(Name = "PatchedEnterpriseEventDefinition")]
    public partial class PatchedEnterpriseEventDefinition : IEquatable<PatchedEnterpriseEventDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatchedEnterpriseEventDefinition" /> class.
        /// </summary>
        /// <param name="owner">owner.</param>
        /// <param name="description">description.</param>
        /// <param name="tags">tags.</param>
        /// <param name="verified">verified.</param>
        /// <param name="postToSlack">postToSlack (default to false).</param>
        public PatchedEnterpriseEventDefinition(int? owner = default(int?), string description = default(string), List<Object> tags = default(List<Object>), bool verified = default(bool), bool postToSlack = false)
        {
            this.Owner = owner;
            this.Description = description;
            this.Tags = tags;
            this.Verified = verified;
            this.PostToSlack = postToSlack;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; private set; }

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name = "owner", EmitDefaultValue = true)]
        public int? Owner { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<Object> Tags { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime? CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name = "updated_by", EmitDefaultValue = false)]
        public UserBasic UpdatedBy { get; private set; }

        /// <summary>
        /// Returns false as UpdatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets LastSeenAt
        /// </summary>
        [DataMember(Name = "last_seen_at", EmitDefaultValue = true)]
        public DateTime? LastSeenAt { get; private set; }

        /// <summary>
        /// Returns false as LastSeenAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastSeenAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets LastUpdatedAt
        /// </summary>
        [DataMember(Name = "last_updated_at", EmitDefaultValue = false)]
        public DateTime LastUpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as LastUpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Verified
        /// </summary>
        [DataMember(Name = "verified", EmitDefaultValue = true)]
        public bool Verified { get; set; }

        /// <summary>
        /// Gets or Sets VerifiedAt
        /// </summary>
        [DataMember(Name = "verified_at", EmitDefaultValue = true)]
        public DateTime? VerifiedAt { get; private set; }

        /// <summary>
        /// Returns false as VerifiedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVerifiedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets VerifiedBy
        /// </summary>
        [DataMember(Name = "verified_by", EmitDefaultValue = false)]
        public UserBasic VerifiedBy { get; private set; }

        /// <summary>
        /// Returns false as VerifiedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVerifiedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsAction
        /// </summary>
        [DataMember(Name = "is_action", EmitDefaultValue = false)]
        public string IsAction { get; private set; }

        /// <summary>
        /// Returns false as IsAction should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsAction()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ActionId
        /// </summary>
        [DataMember(Name = "action_id", EmitDefaultValue = false)]
        public int ActionId { get; private set; }

        /// <summary>
        /// Returns false as ActionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActionId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsCalculating
        /// </summary>
        [DataMember(Name = "is_calculating", EmitDefaultValue = true)]
        public bool IsCalculating { get; private set; }

        /// <summary>
        /// Returns false as IsCalculating should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsCalculating()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets LastCalculatedAt
        /// </summary>
        [DataMember(Name = "last_calculated_at", EmitDefaultValue = false)]
        public DateTime LastCalculatedAt { get; private set; }

        /// <summary>
        /// Returns false as LastCalculatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastCalculatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = false)]
        public UserBasic CreatedBy { get; private set; }

        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets PostToSlack
        /// </summary>
        [DataMember(Name = "post_to_slack", EmitDefaultValue = true)]
        public bool PostToSlack { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PatchedEnterpriseEventDefinition {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  LastSeenAt: ").Append(LastSeenAt).Append("\n");
            sb.Append("  LastUpdatedAt: ").Append(LastUpdatedAt).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  VerifiedAt: ").Append(VerifiedAt).Append("\n");
            sb.Append("  VerifiedBy: ").Append(VerifiedBy).Append("\n");
            sb.Append("  IsAction: ").Append(IsAction).Append("\n");
            sb.Append("  ActionId: ").Append(ActionId).Append("\n");
            sb.Append("  IsCalculating: ").Append(IsCalculating).Append("\n");
            sb.Append("  LastCalculatedAt: ").Append(LastCalculatedAt).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  PostToSlack: ").Append(PostToSlack).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PatchedEnterpriseEventDefinition);
        }

        /// <summary>
        /// Returns true if PatchedEnterpriseEventDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of PatchedEnterpriseEventDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatchedEnterpriseEventDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                ) && 
                (
                    this.LastSeenAt == input.LastSeenAt ||
                    (this.LastSeenAt != null &&
                    this.LastSeenAt.Equals(input.LastSeenAt))
                ) && 
                (
                    this.LastUpdatedAt == input.LastUpdatedAt ||
                    (this.LastUpdatedAt != null &&
                    this.LastUpdatedAt.Equals(input.LastUpdatedAt))
                ) && 
                (
                    this.Verified == input.Verified ||
                    this.Verified.Equals(input.Verified)
                ) && 
                (
                    this.VerifiedAt == input.VerifiedAt ||
                    (this.VerifiedAt != null &&
                    this.VerifiedAt.Equals(input.VerifiedAt))
                ) && 
                (
                    this.VerifiedBy == input.VerifiedBy ||
                    (this.VerifiedBy != null &&
                    this.VerifiedBy.Equals(input.VerifiedBy))
                ) && 
                (
                    this.IsAction == input.IsAction ||
                    (this.IsAction != null &&
                    this.IsAction.Equals(input.IsAction))
                ) && 
                (
                    this.ActionId == input.ActionId ||
                    this.ActionId.Equals(input.ActionId)
                ) && 
                (
                    this.IsCalculating == input.IsCalculating ||
                    this.IsCalculating.Equals(input.IsCalculating)
                ) && 
                (
                    this.LastCalculatedAt == input.LastCalculatedAt ||
                    (this.LastCalculatedAt != null &&
                    this.LastCalculatedAt.Equals(input.LastCalculatedAt))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.PostToSlack == input.PostToSlack ||
                    this.PostToSlack.Equals(input.PostToSlack)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Owner != null)
                {
                    hashCode = (hashCode * 59) + this.Owner.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.UpdatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedBy.GetHashCode();
                }
                if (this.LastSeenAt != null)
                {
                    hashCode = (hashCode * 59) + this.LastSeenAt.GetHashCode();
                }
                if (this.LastUpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdatedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Verified.GetHashCode();
                if (this.VerifiedAt != null)
                {
                    hashCode = (hashCode * 59) + this.VerifiedAt.GetHashCode();
                }
                if (this.VerifiedBy != null)
                {
                    hashCode = (hashCode * 59) + this.VerifiedBy.GetHashCode();
                }
                if (this.IsAction != null)
                {
                    hashCode = (hashCode * 59) + this.IsAction.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ActionId.GetHashCode();
                hashCode = (hashCode * 59) + this.IsCalculating.GetHashCode();
                if (this.LastCalculatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.LastCalculatedAt.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PostToSlack.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
