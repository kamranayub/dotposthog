/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// PatchedPlugin
    /// </summary>
    [DataContract(Name = "PatchedPlugin")]
    public partial class PatchedPlugin : IEquatable<PatchedPlugin>, IValidatableObject
    {
        /// <summary>
        /// Defines PluginType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PluginTypeEnum
        {
            /// <summary>
            /// Enum Local for value: local
            /// </summary>
            [EnumMember(Value = "local")]
            Local = 1,

            /// <summary>
            /// Enum Custom for value: custom
            /// </summary>
            [EnumMember(Value = "custom")]
            Custom = 2,

            /// <summary>
            /// Enum Repository for value: repository
            /// </summary>
            [EnumMember(Value = "repository")]
            Repository = 3,

            /// <summary>
            /// Enum Source for value: source
            /// </summary>
            [EnumMember(Value = "source")]
            Source = 4,

            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 5,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 6
        }


        /// <summary>
        /// Gets or Sets PluginType
        /// </summary>
        [DataMember(Name = "plugin_type", EmitDefaultValue = true)]
        public PluginTypeEnum? PluginType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PatchedPlugin" /> class.
        /// </summary>
        /// <param name="pluginType">pluginType.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="icon">icon.</param>
        /// <param name="configSchema">configSchema.</param>
        /// <param name="tag">tag.</param>
        /// <param name="isGlobal">isGlobal.</param>
        /// <param name="capabilities">capabilities.</param>
        /// <param name="metrics">metrics.</param>
        /// <param name="publicJobs">publicJobs.</param>
        public PatchedPlugin(PluginTypeEnum? pluginType = default(PluginTypeEnum?), string name = default(string), string description = default(string), string icon = default(string), Dictionary<string, Object> configSchema = default(Dictionary<string, Object>), string tag = default(string), bool isGlobal = default(bool), Dictionary<string, Object> capabilities = default(Dictionary<string, Object>), Dictionary<string, Object> metrics = default(Dictionary<string, Object>), Dictionary<string, Object> publicJobs = default(Dictionary<string, Object>))
        {
            this.PluginType = pluginType;
            this.Name = name;
            this.Description = description;
            this.Icon = icon;
            this.ConfigSchema = configSchema;
            this.Tag = tag;
            this.IsGlobal = isGlobal;
            this.Capabilities = capabilities;
            this.Metrics = metrics;
            this.PublicJobs = publicJobs;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public string Url { get; private set; }

        /// <summary>
        /// Returns false as Url should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUrl()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name = "icon", EmitDefaultValue = true)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets ConfigSchema
        /// </summary>
        [DataMember(Name = "config_schema", EmitDefaultValue = false)]
        public Dictionary<string, Object> ConfigSchema { get; set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name = "tag", EmitDefaultValue = true)]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets LatestTag
        /// </summary>
        [DataMember(Name = "latest_tag", EmitDefaultValue = true)]
        public string LatestTag { get; private set; }

        /// <summary>
        /// Returns false as LatestTag should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLatestTag()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsGlobal
        /// </summary>
        [DataMember(Name = "is_global", EmitDefaultValue = true)]
        public bool IsGlobal { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name = "organization_id", EmitDefaultValue = false)]
        public Guid OrganizationId { get; private set; }

        /// <summary>
        /// Returns false as OrganizationId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrganizationId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets OrganizationName
        /// </summary>
        [DataMember(Name = "organization_name", EmitDefaultValue = false)]
        public string OrganizationName { get; private set; }

        /// <summary>
        /// Returns false as OrganizationName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrganizationName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Capabilities
        /// </summary>
        [DataMember(Name = "capabilities", EmitDefaultValue = false)]
        public Dictionary<string, Object> Capabilities { get; set; }

        /// <summary>
        /// Gets or Sets Metrics
        /// </summary>
        [DataMember(Name = "metrics", EmitDefaultValue = true)]
        public Dictionary<string, Object> Metrics { get; set; }

        /// <summary>
        /// Gets or Sets PublicJobs
        /// </summary>
        [DataMember(Name = "public_jobs", EmitDefaultValue = true)]
        public Dictionary<string, Object> PublicJobs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PatchedPlugin {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PluginType: ").Append(PluginType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  ConfigSchema: ").Append(ConfigSchema).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  LatestTag: ").Append(LatestTag).Append("\n");
            sb.Append("  IsGlobal: ").Append(IsGlobal).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  OrganizationName: ").Append(OrganizationName).Append("\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  PublicJobs: ").Append(PublicJobs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PatchedPlugin);
        }

        /// <summary>
        /// Returns true if PatchedPlugin instances are equal
        /// </summary>
        /// <param name="input">Instance of PatchedPlugin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatchedPlugin input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.PluginType == input.PluginType ||
                    this.PluginType.Equals(input.PluginType)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.ConfigSchema == input.ConfigSchema ||
                    this.ConfigSchema != null &&
                    input.ConfigSchema != null &&
                    this.ConfigSchema.SequenceEqual(input.ConfigSchema)
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.LatestTag == input.LatestTag ||
                    (this.LatestTag != null &&
                    this.LatestTag.Equals(input.LatestTag))
                ) && 
                (
                    this.IsGlobal == input.IsGlobal ||
                    this.IsGlobal.Equals(input.IsGlobal)
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.OrganizationName == input.OrganizationName ||
                    (this.OrganizationName != null &&
                    this.OrganizationName.Equals(input.OrganizationName))
                ) && 
                (
                    this.Capabilities == input.Capabilities ||
                    this.Capabilities != null &&
                    input.Capabilities != null &&
                    this.Capabilities.SequenceEqual(input.Capabilities)
                ) && 
                (
                    this.Metrics == input.Metrics ||
                    this.Metrics != null &&
                    input.Metrics != null &&
                    this.Metrics.SequenceEqual(input.Metrics)
                ) && 
                (
                    this.PublicJobs == input.PublicJobs ||
                    this.PublicJobs != null &&
                    input.PublicJobs != null &&
                    this.PublicJobs.SequenceEqual(input.PublicJobs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.PluginType.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.Icon != null)
                {
                    hashCode = (hashCode * 59) + this.Icon.GetHashCode();
                }
                if (this.ConfigSchema != null)
                {
                    hashCode = (hashCode * 59) + this.ConfigSchema.GetHashCode();
                }
                if (this.Tag != null)
                {
                    hashCode = (hashCode * 59) + this.Tag.GetHashCode();
                }
                if (this.LatestTag != null)
                {
                    hashCode = (hashCode * 59) + this.LatestTag.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsGlobal.GetHashCode();
                if (this.OrganizationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationId.GetHashCode();
                }
                if (this.OrganizationName != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationName.GetHashCode();
                }
                if (this.Capabilities != null)
                {
                    hashCode = (hashCode * 59) + this.Capabilities.GetHashCode();
                }
                if (this.Metrics != null)
                {
                    hashCode = (hashCode * 59) + this.Metrics.GetHashCode();
                }
                if (this.PublicJobs != null)
                {
                    hashCode = (hashCode * 59) + this.PublicJobs.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 200.", new [] { "Name" });
            }

            // Icon (string) maxLength
            if (this.Icon != null && this.Icon.Length > 800)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Icon, length must be less than 800.", new [] { "Icon" });
            }

            // Tag (string) maxLength
            if (this.Tag != null && this.Tag.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Tag, length must be less than 200.", new [] { "Tag" });
            }

            yield break;
        }
    }

}
