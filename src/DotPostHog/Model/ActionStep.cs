/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// ActionStep
    /// </summary>
    [DataContract(Name = "ActionStep")]
    public partial class ActionStep : IEquatable<ActionStep>, IValidatableObject
    {
        /// <summary>
        /// Defines TextMatching
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TextMatchingEnum
        {
            /// <summary>
            /// Enum Contains for value: contains
            /// </summary>
            [EnumMember(Value = "contains")]
            Contains = 1,

            /// <summary>
            /// Enum Regex for value: regex
            /// </summary>
            [EnumMember(Value = "regex")]
            Regex = 2,

            /// <summary>
            /// Enum Exact for value: exact
            /// </summary>
            [EnumMember(Value = "exact")]
            Exact = 3,

            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 4,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 5
        }


        /// <summary>
        /// Gets or Sets TextMatching
        /// </summary>
        [DataMember(Name = "text_matching", EmitDefaultValue = true)]
        public TextMatchingEnum? TextMatching { get; set; }
        /// <summary>
        /// Defines HrefMatching
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HrefMatchingEnum
        {
            /// <summary>
            /// Enum Contains for value: contains
            /// </summary>
            [EnumMember(Value = "contains")]
            Contains = 1,

            /// <summary>
            /// Enum Regex for value: regex
            /// </summary>
            [EnumMember(Value = "regex")]
            Regex = 2,

            /// <summary>
            /// Enum Exact for value: exact
            /// </summary>
            [EnumMember(Value = "exact")]
            Exact = 3,

            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 4,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 5
        }


        /// <summary>
        /// Gets or Sets HrefMatching
        /// </summary>
        [DataMember(Name = "href_matching", EmitDefaultValue = true)]
        public HrefMatchingEnum? HrefMatching { get; set; }
        /// <summary>
        /// Defines UrlMatching
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UrlMatchingEnum
        {
            /// <summary>
            /// Enum Contains for value: contains
            /// </summary>
            [EnumMember(Value = "contains")]
            Contains = 1,

            /// <summary>
            /// Enum Regex for value: regex
            /// </summary>
            [EnumMember(Value = "regex")]
            Regex = 2,

            /// <summary>
            /// Enum Exact for value: exact
            /// </summary>
            [EnumMember(Value = "exact")]
            Exact = 3,

            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 4,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 5
        }


        /// <summary>
        /// Gets or Sets UrlMatching
        /// </summary>
        [DataMember(Name = "url_matching", EmitDefaultValue = true)]
        public UrlMatchingEnum? UrlMatching { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionStep" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="varEvent">varEvent.</param>
        /// <param name="tagName">tagName.</param>
        /// <param name="text">text.</param>
        /// <param name="textMatching">textMatching.</param>
        /// <param name="href">href.</param>
        /// <param name="hrefMatching">hrefMatching.</param>
        /// <param name="selector">selector.</param>
        /// <param name="url">url.</param>
        /// <param name="name">name.</param>
        /// <param name="urlMatching">urlMatching.</param>
        /// <param name="properties">properties.</param>
        public ActionStep(string id = default(string), string varEvent = default(string), string tagName = default(string), string text = default(string), TextMatchingEnum? textMatching = default(TextMatchingEnum?), string href = default(string), HrefMatchingEnum? hrefMatching = default(HrefMatchingEnum?), string selector = default(string), string url = default(string), string name = default(string), UrlMatchingEnum? urlMatching = default(UrlMatchingEnum?), Dictionary<string, Object> properties = default(Dictionary<string, Object>))
        {
            this.Id = id;
            this.VarEvent = varEvent;
            this.TagName = tagName;
            this.Text = text;
            this.TextMatching = textMatching;
            this.Href = href;
            this.HrefMatching = hrefMatching;
            this.Selector = selector;
            this.Url = url;
            this.Name = name;
            this.UrlMatching = urlMatching;
            this.Properties = properties;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets VarEvent
        /// </summary>
        [DataMember(Name = "event", EmitDefaultValue = true)]
        public string VarEvent { get; set; }

        /// <summary>
        /// Gets or Sets TagName
        /// </summary>
        [DataMember(Name = "tag_name", EmitDefaultValue = true)]
        public string TagName { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name = "href", EmitDefaultValue = true)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets Selector
        /// </summary>
        [DataMember(Name = "selector", EmitDefaultValue = true)]
        public string Selector { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, Object> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActionStep {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VarEvent: ").Append(VarEvent).Append("\n");
            sb.Append("  TagName: ").Append(TagName).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  TextMatching: ").Append(TextMatching).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  HrefMatching: ").Append(HrefMatching).Append("\n");
            sb.Append("  Selector: ").Append(Selector).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UrlMatching: ").Append(UrlMatching).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActionStep);
        }

        /// <summary>
        /// Returns true if ActionStep instances are equal
        /// </summary>
        /// <param name="input">Instance of ActionStep to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActionStep input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.VarEvent == input.VarEvent ||
                    (this.VarEvent != null &&
                    this.VarEvent.Equals(input.VarEvent))
                ) && 
                (
                    this.TagName == input.TagName ||
                    (this.TagName != null &&
                    this.TagName.Equals(input.TagName))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.TextMatching == input.TextMatching ||
                    this.TextMatching.Equals(input.TextMatching)
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.HrefMatching == input.HrefMatching ||
                    this.HrefMatching.Equals(input.HrefMatching)
                ) && 
                (
                    this.Selector == input.Selector ||
                    (this.Selector != null &&
                    this.Selector.Equals(input.Selector))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.UrlMatching == input.UrlMatching ||
                    this.UrlMatching.Equals(input.UrlMatching)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.VarEvent != null)
                {
                    hashCode = (hashCode * 59) + this.VarEvent.GetHashCode();
                }
                if (this.TagName != null)
                {
                    hashCode = (hashCode * 59) + this.TagName.GetHashCode();
                }
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TextMatching.GetHashCode();
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HrefMatching.GetHashCode();
                if (this.Selector != null)
                {
                    hashCode = (hashCode * 59) + this.Selector.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UrlMatching.GetHashCode();
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // VarEvent (string) maxLength
            if (this.VarEvent != null && this.VarEvent.Length > 400)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VarEvent, length must be less than 400.", new [] { "VarEvent" });
            }

            // TagName (string) maxLength
            if (this.TagName != null && this.TagName.Length > 400)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TagName, length must be less than 400.", new [] { "TagName" });
            }

            // Text (string) maxLength
            if (this.Text != null && this.Text.Length > 400)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Text, length must be less than 400.", new [] { "Text" });
            }

            // Href (string) maxLength
            if (this.Href != null && this.Href.Length > 65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Href, length must be less than 65535.", new [] { "Href" });
            }

            // Selector (string) maxLength
            if (this.Selector != null && this.Selector.Length > 65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Selector, length must be less than 65535.", new [] { "Selector" });
            }

            // Url (string) maxLength
            if (this.Url != null && this.Url.Length > 65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Url, length must be less than 65535.", new [] { "Url" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 400)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 400.", new [] { "Name" });
            }

            yield break;
        }
    }

}
