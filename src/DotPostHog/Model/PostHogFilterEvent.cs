/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// PostHogFilterEvent
    /// </summary>
    [DataContract(Name = "FilterEvent")]
    public partial class PostHogFilterEvent : IEquatable<PostHogFilterEvent>, IValidatableObject
    {
        /// <summary>
        /// How to aggregate results, shown as \&quot;counted by\&quot; in the interface. - &#x60;total&#x60; (default): no aggregation, count by events - &#x60;dau&#x60;: count by unique users. Despite the name, if you select the &#x60;interval&#x60; to be weekly or monthly, this will show weekly or monthly active users respectively - &#x60;weekly_active&#x60;: rolling average of users of the last 7 days. - &#x60;monthly_active&#x60;: rolling average of users of the last month. - &#x60;unique_group&#x60;: count by group. Requires &#x60;math_group_type_index&#x60; to be sent. You can get the index by hitting &#x60;/api/projects/@current/groups_types/&#x60;.  All of the below are property aggregations, and require &#x60;math_property&#x60; to be sent with an event property. - &#x60;sum&#x60;: sum of a numeric property. - &#x60;min&#x60;: min of a numeric property. - &#x60;max&#x60;: max of a numeric property. - &#x60;median&#x60;: median of a numeric property. - &#x60;p90&#x60;: 90th percentile of a numeric property. - &#x60;p95&#x60; 95th percentile of a numeric property. - &#x60;p99&#x60;: 99th percentile of a numeric property. 
        /// </summary>
        /// <value>How to aggregate results, shown as \&quot;counted by\&quot; in the interface. - &#x60;total&#x60; (default): no aggregation, count by events - &#x60;dau&#x60;: count by unique users. Despite the name, if you select the &#x60;interval&#x60; to be weekly or monthly, this will show weekly or monthly active users respectively - &#x60;weekly_active&#x60;: rolling average of users of the last 7 days. - &#x60;monthly_active&#x60;: rolling average of users of the last month. - &#x60;unique_group&#x60;: count by group. Requires &#x60;math_group_type_index&#x60; to be sent. You can get the index by hitting &#x60;/api/projects/@current/groups_types/&#x60;.  All of the below are property aggregations, and require &#x60;math_property&#x60; to be sent with an event property. - &#x60;sum&#x60;: sum of a numeric property. - &#x60;min&#x60;: min of a numeric property. - &#x60;max&#x60;: max of a numeric property. - &#x60;median&#x60;: median of a numeric property. - &#x60;p90&#x60;: 90th percentile of a numeric property. - &#x60;p95&#x60; 95th percentile of a numeric property. - &#x60;p99&#x60;: 99th percentile of a numeric property. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MathEnum
        {
            /// <summary>
            /// Enum Total for value: total
            /// </summary>
            [EnumMember(Value = "total")]
            Total = 1,

            /// <summary>
            /// Enum Dau for value: dau
            /// </summary>
            [EnumMember(Value = "dau")]
            Dau = 2,

            /// <summary>
            /// Enum WeeklyActive for value: weekly_active
            /// </summary>
            [EnumMember(Value = "weekly_active")]
            WeeklyActive = 3,

            /// <summary>
            /// Enum MonthlyActive for value: monthly_active
            /// </summary>
            [EnumMember(Value = "monthly_active")]
            MonthlyActive = 4,

            /// <summary>
            /// Enum UniqueGroup for value: unique_group
            /// </summary>
            [EnumMember(Value = "unique_group")]
            UniqueGroup = 5,

            /// <summary>
            /// Enum UniqueSession for value: unique_session
            /// </summary>
            [EnumMember(Value = "unique_session")]
            UniqueSession = 6,

            /// <summary>
            /// Enum Sum for value: sum
            /// </summary>
            [EnumMember(Value = "sum")]
            Sum = 7,

            /// <summary>
            /// Enum Min for value: min
            /// </summary>
            [EnumMember(Value = "min")]
            Min = 8,

            /// <summary>
            /// Enum Max for value: max
            /// </summary>
            [EnumMember(Value = "max")]
            Max = 9,

            /// <summary>
            /// Enum Avg for value: avg
            /// </summary>
            [EnumMember(Value = "avg")]
            Avg = 10,

            /// <summary>
            /// Enum Median for value: median
            /// </summary>
            [EnumMember(Value = "median")]
            Median = 11,

            /// <summary>
            /// Enum P90 for value: p90
            /// </summary>
            [EnumMember(Value = "p90")]
            P90 = 12,

            /// <summary>
            /// Enum P95 for value: p95
            /// </summary>
            [EnumMember(Value = "p95")]
            P95 = 13,

            /// <summary>
            /// Enum P99 for value: p99
            /// </summary>
            [EnumMember(Value = "p99")]
            P99 = 14,

            /// <summary>
            /// Enum MinCountPerActor for value: min_count_per_actor
            /// </summary>
            [EnumMember(Value = "min_count_per_actor")]
            MinCountPerActor = 15,

            /// <summary>
            /// Enum MaxCountPerActor for value: max_count_per_actor
            /// </summary>
            [EnumMember(Value = "max_count_per_actor")]
            MaxCountPerActor = 16,

            /// <summary>
            /// Enum AvgCountPerActor for value: avg_count_per_actor
            /// </summary>
            [EnumMember(Value = "avg_count_per_actor")]
            AvgCountPerActor = 17,

            /// <summary>
            /// Enum MedianCountPerActor for value: median_count_per_actor
            /// </summary>
            [EnumMember(Value = "median_count_per_actor")]
            MedianCountPerActor = 18,

            /// <summary>
            /// Enum P90CountPerActor for value: p90_count_per_actor
            /// </summary>
            [EnumMember(Value = "p90_count_per_actor")]
            P90CountPerActor = 19,

            /// <summary>
            /// Enum P95CountPerActor for value: p95_count_per_actor
            /// </summary>
            [EnumMember(Value = "p95_count_per_actor")]
            P95CountPerActor = 20,

            /// <summary>
            /// Enum P99CountPerActor for value: p99_count_per_actor
            /// </summary>
            [EnumMember(Value = "p99_count_per_actor")]
            P99CountPerActor = 21,

            /// <summary>
            /// Enum Hogql for value: hogql
            /// </summary>
            [EnumMember(Value = "hogql")]
            Hogql = 22
        }


        /// <summary>
        /// How to aggregate results, shown as \&quot;counted by\&quot; in the interface. - &#x60;total&#x60; (default): no aggregation, count by events - &#x60;dau&#x60;: count by unique users. Despite the name, if you select the &#x60;interval&#x60; to be weekly or monthly, this will show weekly or monthly active users respectively - &#x60;weekly_active&#x60;: rolling average of users of the last 7 days. - &#x60;monthly_active&#x60;: rolling average of users of the last month. - &#x60;unique_group&#x60;: count by group. Requires &#x60;math_group_type_index&#x60; to be sent. You can get the index by hitting &#x60;/api/projects/@current/groups_types/&#x60;.  All of the below are property aggregations, and require &#x60;math_property&#x60; to be sent with an event property. - &#x60;sum&#x60;: sum of a numeric property. - &#x60;min&#x60;: min of a numeric property. - &#x60;max&#x60;: max of a numeric property. - &#x60;median&#x60;: median of a numeric property. - &#x60;p90&#x60;: 90th percentile of a numeric property. - &#x60;p95&#x60; 95th percentile of a numeric property. - &#x60;p99&#x60;: 99th percentile of a numeric property. 
        /// </summary>
        /// <value>How to aggregate results, shown as \&quot;counted by\&quot; in the interface. - &#x60;total&#x60; (default): no aggregation, count by events - &#x60;dau&#x60;: count by unique users. Despite the name, if you select the &#x60;interval&#x60; to be weekly or monthly, this will show weekly or monthly active users respectively - &#x60;weekly_active&#x60;: rolling average of users of the last 7 days. - &#x60;monthly_active&#x60;: rolling average of users of the last month. - &#x60;unique_group&#x60;: count by group. Requires &#x60;math_group_type_index&#x60; to be sent. You can get the index by hitting &#x60;/api/projects/@current/groups_types/&#x60;.  All of the below are property aggregations, and require &#x60;math_property&#x60; to be sent with an event property. - &#x60;sum&#x60;: sum of a numeric property. - &#x60;min&#x60;: min of a numeric property. - &#x60;max&#x60;: max of a numeric property. - &#x60;median&#x60;: median of a numeric property. - &#x60;p90&#x60;: 90th percentile of a numeric property. - &#x60;p95&#x60; 95th percentile of a numeric property. - &#x60;p99&#x60;: 99th percentile of a numeric property. </value>
        [DataMember(Name = "math", EmitDefaultValue = false)]
        public MathEnum? Math { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostHogFilterEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostHogFilterEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostHogFilterEvent" /> class.
        /// </summary>
        /// <param name="id">Name of the event to filter on. For example &#x60;$pageview&#x60; or &#x60;user sign up&#x60;. (required).</param>
        /// <param name="properties">properties.</param>
        /// <param name="math">How to aggregate results, shown as \&quot;counted by\&quot; in the interface. - &#x60;total&#x60; (default): no aggregation, count by events - &#x60;dau&#x60;: count by unique users. Despite the name, if you select the &#x60;interval&#x60; to be weekly or monthly, this will show weekly or monthly active users respectively - &#x60;weekly_active&#x60;: rolling average of users of the last 7 days. - &#x60;monthly_active&#x60;: rolling average of users of the last month. - &#x60;unique_group&#x60;: count by group. Requires &#x60;math_group_type_index&#x60; to be sent. You can get the index by hitting &#x60;/api/projects/@current/groups_types/&#x60;.  All of the below are property aggregations, and require &#x60;math_property&#x60; to be sent with an event property. - &#x60;sum&#x60;: sum of a numeric property. - &#x60;min&#x60;: min of a numeric property. - &#x60;max&#x60;: max of a numeric property. - &#x60;median&#x60;: median of a numeric property. - &#x60;p90&#x60;: 90th percentile of a numeric property. - &#x60;p95&#x60; 95th percentile of a numeric property. - &#x60;p99&#x60;: 99th percentile of a numeric property.  (default to MathEnum.Total).</param>
        public PostHogFilterEvent(string id = default(string), List<PostHogProperty> properties = default(List<PostHogProperty>), MathEnum? math = MathEnum.Total)
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for PostHogFilterEvent and cannot be null");
            }
            this.Id = id;
            this.Properties = properties;
            this.Math = math;
        }

        /// <summary>
        /// Name of the event to filter on. For example &#x60;$pageview&#x60; or &#x60;user sign up&#x60;.
        /// </summary>
        /// <value>Name of the event to filter on. For example &#x60;$pageview&#x60; or &#x60;user sign up&#x60;.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public List<PostHogProperty> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostHogFilterEvent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Math: ").Append(Math).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostHogFilterEvent);
        }

        /// <summary>
        /// Returns true if PostHogFilterEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of PostHogFilterEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostHogFilterEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Math == input.Math ||
                    this.Math.Equals(input.Math)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Math.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
