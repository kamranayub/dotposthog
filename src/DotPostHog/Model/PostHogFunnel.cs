/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// PostHogFunnel
    /// </summary>
    [DataContract(Name = "Funnel")]
    public partial class PostHogFunnel : IEquatable<PostHogFunnel>, IValidatableObject
    {
        /// <summary>
        /// Type of property to break down on.
        /// </summary>
        /// <value>Type of property to break down on.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BreakdownTypeEnum
        {
            /// <summary>
            /// Enum Event for value: event
            /// </summary>
            [EnumMember(Value = "event")]
            Event = 1,

            /// <summary>
            /// Enum Person for value: person
            /// </summary>
            [EnumMember(Value = "person")]
            Person = 2,

            /// <summary>
            /// Enum Cohort for value: cohort
            /// </summary>
            [EnumMember(Value = "cohort")]
            Cohort = 3,

            /// <summary>
            /// Enum Group for value: group
            /// </summary>
            [EnumMember(Value = "group")]
            Group = 4,

            /// <summary>
            /// Enum Session for value: session
            /// </summary>
            [EnumMember(Value = "session")]
            Session = 5,

            /// <summary>
            /// Enum Hogql for value: hogql
            /// </summary>
            [EnumMember(Value = "hogql")]
            Hogql = 6
        }


        /// <summary>
        /// Type of property to break down on.
        /// </summary>
        /// <value>Type of property to break down on.</value>
        [DataMember(Name = "breakdown_type", EmitDefaultValue = false)]
        public BreakdownTypeEnum? BreakdownType { get; set; }
        /// <summary>
        /// The type of interval. Used in combination with &#x60;funnel_window_intervals&#x60;.
        /// </summary>
        /// <value>The type of interval. Used in combination with &#x60;funnel_window_intervals&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FunnelWindowIntervalTypeEnum
        {
            /// <summary>
            /// Enum DAY for value: DAY
            /// </summary>
            [EnumMember(Value = "DAY")]
            DAY = 1,

            /// <summary>
            /// Enum SECOND for value: SECOND
            /// </summary>
            [EnumMember(Value = "SECOND")]
            SECOND = 2,

            /// <summary>
            /// Enum MINUTE for value: MINUTE
            /// </summary>
            [EnumMember(Value = "MINUTE")]
            MINUTE = 3,

            /// <summary>
            /// Enum HOUR for value: HOUR
            /// </summary>
            [EnumMember(Value = "HOUR")]
            HOUR = 4,

            /// <summary>
            /// Enum WEEK for value: WEEK
            /// </summary>
            [EnumMember(Value = "WEEK")]
            WEEK = 5,

            /// <summary>
            /// Enum MONTH for value: MONTH
            /// </summary>
            [EnumMember(Value = "MONTH")]
            MONTH = 6
        }


        /// <summary>
        /// The type of interval. Used in combination with &#x60;funnel_window_intervals&#x60;.
        /// </summary>
        /// <value>The type of interval. Used in combination with &#x60;funnel_window_intervals&#x60;.</value>
        [DataMember(Name = "funnel_window_interval_type", EmitDefaultValue = false)]
        public FunnelWindowIntervalTypeEnum? FunnelWindowIntervalType { get; set; }
        /// <summary>
        /// The visualisation type. - &#x60;steps&#x60; Track instances progress between steps of the funnel - &#x60;trends&#x60; Track how this funnel&#39;s conversion rate is trending over time. - &#x60;time_to_convert&#x60; Track how long it takes for instances to convert
        /// </summary>
        /// <value>The visualisation type. - &#x60;steps&#x60; Track instances progress between steps of the funnel - &#x60;trends&#x60; Track how this funnel&#39;s conversion rate is trending over time. - &#x60;time_to_convert&#x60; Track how long it takes for instances to convert</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FunnelVizTypeEnum
        {
            /// <summary>
            /// Enum Trends for value: trends
            /// </summary>
            [EnumMember(Value = "trends")]
            Trends = 1,

            /// <summary>
            /// Enum TimeToConvert for value: time_to_convert
            /// </summary>
            [EnumMember(Value = "time_to_convert")]
            TimeToConvert = 2,

            /// <summary>
            /// Enum Steps for value: steps
            /// </summary>
            [EnumMember(Value = "steps")]
            Steps = 3
        }


        /// <summary>
        /// The visualisation type. - &#x60;steps&#x60; Track instances progress between steps of the funnel - &#x60;trends&#x60; Track how this funnel&#39;s conversion rate is trending over time. - &#x60;time_to_convert&#x60; Track how long it takes for instances to convert
        /// </summary>
        /// <value>The visualisation type. - &#x60;steps&#x60; Track instances progress between steps of the funnel - &#x60;trends&#x60; Track how this funnel&#39;s conversion rate is trending over time. - &#x60;time_to_convert&#x60; Track how long it takes for instances to convert</value>
        [DataMember(Name = "funnel_viz_type", EmitDefaultValue = false)]
        public FunnelVizTypeEnum? FunnelVizType { get; set; }
        /// <summary>
        /// - &#x60;ordered&#x60; - Step B must happen after Step A, but any number events can happen between A and B. - &#x60;strict&#x60; - Step B must happen directly after Step A without any events in between. - &#x60;unordered&#x60; - Steps can be completed in any sequence.
        /// </summary>
        /// <value>- &#x60;ordered&#x60; - Step B must happen after Step A, but any number events can happen between A and B. - &#x60;strict&#x60; - Step B must happen directly after Step A without any events in between. - &#x60;unordered&#x60; - Steps can be completed in any sequence.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FunnelOrderTypeEnum
        {
            /// <summary>
            /// Enum Strict for value: strict
            /// </summary>
            [EnumMember(Value = "strict")]
            Strict = 1,

            /// <summary>
            /// Enum Unordered for value: unordered
            /// </summary>
            [EnumMember(Value = "unordered")]
            Unordered = 2,

            /// <summary>
            /// Enum Ordered for value: ordered
            /// </summary>
            [EnumMember(Value = "ordered")]
            Ordered = 3
        }


        /// <summary>
        /// - &#x60;ordered&#x60; - Step B must happen after Step A, but any number events can happen between A and B. - &#x60;strict&#x60; - Step B must happen directly after Step A without any events in between. - &#x60;unordered&#x60; - Steps can be completed in any sequence.
        /// </summary>
        /// <value>- &#x60;ordered&#x60; - Step B must happen after Step A, but any number events can happen between A and B. - &#x60;strict&#x60; - Step B must happen directly after Step A without any events in between. - &#x60;unordered&#x60; - Steps can be completed in any sequence.</value>
        [DataMember(Name = "funnel_order_type", EmitDefaultValue = false)]
        public FunnelOrderTypeEnum? FunnelOrderType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostHogFunnel" /> class.
        /// </summary>
        /// <param name="events">Events to filter on. One of &#x60;events&#x60; or &#x60;actions&#x60; is required..</param>
        /// <param name="actions">Actions to filter on. One of &#x60;events&#x60; or &#x60;actions&#x60; is required..</param>
        /// <param name="properties">properties.</param>
        /// <param name="filterTestAccounts">Whether to filter out internal and test accounts. See \&quot;project settings\&quot; in your PostHog account for the filters. (default to false).</param>
        /// <param name="dateFrom">What date to filter the results from. Can either be a date &#x60;2021-01-01&#x60;, or a relative date, like &#x60;-7d&#x60; for last seven days, &#x60;-1m&#x60; for last month, &#x60;mStart&#x60; for start of the month or &#x60;yStart&#x60; for the start of the year. (default to &quot;-7d&quot;).</param>
        /// <param name="dateTo">What date to filter the results to. Can either be a date &#x60;2021-01-01&#x60;, or a relative date, like &#x60;-7d&#x60; for last seven days, &#x60;-1m&#x60; for last month, &#x60;mStart&#x60; for start of the month or &#x60;yStart&#x60; for the start of the year. (default to &quot;-7d&quot;).</param>
        /// <param name="breakdown">A property or cohort to break down on. You can select the type of the property with breakdown_type. - &#x60;event&#x60; (default): a property key - &#x60;person&#x60;: a person property key - &#x60;cohort&#x60;: an array of cohort IDs (ie &#x60;[9581,5812]&#x60;).</param>
        /// <param name="breakdownType">Type of property to break down on. (default to BreakdownTypeEnum.Event).</param>
        /// <param name="funnelWindowInterval">Funnel window size. Set in combination with funnel_window_interval, so defaults to &#39;days&#39;. (default to 14).</param>
        /// <param name="funnelWindowIntervalType">The type of interval. Used in combination with &#x60;funnel_window_intervals&#x60;. (default to FunnelWindowIntervalTypeEnum.DAY).</param>
        /// <param name="funnelVizType">The visualisation type. - &#x60;steps&#x60; Track instances progress between steps of the funnel - &#x60;trends&#x60; Track how this funnel&#39;s conversion rate is trending over time. - &#x60;time_to_convert&#x60; Track how long it takes for instances to convert (default to FunnelVizTypeEnum.Steps).</param>
        /// <param name="funnelOrderType">- &#x60;ordered&#x60; - Step B must happen after Step A, but any number events can happen between A and B. - &#x60;strict&#x60; - Step B must happen directly after Step A without any events in between. - &#x60;unordered&#x60; - Steps can be completed in any sequence. (default to FunnelOrderTypeEnum.Ordered).</param>
        /// <param name="exclusions">Exclude users/groups that completed the specified event between two specific steps. Note that these users/groups will be completely excluded from the entire funnel..</param>
        /// <param name="aggregationGroupTypeIndex">Aggregate by users or by groups. &#x60;0&#x60; means user, &#x60;&gt;0&#x60; means a group. See interface for the corresponding ID of the group. (default to 0).</param>
        /// <param name="breakdownLimit">breakdownLimit (default to 10).</param>
        /// <param name="funnelWindowDays">(DEPRECATED) Funnel window size in days. Use &#x60;funnel_window_interval&#x60; and &#x60;funnel_window_interval_type&#x60; (default to 14).</param>
        public PostHogFunnel(List<PostHogFilterEvent> events = default(List<PostHogFilterEvent>), List<PostHogFilterAction> actions = default(List<PostHogFilterAction>), PostHogProperty properties = default(PostHogProperty), bool filterTestAccounts = false, string dateFrom = @"-7d", string dateTo = @"-7d", string breakdown = default(string), BreakdownTypeEnum? breakdownType = BreakdownTypeEnum.Event, int funnelWindowInterval = 14, FunnelWindowIntervalTypeEnum? funnelWindowIntervalType = FunnelWindowIntervalTypeEnum.DAY, FunnelVizTypeEnum? funnelVizType = FunnelVizTypeEnum.Steps, FunnelOrderTypeEnum? funnelOrderType = FunnelOrderTypeEnum.Ordered, List<PostHogFunnelExclusion> exclusions = default(List<PostHogFunnelExclusion>), int aggregationGroupTypeIndex = 0, int breakdownLimit = 10, int funnelWindowDays = 14)
        {
            this.Events = events;
            this.Actions = actions;
            this.Properties = properties;
            this.FilterTestAccounts = filterTestAccounts;
            // use default value if no "dateFrom" provided
            this.DateFrom = dateFrom ?? @"-7d";
            // use default value if no "dateTo" provided
            this.DateTo = dateTo ?? @"-7d";
            this.Breakdown = breakdown;
            this.BreakdownType = breakdownType;
            this.FunnelWindowInterval = funnelWindowInterval;
            this.FunnelWindowIntervalType = funnelWindowIntervalType;
            this.FunnelVizType = funnelVizType;
            this.FunnelOrderType = funnelOrderType;
            this.Exclusions = exclusions;
            this.AggregationGroupTypeIndex = aggregationGroupTypeIndex;
            this.BreakdownLimit = breakdownLimit;
            this.FunnelWindowDays = funnelWindowDays;
        }

        /// <summary>
        /// Events to filter on. One of &#x60;events&#x60; or &#x60;actions&#x60; is required.
        /// </summary>
        /// <value>Events to filter on. One of &#x60;events&#x60; or &#x60;actions&#x60; is required.</value>
        [DataMember(Name = "events", EmitDefaultValue = false)]
        public List<PostHogFilterEvent> Events { get; set; }

        /// <summary>
        /// Actions to filter on. One of &#x60;events&#x60; or &#x60;actions&#x60; is required.
        /// </summary>
        /// <value>Actions to filter on. One of &#x60;events&#x60; or &#x60;actions&#x60; is required.</value>
        [DataMember(Name = "actions", EmitDefaultValue = false)]
        public List<PostHogFilterAction> Actions { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public PostHogProperty Properties { get; set; }

        /// <summary>
        /// Whether to filter out internal and test accounts. See \&quot;project settings\&quot; in your PostHog account for the filters.
        /// </summary>
        /// <value>Whether to filter out internal and test accounts. See \&quot;project settings\&quot; in your PostHog account for the filters.</value>
        [DataMember(Name = "filter_test_accounts", EmitDefaultValue = true)]
        public bool FilterTestAccounts { get; set; }

        /// <summary>
        /// What date to filter the results from. Can either be a date &#x60;2021-01-01&#x60;, or a relative date, like &#x60;-7d&#x60; for last seven days, &#x60;-1m&#x60; for last month, &#x60;mStart&#x60; for start of the month or &#x60;yStart&#x60; for the start of the year.
        /// </summary>
        /// <value>What date to filter the results from. Can either be a date &#x60;2021-01-01&#x60;, or a relative date, like &#x60;-7d&#x60; for last seven days, &#x60;-1m&#x60; for last month, &#x60;mStart&#x60; for start of the month or &#x60;yStart&#x60; for the start of the year.</value>
        [DataMember(Name = "date_from", EmitDefaultValue = false)]
        public string DateFrom { get; set; }

        /// <summary>
        /// What date to filter the results to. Can either be a date &#x60;2021-01-01&#x60;, or a relative date, like &#x60;-7d&#x60; for last seven days, &#x60;-1m&#x60; for last month, &#x60;mStart&#x60; for start of the month or &#x60;yStart&#x60; for the start of the year.
        /// </summary>
        /// <value>What date to filter the results to. Can either be a date &#x60;2021-01-01&#x60;, or a relative date, like &#x60;-7d&#x60; for last seven days, &#x60;-1m&#x60; for last month, &#x60;mStart&#x60; for start of the month or &#x60;yStart&#x60; for the start of the year.</value>
        [DataMember(Name = "date_to", EmitDefaultValue = false)]
        public string DateTo { get; set; }

        /// <summary>
        /// A property or cohort to break down on. You can select the type of the property with breakdown_type. - &#x60;event&#x60; (default): a property key - &#x60;person&#x60;: a person property key - &#x60;cohort&#x60;: an array of cohort IDs (ie &#x60;[9581,5812]&#x60;)
        /// </summary>
        /// <value>A property or cohort to break down on. You can select the type of the property with breakdown_type. - &#x60;event&#x60; (default): a property key - &#x60;person&#x60;: a person property key - &#x60;cohort&#x60;: an array of cohort IDs (ie &#x60;[9581,5812]&#x60;)</value>
        [DataMember(Name = "breakdown", EmitDefaultValue = false)]
        public string Breakdown { get; set; }

        /// <summary>
        /// Funnel window size. Set in combination with funnel_window_interval, so defaults to &#39;days&#39;.
        /// </summary>
        /// <value>Funnel window size. Set in combination with funnel_window_interval, so defaults to &#39;days&#39;.</value>
        [DataMember(Name = "funnel_window_interval", EmitDefaultValue = false)]
        public int FunnelWindowInterval { get; set; }

        /// <summary>
        /// Exclude users/groups that completed the specified event between two specific steps. Note that these users/groups will be completely excluded from the entire funnel.
        /// </summary>
        /// <value>Exclude users/groups that completed the specified event between two specific steps. Note that these users/groups will be completely excluded from the entire funnel.</value>
        [DataMember(Name = "exclusions", EmitDefaultValue = false)]
        public List<PostHogFunnelExclusion> Exclusions { get; set; }

        /// <summary>
        /// Aggregate by users or by groups. &#x60;0&#x60; means user, &#x60;&gt;0&#x60; means a group. See interface for the corresponding ID of the group.
        /// </summary>
        /// <value>Aggregate by users or by groups. &#x60;0&#x60; means user, &#x60;&gt;0&#x60; means a group. See interface for the corresponding ID of the group.</value>
        [DataMember(Name = "aggregation_group_type_index", EmitDefaultValue = false)]
        public int AggregationGroupTypeIndex { get; set; }

        /// <summary>
        /// Gets or Sets BreakdownLimit
        /// </summary>
        [DataMember(Name = "breakdown_limit", EmitDefaultValue = false)]
        public int BreakdownLimit { get; set; }

        /// <summary>
        /// (DEPRECATED) Funnel window size in days. Use &#x60;funnel_window_interval&#x60; and &#x60;funnel_window_interval_type&#x60;
        /// </summary>
        /// <value>(DEPRECATED) Funnel window size in days. Use &#x60;funnel_window_interval&#x60; and &#x60;funnel_window_interval_type&#x60;</value>
        [DataMember(Name = "funnel_window_days", EmitDefaultValue = false)]
        public int FunnelWindowDays { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostHogFunnel {\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  FilterTestAccounts: ").Append(FilterTestAccounts).Append("\n");
            sb.Append("  DateFrom: ").Append(DateFrom).Append("\n");
            sb.Append("  DateTo: ").Append(DateTo).Append("\n");
            sb.Append("  Breakdown: ").Append(Breakdown).Append("\n");
            sb.Append("  BreakdownType: ").Append(BreakdownType).Append("\n");
            sb.Append("  FunnelWindowInterval: ").Append(FunnelWindowInterval).Append("\n");
            sb.Append("  FunnelWindowIntervalType: ").Append(FunnelWindowIntervalType).Append("\n");
            sb.Append("  FunnelVizType: ").Append(FunnelVizType).Append("\n");
            sb.Append("  FunnelOrderType: ").Append(FunnelOrderType).Append("\n");
            sb.Append("  Exclusions: ").Append(Exclusions).Append("\n");
            sb.Append("  AggregationGroupTypeIndex: ").Append(AggregationGroupTypeIndex).Append("\n");
            sb.Append("  BreakdownLimit: ").Append(BreakdownLimit).Append("\n");
            sb.Append("  FunnelWindowDays: ").Append(FunnelWindowDays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostHogFunnel);
        }

        /// <summary>
        /// Returns true if PostHogFunnel instances are equal
        /// </summary>
        /// <param name="input">Instance of PostHogFunnel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostHogFunnel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    input.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                ) && 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    input.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                ) && 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.Equals(input.Properties))
                ) && 
                (
                    this.FilterTestAccounts == input.FilterTestAccounts ||
                    this.FilterTestAccounts.Equals(input.FilterTestAccounts)
                ) && 
                (
                    this.DateFrom == input.DateFrom ||
                    (this.DateFrom != null &&
                    this.DateFrom.Equals(input.DateFrom))
                ) && 
                (
                    this.DateTo == input.DateTo ||
                    (this.DateTo != null &&
                    this.DateTo.Equals(input.DateTo))
                ) && 
                (
                    this.Breakdown == input.Breakdown ||
                    (this.Breakdown != null &&
                    this.Breakdown.Equals(input.Breakdown))
                ) && 
                (
                    this.BreakdownType == input.BreakdownType ||
                    this.BreakdownType.Equals(input.BreakdownType)
                ) && 
                (
                    this.FunnelWindowInterval == input.FunnelWindowInterval ||
                    this.FunnelWindowInterval.Equals(input.FunnelWindowInterval)
                ) && 
                (
                    this.FunnelWindowIntervalType == input.FunnelWindowIntervalType ||
                    this.FunnelWindowIntervalType.Equals(input.FunnelWindowIntervalType)
                ) && 
                (
                    this.FunnelVizType == input.FunnelVizType ||
                    this.FunnelVizType.Equals(input.FunnelVizType)
                ) && 
                (
                    this.FunnelOrderType == input.FunnelOrderType ||
                    this.FunnelOrderType.Equals(input.FunnelOrderType)
                ) && 
                (
                    this.Exclusions == input.Exclusions ||
                    this.Exclusions != null &&
                    input.Exclusions != null &&
                    this.Exclusions.SequenceEqual(input.Exclusions)
                ) && 
                (
                    this.AggregationGroupTypeIndex == input.AggregationGroupTypeIndex ||
                    this.AggregationGroupTypeIndex.Equals(input.AggregationGroupTypeIndex)
                ) && 
                (
                    this.BreakdownLimit == input.BreakdownLimit ||
                    this.BreakdownLimit.Equals(input.BreakdownLimit)
                ) && 
                (
                    this.FunnelWindowDays == input.FunnelWindowDays ||
                    this.FunnelWindowDays.Equals(input.FunnelWindowDays)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Events != null)
                {
                    hashCode = (hashCode * 59) + this.Events.GetHashCode();
                }
                if (this.Actions != null)
                {
                    hashCode = (hashCode * 59) + this.Actions.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FilterTestAccounts.GetHashCode();
                if (this.DateFrom != null)
                {
                    hashCode = (hashCode * 59) + this.DateFrom.GetHashCode();
                }
                if (this.DateTo != null)
                {
                    hashCode = (hashCode * 59) + this.DateTo.GetHashCode();
                }
                if (this.Breakdown != null)
                {
                    hashCode = (hashCode * 59) + this.Breakdown.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BreakdownType.GetHashCode();
                hashCode = (hashCode * 59) + this.FunnelWindowInterval.GetHashCode();
                hashCode = (hashCode * 59) + this.FunnelWindowIntervalType.GetHashCode();
                hashCode = (hashCode * 59) + this.FunnelVizType.GetHashCode();
                hashCode = (hashCode * 59) + this.FunnelOrderType.GetHashCode();
                if (this.Exclusions != null)
                {
                    hashCode = (hashCode * 59) + this.Exclusions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AggregationGroupTypeIndex.GetHashCode();
                hashCode = (hashCode * 59) + this.BreakdownLimit.GetHashCode();
                hashCode = (hashCode * 59) + this.FunnelWindowDays.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
