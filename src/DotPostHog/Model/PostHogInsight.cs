/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// Simplified serializer to speed response times when loading large amounts of objects.
    /// </summary>
    [DataContract(Name = "Insight")]
    public partial class PostHogInsight : IEquatable<PostHogInsight>, IValidatableObject
    {
        /// <summary>
        /// Defines EffectiveRestrictionLevel
        /// </summary>
        public enum EffectiveRestrictionLevelEnum
        {
            /// <summary>
            /// Enum NUMBER_21 for value: 21
            /// </summary>
            NUMBER_21 = 21,

            /// <summary>
            /// Enum NUMBER_37 for value: 37
            /// </summary>
            NUMBER_37 = 37
        }


        /// <summary>
        /// Gets or Sets EffectiveRestrictionLevel
        /// </summary>
        [DataMember(Name = "effective_restriction_level", IsRequired = true, EmitDefaultValue = true)]
        public EffectiveRestrictionLevelEnum EffectiveRestrictionLevel { get; set; }

        /// <summary>
        /// Returns false as EffectiveRestrictionLevel should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEffectiveRestrictionLevel()
        {
            return false;
        }
        /// <summary>
        /// Defines EffectivePrivilegeLevel
        /// </summary>
        public enum EffectivePrivilegeLevelEnum
        {
            /// <summary>
            /// Enum NUMBER_21 for value: 21
            /// </summary>
            NUMBER_21 = 21,

            /// <summary>
            /// Enum NUMBER_37 for value: 37
            /// </summary>
            NUMBER_37 = 37
        }


        /// <summary>
        /// Gets or Sets EffectivePrivilegeLevel
        /// </summary>
        [DataMember(Name = "effective_privilege_level", IsRequired = true, EmitDefaultValue = true)]
        public EffectivePrivilegeLevelEnum EffectivePrivilegeLevel { get; set; }

        /// <summary>
        /// Returns false as EffectivePrivilegeLevel should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEffectivePrivilegeLevel()
        {
            return false;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostHogInsight" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostHogInsight() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostHogInsight" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="derivedName">derivedName.</param>
        /// <param name="filters">filters.</param>
        /// <param name="query">Query node JSON string.</param>
        /// <param name="order">order.</param>
        /// <param name="deleted">deleted.</param>
        /// <param name="dashboards">         DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.         A dashboard ID for each of the dashboards that this insight is displayed on.         .</param>
        /// <param name="description">description.</param>
        /// <param name="tags">tags.</param>
        /// <param name="favorited">favorited.</param>
        /// <param name="saved">saved.</param>
        public PostHogInsight(string name = default(string), string derivedName = default(string), Dictionary<string, Object> filters = default(Dictionary<string, Object>), Dictionary<string, Object> query = default(Dictionary<string, Object>), int? order = default(int?), bool deleted = default(bool), List<int> dashboards = default(List<int>), string description = default(string), List<Object> tags = default(List<Object>), bool favorited = default(bool), bool saved = default(bool))
        {
            this.Name = name;
            this.DerivedName = derivedName;
            this.Filters = filters;
            this.Query = query;
            this.Order = order;
            this.Deleted = deleted;
            this.Dashboards = dashboards;
            this.Description = description;
            this.Tags = tags;
            this.Favorited = favorited;
            this.Saved = saved;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ShortId
        /// </summary>
        [DataMember(Name = "short_id", IsRequired = true, EmitDefaultValue = true)]
        public string ShortId { get; private set; }

        /// <summary>
        /// Returns false as ShortId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShortId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DerivedName
        /// </summary>
        [DataMember(Name = "derived_name", EmitDefaultValue = true)]
        public string DerivedName { get; set; }

        /// <summary>
        /// Gets or Sets Filters
        /// </summary>
        [DataMember(Name = "filters", EmitDefaultValue = false)]
        public Dictionary<string, Object> Filters { get; set; }

        /// <summary>
        /// Query node JSON string
        /// </summary>
        /// <value>Query node JSON string</value>
        [DataMember(Name = "query", EmitDefaultValue = true)]
        public Dictionary<string, Object> Query { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public int? Order { get; set; }

        /// <summary>
        /// Gets or Sets Deleted
        /// </summary>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool Deleted { get; set; }

        /// <summary>
        ///          DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.         A dashboard ID for each of the dashboards that this insight is displayed on.         
        /// </summary>
        /// <value>         DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.         A dashboard ID for each of the dashboards that this insight is displayed on.         </value>
        [DataMember(Name = "dashboards", EmitDefaultValue = false)]
        public List<int> Dashboards { get; set; }

        /// <summary>
        ///      A dashboard tile ID and dashboard_id for each of the dashboards that this insight is displayed on.     
        /// </summary>
        /// <value>     A dashboard tile ID and dashboard_id for each of the dashboards that this insight is displayed on.     </value>
        [DataMember(Name = "dashboard_tiles", IsRequired = true, EmitDefaultValue = true)]
        public List<PostHogDashboardTileBasic> DashboardTiles { get; private set; }

        /// <summary>
        /// Returns false as DashboardTiles should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDashboardTiles()
        {
            return false;
        }
        /// <summary>
        ///      The datetime this insight&#39;s results were generated.     If added to one or more dashboards the insight can be refreshed separately on each.     Returns the appropriate last_refresh datetime for the context the insight is viewed in     (see from_dashboard query parameter).     
        /// </summary>
        /// <value>     The datetime this insight&#39;s results were generated.     If added to one or more dashboards the insight can be refreshed separately on each.     Returns the appropriate last_refresh datetime for the context the insight is viewed in     (see from_dashboard query parameter).     </value>
        [DataMember(Name = "last_refresh", IsRequired = true, EmitDefaultValue = true)]
        public string LastRefresh { get; private set; }

        /// <summary>
        /// Returns false as LastRefresh should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastRefresh()
        {
            return false;
        }
        /// <summary>
        ///      The earliest possible datetime at which we&#39;ll allow the cached results for this insight to be refreshed     by querying the database.     
        /// </summary>
        /// <value>     The earliest possible datetime at which we&#39;ll allow the cached results for this insight to be refreshed     by querying the database.     </value>
        [DataMember(Name = "next_allowed_client_refresh", IsRequired = true, EmitDefaultValue = true)]
        public string NextAllowedClientRefresh { get; private set; }

        /// <summary>
        /// Returns false as NextAllowedClientRefresh should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNextAllowedClientRefresh()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "result", IsRequired = true, EmitDefaultValue = true)]
        public string Result { get; private set; }

        /// <summary>
        /// Returns false as Result should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResult()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", IsRequired = true, EmitDefaultValue = true)]
        public PostHogUserBasic CreatedBy { get; private set; }

        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<Object> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Favorited
        /// </summary>
        [DataMember(Name = "favorited", EmitDefaultValue = true)]
        public bool Favorited { get; set; }

        /// <summary>
        /// Gets or Sets Saved
        /// </summary>
        [DataMember(Name = "saved", EmitDefaultValue = true)]
        public bool Saved { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedAt
        /// </summary>
        [DataMember(Name = "last_modified_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime LastModifiedAt { get; private set; }

        /// <summary>
        /// Returns false as LastModifiedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastModifiedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets LastModifiedBy
        /// </summary>
        [DataMember(Name = "last_modified_by", IsRequired = true, EmitDefaultValue = true)]
        public PostHogUserBasic LastModifiedBy { get; private set; }

        /// <summary>
        /// Returns false as LastModifiedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastModifiedBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsSample
        /// </summary>
        [DataMember(Name = "is_sample", IsRequired = true, EmitDefaultValue = true)]
        public bool IsSample { get; private set; }

        /// <summary>
        /// Returns false as IsSample should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsSample()
        {
            return false;
        }
        /// <summary>
        /// The timezone this chart is displayed in.
        /// </summary>
        /// <value>The timezone this chart is displayed in.</value>
        [DataMember(Name = "timezone", IsRequired = true, EmitDefaultValue = true)]
        public string Timezone { get; private set; }

        /// <summary>
        /// Returns false as Timezone should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTimezone()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsCached
        /// </summary>
        [DataMember(Name = "is_cached", IsRequired = true, EmitDefaultValue = true)]
        public string IsCached { get; private set; }

        /// <summary>
        /// Returns false as IsCached should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsCached()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostHogInsight {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ShortId: ").Append(ShortId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DerivedName: ").Append(DerivedName).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  Dashboards: ").Append(Dashboards).Append("\n");
            sb.Append("  DashboardTiles: ").Append(DashboardTiles).Append("\n");
            sb.Append("  LastRefresh: ").Append(LastRefresh).Append("\n");
            sb.Append("  NextAllowedClientRefresh: ").Append(NextAllowedClientRefresh).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Favorited: ").Append(Favorited).Append("\n");
            sb.Append("  Saved: ").Append(Saved).Append("\n");
            sb.Append("  LastModifiedAt: ").Append(LastModifiedAt).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  IsSample: ").Append(IsSample).Append("\n");
            sb.Append("  EffectiveRestrictionLevel: ").Append(EffectiveRestrictionLevel).Append("\n");
            sb.Append("  EffectivePrivilegeLevel: ").Append(EffectivePrivilegeLevel).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  IsCached: ").Append(IsCached).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostHogInsight);
        }

        /// <summary>
        /// Returns true if PostHogInsight instances are equal
        /// </summary>
        /// <param name="input">Instance of PostHogInsight to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostHogInsight input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ShortId == input.ShortId ||
                    (this.ShortId != null &&
                    this.ShortId.Equals(input.ShortId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DerivedName == input.DerivedName ||
                    (this.DerivedName != null &&
                    this.DerivedName.Equals(input.DerivedName))
                ) && 
                (
                    this.Filters == input.Filters ||
                    this.Filters != null &&
                    input.Filters != null &&
                    this.Filters.SequenceEqual(input.Filters)
                ) && 
                (
                    this.Query == input.Query ||
                    this.Query != null &&
                    input.Query != null &&
                    this.Query.SequenceEqual(input.Query)
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    this.Deleted.Equals(input.Deleted)
                ) && 
                (
                    this.Dashboards == input.Dashboards ||
                    this.Dashboards != null &&
                    input.Dashboards != null &&
                    this.Dashboards.SequenceEqual(input.Dashboards)
                ) && 
                (
                    this.DashboardTiles == input.DashboardTiles ||
                    this.DashboardTiles != null &&
                    input.DashboardTiles != null &&
                    this.DashboardTiles.SequenceEqual(input.DashboardTiles)
                ) && 
                (
                    this.LastRefresh == input.LastRefresh ||
                    (this.LastRefresh != null &&
                    this.LastRefresh.Equals(input.LastRefresh))
                ) && 
                (
                    this.NextAllowedClientRefresh == input.NextAllowedClientRefresh ||
                    (this.NextAllowedClientRefresh != null &&
                    this.NextAllowedClientRefresh.Equals(input.NextAllowedClientRefresh))
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Favorited == input.Favorited ||
                    this.Favorited.Equals(input.Favorited)
                ) && 
                (
                    this.Saved == input.Saved ||
                    this.Saved.Equals(input.Saved)
                ) && 
                (
                    this.LastModifiedAt == input.LastModifiedAt ||
                    (this.LastModifiedAt != null &&
                    this.LastModifiedAt.Equals(input.LastModifiedAt))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.IsSample == input.IsSample ||
                    this.IsSample.Equals(input.IsSample)
                ) && 
                (
                    this.EffectiveRestrictionLevel == input.EffectiveRestrictionLevel ||
                    this.EffectiveRestrictionLevel.Equals(input.EffectiveRestrictionLevel)
                ) && 
                (
                    this.EffectivePrivilegeLevel == input.EffectivePrivilegeLevel ||
                    this.EffectivePrivilegeLevel.Equals(input.EffectivePrivilegeLevel)
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.IsCached == input.IsCached ||
                    (this.IsCached != null &&
                    this.IsCached.Equals(input.IsCached))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.ShortId != null)
                {
                    hashCode = (hashCode * 59) + this.ShortId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.DerivedName != null)
                {
                    hashCode = (hashCode * 59) + this.DerivedName.GetHashCode();
                }
                if (this.Filters != null)
                {
                    hashCode = (hashCode * 59) + this.Filters.GetHashCode();
                }
                if (this.Query != null)
                {
                    hashCode = (hashCode * 59) + this.Query.GetHashCode();
                }
                if (this.Order != null)
                {
                    hashCode = (hashCode * 59) + this.Order.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Deleted.GetHashCode();
                if (this.Dashboards != null)
                {
                    hashCode = (hashCode * 59) + this.Dashboards.GetHashCode();
                }
                if (this.DashboardTiles != null)
                {
                    hashCode = (hashCode * 59) + this.DashboardTiles.GetHashCode();
                }
                if (this.LastRefresh != null)
                {
                    hashCode = (hashCode * 59) + this.LastRefresh.GetHashCode();
                }
                if (this.NextAllowedClientRefresh != null)
                {
                    hashCode = (hashCode * 59) + this.NextAllowedClientRefresh.GetHashCode();
                }
                if (this.Result != null)
                {
                    hashCode = (hashCode * 59) + this.Result.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Favorited.GetHashCode();
                hashCode = (hashCode * 59) + this.Saved.GetHashCode();
                if (this.LastModifiedAt != null)
                {
                    hashCode = (hashCode * 59) + this.LastModifiedAt.GetHashCode();
                }
                if (this.LastModifiedBy != null)
                {
                    hashCode = (hashCode * 59) + this.LastModifiedBy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsSample.GetHashCode();
                hashCode = (hashCode * 59) + this.EffectiveRestrictionLevel.GetHashCode();
                hashCode = (hashCode * 59) + this.EffectivePrivilegeLevel.GetHashCode();
                if (this.Timezone != null)
                {
                    hashCode = (hashCode * 59) + this.Timezone.GetHashCode();
                }
                if (this.IsCached != null)
                {
                    hashCode = (hashCode * 59) + this.IsCached.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 400)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 400.", new [] { "Name" });
            }

            // DerivedName (string) maxLength
            if (this.DerivedName != null && this.DerivedName.Length > 400)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DerivedName, length must be less than 400.", new [] { "DerivedName" });
            }

            // Order (int?) maximum
            if (this.Order > (int?)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value less than or equal to 2147483647.", new [] { "Order" });
            }

            // Order (int?) minimum
            if (this.Order < (int?)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value greater than or equal to -2147483648.", new [] { "Order" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 400)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 400.", new [] { "Description" });
            }

            yield break;
        }
    }

}
