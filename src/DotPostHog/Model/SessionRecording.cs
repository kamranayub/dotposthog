/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// SessionRecording
    /// </summary>
    [DataContract(Name = "SessionRecording")]
    public partial class SessionRecording : IEquatable<SessionRecording>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionRecording" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SessionRecording() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionRecording" /> class.
        /// </summary>
        /// <param name="person">person.</param>
        public SessionRecording(MinimalPerson person = default(MinimalPerson))
        {
            this.Person = person;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets DistinctId
        /// </summary>
        [DataMember(Name = "distinct_id", IsRequired = true, EmitDefaultValue = true)]
        public string DistinctId { get; private set; }

        /// <summary>
        /// Returns false as DistinctId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDistinctId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Viewed
        /// </summary>
        [DataMember(Name = "viewed", IsRequired = true, EmitDefaultValue = true)]
        public string Viewed { get; private set; }

        /// <summary>
        /// Returns false as Viewed should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeViewed()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets RecordingDuration
        /// </summary>
        [DataMember(Name = "recording_duration", IsRequired = true, EmitDefaultValue = true)]
        public int RecordingDuration { get; private set; }

        /// <summary>
        /// Returns false as RecordingDuration should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRecordingDuration()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ActiveSeconds
        /// </summary>
        [DataMember(Name = "active_seconds", IsRequired = true, EmitDefaultValue = true)]
        public int? ActiveSeconds { get; private set; }

        /// <summary>
        /// Returns false as ActiveSeconds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActiveSeconds()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets InactiveSeconds
        /// </summary>
        [DataMember(Name = "inactive_seconds", IsRequired = true, EmitDefaultValue = true)]
        public int? InactiveSeconds { get; private set; }

        /// <summary>
        /// Returns false as InactiveSeconds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInactiveSeconds()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "start_time", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? StartTime { get; private set; }

        /// <summary>
        /// Returns false as StartTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStartTime()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "end_time", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? EndTime { get; private set; }

        /// <summary>
        /// Returns false as EndTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEndTime()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ClickCount
        /// </summary>
        [DataMember(Name = "click_count", IsRequired = true, EmitDefaultValue = true)]
        public int? ClickCount { get; private set; }

        /// <summary>
        /// Returns false as ClickCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClickCount()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets KeypressCount
        /// </summary>
        [DataMember(Name = "keypress_count", IsRequired = true, EmitDefaultValue = true)]
        public int? KeypressCount { get; private set; }

        /// <summary>
        /// Returns false as KeypressCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeKeypressCount()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets MouseActivityCount
        /// </summary>
        [DataMember(Name = "mouse_activity_count", IsRequired = true, EmitDefaultValue = true)]
        public int? MouseActivityCount { get; private set; }

        /// <summary>
        /// Returns false as MouseActivityCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMouseActivityCount()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ConsoleLogCount
        /// </summary>
        [DataMember(Name = "console_log_count", IsRequired = true, EmitDefaultValue = true)]
        public int? ConsoleLogCount { get; private set; }

        /// <summary>
        /// Returns false as ConsoleLogCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeConsoleLogCount()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ConsoleWarnCount
        /// </summary>
        [DataMember(Name = "console_warn_count", IsRequired = true, EmitDefaultValue = true)]
        public int? ConsoleWarnCount { get; private set; }

        /// <summary>
        /// Returns false as ConsoleWarnCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeConsoleWarnCount()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ConsoleErrorCount
        /// </summary>
        [DataMember(Name = "console_error_count", IsRequired = true, EmitDefaultValue = true)]
        public int? ConsoleErrorCount { get; private set; }

        /// <summary>
        /// Returns false as ConsoleErrorCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeConsoleErrorCount()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets StartUrl
        /// </summary>
        [DataMember(Name = "start_url", IsRequired = true, EmitDefaultValue = true)]
        public string StartUrl { get; private set; }

        /// <summary>
        /// Returns false as StartUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStartUrl()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Person
        /// </summary>
        [DataMember(Name = "person", EmitDefaultValue = false)]
        public MinimalPerson Person { get; set; }

        /// <summary>
        /// Gets or Sets Storage
        /// </summary>
        [DataMember(Name = "storage", IsRequired = true, EmitDefaultValue = true)]
        public string Storage { get; private set; }

        /// <summary>
        /// Returns false as Storage should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStorage()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SessionRecording {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DistinctId: ").Append(DistinctId).Append("\n");
            sb.Append("  Viewed: ").Append(Viewed).Append("\n");
            sb.Append("  RecordingDuration: ").Append(RecordingDuration).Append("\n");
            sb.Append("  ActiveSeconds: ").Append(ActiveSeconds).Append("\n");
            sb.Append("  InactiveSeconds: ").Append(InactiveSeconds).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  ClickCount: ").Append(ClickCount).Append("\n");
            sb.Append("  KeypressCount: ").Append(KeypressCount).Append("\n");
            sb.Append("  MouseActivityCount: ").Append(MouseActivityCount).Append("\n");
            sb.Append("  ConsoleLogCount: ").Append(ConsoleLogCount).Append("\n");
            sb.Append("  ConsoleWarnCount: ").Append(ConsoleWarnCount).Append("\n");
            sb.Append("  ConsoleErrorCount: ").Append(ConsoleErrorCount).Append("\n");
            sb.Append("  StartUrl: ").Append(StartUrl).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  Storage: ").Append(Storage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SessionRecording);
        }

        /// <summary>
        /// Returns true if SessionRecording instances are equal
        /// </summary>
        /// <param name="input">Instance of SessionRecording to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionRecording input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DistinctId == input.DistinctId ||
                    (this.DistinctId != null &&
                    this.DistinctId.Equals(input.DistinctId))
                ) && 
                (
                    this.Viewed == input.Viewed ||
                    (this.Viewed != null &&
                    this.Viewed.Equals(input.Viewed))
                ) && 
                (
                    this.RecordingDuration == input.RecordingDuration ||
                    this.RecordingDuration.Equals(input.RecordingDuration)
                ) && 
                (
                    this.ActiveSeconds == input.ActiveSeconds ||
                    (this.ActiveSeconds != null &&
                    this.ActiveSeconds.Equals(input.ActiveSeconds))
                ) && 
                (
                    this.InactiveSeconds == input.InactiveSeconds ||
                    (this.InactiveSeconds != null &&
                    this.InactiveSeconds.Equals(input.InactiveSeconds))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.ClickCount == input.ClickCount ||
                    (this.ClickCount != null &&
                    this.ClickCount.Equals(input.ClickCount))
                ) && 
                (
                    this.KeypressCount == input.KeypressCount ||
                    (this.KeypressCount != null &&
                    this.KeypressCount.Equals(input.KeypressCount))
                ) && 
                (
                    this.MouseActivityCount == input.MouseActivityCount ||
                    (this.MouseActivityCount != null &&
                    this.MouseActivityCount.Equals(input.MouseActivityCount))
                ) && 
                (
                    this.ConsoleLogCount == input.ConsoleLogCount ||
                    (this.ConsoleLogCount != null &&
                    this.ConsoleLogCount.Equals(input.ConsoleLogCount))
                ) && 
                (
                    this.ConsoleWarnCount == input.ConsoleWarnCount ||
                    (this.ConsoleWarnCount != null &&
                    this.ConsoleWarnCount.Equals(input.ConsoleWarnCount))
                ) && 
                (
                    this.ConsoleErrorCount == input.ConsoleErrorCount ||
                    (this.ConsoleErrorCount != null &&
                    this.ConsoleErrorCount.Equals(input.ConsoleErrorCount))
                ) && 
                (
                    this.StartUrl == input.StartUrl ||
                    (this.StartUrl != null &&
                    this.StartUrl.Equals(input.StartUrl))
                ) && 
                (
                    this.Person == input.Person ||
                    (this.Person != null &&
                    this.Person.Equals(input.Person))
                ) && 
                (
                    this.Storage == input.Storage ||
                    (this.Storage != null &&
                    this.Storage.Equals(input.Storage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.DistinctId != null)
                {
                    hashCode = (hashCode * 59) + this.DistinctId.GetHashCode();
                }
                if (this.Viewed != null)
                {
                    hashCode = (hashCode * 59) + this.Viewed.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RecordingDuration.GetHashCode();
                if (this.ActiveSeconds != null)
                {
                    hashCode = (hashCode * 59) + this.ActiveSeconds.GetHashCode();
                }
                if (this.InactiveSeconds != null)
                {
                    hashCode = (hashCode * 59) + this.InactiveSeconds.GetHashCode();
                }
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                if (this.EndTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                }
                if (this.ClickCount != null)
                {
                    hashCode = (hashCode * 59) + this.ClickCount.GetHashCode();
                }
                if (this.KeypressCount != null)
                {
                    hashCode = (hashCode * 59) + this.KeypressCount.GetHashCode();
                }
                if (this.MouseActivityCount != null)
                {
                    hashCode = (hashCode * 59) + this.MouseActivityCount.GetHashCode();
                }
                if (this.ConsoleLogCount != null)
                {
                    hashCode = (hashCode * 59) + this.ConsoleLogCount.GetHashCode();
                }
                if (this.ConsoleWarnCount != null)
                {
                    hashCode = (hashCode * 59) + this.ConsoleWarnCount.GetHashCode();
                }
                if (this.ConsoleErrorCount != null)
                {
                    hashCode = (hashCode * 59) + this.ConsoleErrorCount.GetHashCode();
                }
                if (this.StartUrl != null)
                {
                    hashCode = (hashCode * 59) + this.StartUrl.GetHashCode();
                }
                if (this.Person != null)
                {
                    hashCode = (hashCode * 59) + this.Person.GetHashCode();
                }
                if (this.Storage != null)
                {
                    hashCode = (hashCode * 59) + this.Storage.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
