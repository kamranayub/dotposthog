/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// PostHogPluginLogEntry
    /// </summary>
    [DataContract(Name = "PluginLogEntry")]
    public partial class PostHogPluginLogEntry : IEquatable<PostHogPluginLogEntry>, IValidatableObject
    {
        /// <summary>
        /// Defines Source
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceEnum
        {
            /// <summary>
            /// Enum SYSTEM for value: SYSTEM
            /// </summary>
            [EnumMember(Value = "SYSTEM")]
            SYSTEM = 1,

            /// <summary>
            /// Enum PLUGIN for value: PLUGIN
            /// </summary>
            [EnumMember(Value = "PLUGIN")]
            PLUGIN = 2,

            /// <summary>
            /// Enum CONSOLE for value: CONSOLE
            /// </summary>
            [EnumMember(Value = "CONSOLE")]
            CONSOLE = 3
        }


        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = true)]
        public SourceEnum Source { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum DEBUG for value: DEBUG
            /// </summary>
            [EnumMember(Value = "DEBUG")]
            DEBUG = 1,

            /// <summary>
            /// Enum LOG for value: LOG
            /// </summary>
            [EnumMember(Value = "LOG")]
            LOG = 2,

            /// <summary>
            /// Enum INFO for value: INFO
            /// </summary>
            [EnumMember(Value = "INFO")]
            INFO = 3,

            /// <summary>
            /// Enum WARN for value: WARN
            /// </summary>
            [EnumMember(Value = "WARN")]
            WARN = 4,

            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 5
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostHogPluginLogEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostHogPluginLogEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostHogPluginLogEntry" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="teamId">teamId (required).</param>
        /// <param name="pluginId">pluginId (required).</param>
        /// <param name="pluginConfigId">pluginConfigId (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="source">source (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="message">message (required).</param>
        /// <param name="instanceId">instanceId (required).</param>
        public PostHogPluginLogEntry(Guid id = default(Guid), int teamId = default(int), int pluginId = default(int), int pluginConfigId = default(int), DateTime timestamp = default(DateTime), SourceEnum source = default(SourceEnum), TypeEnum type = default(TypeEnum), string message = default(string), Guid instanceId = default(Guid))
        {
            this.Id = id;
            this.TeamId = teamId;
            this.PluginId = pluginId;
            this.PluginConfigId = pluginConfigId;
            this.Timestamp = timestamp;
            this.Source = source;
            this.Type = type;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for PostHogPluginLogEntry and cannot be null");
            }
            this.Message = message;
            this.InstanceId = instanceId;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name = "team_id", IsRequired = true, EmitDefaultValue = true)]
        public int TeamId { get; set; }

        /// <summary>
        /// Gets or Sets PluginId
        /// </summary>
        [DataMember(Name = "plugin_id", IsRequired = true, EmitDefaultValue = true)]
        public int PluginId { get; set; }

        /// <summary>
        /// Gets or Sets PluginConfigId
        /// </summary>
        [DataMember(Name = "plugin_config_id", IsRequired = true, EmitDefaultValue = true)]
        public int PluginConfigId { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets InstanceId
        /// </summary>
        [DataMember(Name = "instance_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid InstanceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostHogPluginLogEntry {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  PluginId: ").Append(PluginId).Append("\n");
            sb.Append("  PluginConfigId: ").Append(PluginConfigId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostHogPluginLogEntry);
        }

        /// <summary>
        /// Returns true if PostHogPluginLogEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of PostHogPluginLogEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostHogPluginLogEntry input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TeamId == input.TeamId ||
                    this.TeamId.Equals(input.TeamId)
                ) && 
                (
                    this.PluginId == input.PluginId ||
                    this.PluginId.Equals(input.PluginId)
                ) && 
                (
                    this.PluginConfigId == input.PluginConfigId ||
                    this.PluginConfigId.Equals(input.PluginConfigId)
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Source == input.Source ||
                    this.Source.Equals(input.Source)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.InstanceId == input.InstanceId ||
                    (this.InstanceId != null &&
                    this.InstanceId.Equals(input.InstanceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TeamId.GetHashCode();
                hashCode = (hashCode * 59) + this.PluginId.GetHashCode();
                hashCode = (hashCode * 59) + this.PluginConfigId.GetHashCode();
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Source.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.InstanceId != null)
                {
                    hashCode = (hashCode * 59) + this.InstanceId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
