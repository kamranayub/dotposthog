/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// BatchExportLogEntry
    /// </summary>
    [DataContract(Name = "BatchExportLogEntry")]
    public partial class BatchExportLogEntry : IEquatable<BatchExportLogEntry>, IValidatableObject
    {
        /// <summary>
        /// Defines Level
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LevelEnum
        {
            /// <summary>
            /// Enum DEBUG for value: DEBUG
            /// </summary>
            [EnumMember(Value = "DEBUG")]
            DEBUG = 1,

            /// <summary>
            /// Enum LOG for value: LOG
            /// </summary>
            [EnumMember(Value = "LOG")]
            LOG = 2,

            /// <summary>
            /// Enum INFO for value: INFO
            /// </summary>
            [EnumMember(Value = "INFO")]
            INFO = 3,

            /// <summary>
            /// Enum WARNING for value: WARNING
            /// </summary>
            [EnumMember(Value = "WARNING")]
            WARNING = 4,

            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 5
        }


        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name = "level", IsRequired = true, EmitDefaultValue = true)]
        public LevelEnum Level { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchExportLogEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BatchExportLogEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchExportLogEntry" /> class.
        /// </summary>
        /// <param name="teamId">teamId (required).</param>
        /// <param name="batchExportId">batchExportId (required).</param>
        /// <param name="runId">runId (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="level">level (required).</param>
        /// <param name="message">message (required).</param>
        public BatchExportLogEntry(int teamId = default(int), string batchExportId = default(string), string runId = default(string), DateTime timestamp = default(DateTime), LevelEnum level = default(LevelEnum), string message = default(string))
        {
            this.TeamId = teamId;
            // to ensure "batchExportId" is required (not null)
            if (batchExportId == null)
            {
                throw new ArgumentNullException("batchExportId is a required property for BatchExportLogEntry and cannot be null");
            }
            this.BatchExportId = batchExportId;
            // to ensure "runId" is required (not null)
            if (runId == null)
            {
                throw new ArgumentNullException("runId is a required property for BatchExportLogEntry and cannot be null");
            }
            this.RunId = runId;
            this.Timestamp = timestamp;
            this.Level = level;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for BatchExportLogEntry and cannot be null");
            }
            this.Message = message;
        }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name = "team_id", IsRequired = true, EmitDefaultValue = true)]
        public int TeamId { get; set; }

        /// <summary>
        /// Gets or Sets BatchExportId
        /// </summary>
        [DataMember(Name = "batch_export_id", IsRequired = true, EmitDefaultValue = true)]
        public string BatchExportId { get; set; }

        /// <summary>
        /// Gets or Sets RunId
        /// </summary>
        [DataMember(Name = "run_id", IsRequired = true, EmitDefaultValue = true)]
        public string RunId { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchExportLogEntry {\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  BatchExportId: ").Append(BatchExportId).Append("\n");
            sb.Append("  RunId: ").Append(RunId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchExportLogEntry);
        }

        /// <summary>
        /// Returns true if BatchExportLogEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchExportLogEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchExportLogEntry input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TeamId == input.TeamId ||
                    this.TeamId.Equals(input.TeamId)
                ) && 
                (
                    this.BatchExportId == input.BatchExportId ||
                    (this.BatchExportId != null &&
                    this.BatchExportId.Equals(input.BatchExportId))
                ) && 
                (
                    this.RunId == input.RunId ||
                    (this.RunId != null &&
                    this.RunId.Equals(input.RunId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Level == input.Level ||
                    this.Level.Equals(input.Level)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TeamId.GetHashCode();
                if (this.BatchExportId != null)
                {
                    hashCode = (hashCode * 59) + this.BatchExportId.GetHashCode();
                }
                if (this.RunId != null)
                {
                    hashCode = (hashCode * 59) + this.RunId.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Level.GetHashCode();
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
