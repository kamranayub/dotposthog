/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// Property
    /// </summary>
    [DataContract(Name = "Property")]
    public partial class Property : IEquatable<Property>, IValidatableObject
    {
        /// <summary>
        ///   You can use a simplified version: &#x60;&#x60;&#x60;json {     \&quot;properties\&quot;: [         {             \&quot;key\&quot;: \&quot;email\&quot;,             \&quot;value\&quot;: \&quot;x@y.com\&quot;,             \&quot;operator\&quot;: \&quot;exact\&quot;,             \&quot;type\&quot;: \&quot;event\&quot;         }     ] } &#x60;&#x60;&#x60;  Or you can create more complicated queries with AND and OR: &#x60;&#x60;&#x60;json {     \&quot;properties\&quot;: {         \&quot;type\&quot;: \&quot;AND\&quot;,         \&quot;values\&quot;: [             {                 \&quot;type\&quot;: \&quot;OR\&quot;,                 \&quot;values\&quot;: [                     {\&quot;key\&quot;: \&quot;email\&quot;, ...},                     {\&quot;key\&quot;: \&quot;email\&quot;, ...}                 ]             },             {                 \&quot;type\&quot;: \&quot;AND\&quot;,                 \&quot;values\&quot;: [                     {\&quot;key\&quot;: \&quot;email\&quot;, ...},                     {\&quot;key\&quot;: \&quot;email\&quot;, ...}                 ]             }         ]     ] } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <value>  You can use a simplified version: &#x60;&#x60;&#x60;json {     \&quot;properties\&quot;: [         {             \&quot;key\&quot;: \&quot;email\&quot;,             \&quot;value\&quot;: \&quot;x@y.com\&quot;,             \&quot;operator\&quot;: \&quot;exact\&quot;,             \&quot;type\&quot;: \&quot;event\&quot;         }     ] } &#x60;&#x60;&#x60;  Or you can create more complicated queries with AND and OR: &#x60;&#x60;&#x60;json {     \&quot;properties\&quot;: {         \&quot;type\&quot;: \&quot;AND\&quot;,         \&quot;values\&quot;: [             {                 \&quot;type\&quot;: \&quot;OR\&quot;,                 \&quot;values\&quot;: [                     {\&quot;key\&quot;: \&quot;email\&quot;, ...},                     {\&quot;key\&quot;: \&quot;email\&quot;, ...}                 ]             },             {                 \&quot;type\&quot;: \&quot;AND\&quot;,                 \&quot;values\&quot;: [                     {\&quot;key\&quot;: \&quot;email\&quot;, ...},                     {\&quot;key\&quot;: \&quot;email\&quot;, ...}                 ]             }         ]     ] } &#x60;&#x60;&#x60; </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum AND for value: AND
            /// </summary>
            [EnumMember(Value = "AND")]
            AND = 1,

            /// <summary>
            /// Enum OR for value: OR
            /// </summary>
            [EnumMember(Value = "OR")]
            OR = 2
        }


        /// <summary>
        ///   You can use a simplified version: &#x60;&#x60;&#x60;json {     \&quot;properties\&quot;: [         {             \&quot;key\&quot;: \&quot;email\&quot;,             \&quot;value\&quot;: \&quot;x@y.com\&quot;,             \&quot;operator\&quot;: \&quot;exact\&quot;,             \&quot;type\&quot;: \&quot;event\&quot;         }     ] } &#x60;&#x60;&#x60;  Or you can create more complicated queries with AND and OR: &#x60;&#x60;&#x60;json {     \&quot;properties\&quot;: {         \&quot;type\&quot;: \&quot;AND\&quot;,         \&quot;values\&quot;: [             {                 \&quot;type\&quot;: \&quot;OR\&quot;,                 \&quot;values\&quot;: [                     {\&quot;key\&quot;: \&quot;email\&quot;, ...},                     {\&quot;key\&quot;: \&quot;email\&quot;, ...}                 ]             },             {                 \&quot;type\&quot;: \&quot;AND\&quot;,                 \&quot;values\&quot;: [                     {\&quot;key\&quot;: \&quot;email\&quot;, ...},                     {\&quot;key\&quot;: \&quot;email\&quot;, ...}                 ]             }         ]     ] } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <value>  You can use a simplified version: &#x60;&#x60;&#x60;json {     \&quot;properties\&quot;: [         {             \&quot;key\&quot;: \&quot;email\&quot;,             \&quot;value\&quot;: \&quot;x@y.com\&quot;,             \&quot;operator\&quot;: \&quot;exact\&quot;,             \&quot;type\&quot;: \&quot;event\&quot;         }     ] } &#x60;&#x60;&#x60;  Or you can create more complicated queries with AND and OR: &#x60;&#x60;&#x60;json {     \&quot;properties\&quot;: {         \&quot;type\&quot;: \&quot;AND\&quot;,         \&quot;values\&quot;: [             {                 \&quot;type\&quot;: \&quot;OR\&quot;,                 \&quot;values\&quot;: [                     {\&quot;key\&quot;: \&quot;email\&quot;, ...},                     {\&quot;key\&quot;: \&quot;email\&quot;, ...}                 ]             },             {                 \&quot;type\&quot;: \&quot;AND\&quot;,                 \&quot;values\&quot;: [                     {\&quot;key\&quot;: \&quot;email\&quot;, ...},                     {\&quot;key\&quot;: \&quot;email\&quot;, ...}                 ]             }         ]     ] } &#x60;&#x60;&#x60; </value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Property" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Property() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Property" /> class.
        /// </summary>
        /// <param name="type">  You can use a simplified version: &#x60;&#x60;&#x60;json {     \&quot;properties\&quot;: [         {             \&quot;key\&quot;: \&quot;email\&quot;,             \&quot;value\&quot;: \&quot;x@y.com\&quot;,             \&quot;operator\&quot;: \&quot;exact\&quot;,             \&quot;type\&quot;: \&quot;event\&quot;         }     ] } &#x60;&#x60;&#x60;  Or you can create more complicated queries with AND and OR: &#x60;&#x60;&#x60;json {     \&quot;properties\&quot;: {         \&quot;type\&quot;: \&quot;AND\&quot;,         \&quot;values\&quot;: [             {                 \&quot;type\&quot;: \&quot;OR\&quot;,                 \&quot;values\&quot;: [                     {\&quot;key\&quot;: \&quot;email\&quot;, ...},                     {\&quot;key\&quot;: \&quot;email\&quot;, ...}                 ]             },             {                 \&quot;type\&quot;: \&quot;AND\&quot;,                 \&quot;values\&quot;: [                     {\&quot;key\&quot;: \&quot;email\&quot;, ...},                     {\&quot;key\&quot;: \&quot;email\&quot;, ...}                 ]             }         ]     ] } &#x60;&#x60;&#x60;  (default to TypeEnum.AND).</param>
        /// <param name="values">values (required).</param>
        public Property(TypeEnum? type = TypeEnum.AND, List<PropertyItem> values = default(List<PropertyItem>))
        {
            // to ensure "values" is required (not null)
            if (values == null)
            {
                throw new ArgumentNullException("values is a required property for Property and cannot be null");
            }
            this.Values = values;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name = "values", IsRequired = true, EmitDefaultValue = true)]
        public List<PropertyItem> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Property {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Property);
        }

        /// <summary>
        /// Returns true if Property instances are equal
        /// </summary>
        /// <param name="input">Instance of Property to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Property input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Values != null)
                {
                    hashCode = (hashCode * 59) + this.Values.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
