/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DotPostHog.Client.OpenAPIDateConverter;

namespace DotPostHog.Model
{
    /// <summary>
    /// PostHogEvent
    /// </summary>
    [DataContract(Name = "Event")]
    public partial class PostHogEvent : IEquatable<PostHogEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostHogEvent" /> class.
        /// </summary>
        /// <param name="varEvent">varEvent.</param>
        /// <param name="offset">offset.</param>
        /// <param name="distinctId">distinctId.</param>
        /// <param name="sysDistinctId">sysDistinctId.</param>
        /// <param name="sysToken">sysToken.</param>
        /// <param name="projectId">projectId.</param>
        /// <param name="apiKey">apiKey.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="uuid">uuid.</param>
        /// <param name="type">type.</param>
        /// <param name="sysSet">Set person property to a given values. If the property does not  exist, it will be set. If the property already exists, it will be updated to the new value. The type of the property will be inferred from the value. .</param>
        /// <param name="sysSetOnce">Set person property to a given value, but only if it is not currently set. It will not override existing values. The type of the property will be inferred from the value. .</param>
        /// <param name="properties">properties.</param>
        public PostHogEvent(string varEvent = default(string), decimal offset = default(decimal), string distinctId = default(string), string sysDistinctId = default(string), string sysToken = default(string), int projectId = default(int), string apiKey = default(string), DateTime timestamp = default(DateTime), Guid uuid = default(Guid), string type = default(string), Dictionary<string, Object> sysSet = default(Dictionary<string, Object>), Object sysSetOnce = default(Object), PostHogEventProperties properties = default(PostHogEventProperties))
        {
            this.VarEvent = varEvent;
            this.Offset = offset;
            this.DistinctId = distinctId;
            this.SysDistinctId = sysDistinctId;
            this.SysToken = sysToken;
            this.ProjectId = projectId;
            this.ApiKey = apiKey;
            this.Timestamp = timestamp;
            this.Uuid = uuid;
            this.Type = type;
            this.SysSet = sysSet;
            this.SysSetOnce = sysSetOnce;
            this.Properties = properties;
        }

        /// <summary>
        /// Gets or Sets VarEvent
        /// </summary>
        [DataMember(Name = "event", EmitDefaultValue = false)]
        public string VarEvent { get; set; }

        /// <summary>
        /// Gets or Sets Offset
        /// </summary>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public decimal Offset { get; set; }

        /// <summary>
        /// Gets or Sets DistinctId
        /// </summary>
        [DataMember(Name = "distinct_id", EmitDefaultValue = false)]
        public string DistinctId { get; set; }

        /// <summary>
        /// Gets or Sets SysDistinctId
        /// </summary>
        [DataMember(Name = "$distinct_id", EmitDefaultValue = false)]
        public string SysDistinctId { get; set; }

        /// <summary>
        /// Gets or Sets SysToken
        /// </summary>
        [DataMember(Name = "$token", EmitDefaultValue = false)]
        public string SysToken { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name = "project_id", EmitDefaultValue = false)]
        public int ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [DataMember(Name = "api_key", EmitDefaultValue = false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public Guid Uuid { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Set person property to a given values. If the property does not  exist, it will be set. If the property already exists, it will be updated to the new value. The type of the property will be inferred from the value. 
        /// </summary>
        /// <value>Set person property to a given values. If the property does not  exist, it will be set. If the property already exists, it will be updated to the new value. The type of the property will be inferred from the value. </value>
        /// <example>{&quot;$set&quot;:{&quot;country&quot;:&quot;UK&quot;,&quot;city&quot;:&quot;Cambridge&quot;}}</example>
        [DataMember(Name = "$set", EmitDefaultValue = false)]
        public Dictionary<string, Object> SysSet { get; set; }

        /// <summary>
        /// Set person property to a given value, but only if it is not currently set. It will not override existing values. The type of the property will be inferred from the value. 
        /// </summary>
        /// <value>Set person property to a given value, but only if it is not currently set. It will not override existing values. The type of the property will be inferred from the value. </value>
        /// <example>{&quot;$set_once&quot;:{&quot;initial_referrer&quot;:&quot;https://google.com&quot;}}</example>
        [DataMember(Name = "$set_once", EmitDefaultValue = false)]
        public Object SysSetOnce { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public PostHogEventProperties Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostHogEvent {\n");
            sb.Append("  VarEvent: ").Append(VarEvent).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  DistinctId: ").Append(DistinctId).Append("\n");
            sb.Append("  SysDistinctId: ").Append(SysDistinctId).Append("\n");
            sb.Append("  SysToken: ").Append(SysToken).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SysSet: ").Append(SysSet).Append("\n");
            sb.Append("  SysSetOnce: ").Append(SysSetOnce).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostHogEvent);
        }

        /// <summary>
        /// Returns true if PostHogEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of PostHogEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostHogEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarEvent == input.VarEvent ||
                    (this.VarEvent != null &&
                    this.VarEvent.Equals(input.VarEvent))
                ) && 
                (
                    this.Offset == input.Offset ||
                    this.Offset.Equals(input.Offset)
                ) && 
                (
                    this.DistinctId == input.DistinctId ||
                    (this.DistinctId != null &&
                    this.DistinctId.Equals(input.DistinctId))
                ) && 
                (
                    this.SysDistinctId == input.SysDistinctId ||
                    (this.SysDistinctId != null &&
                    this.SysDistinctId.Equals(input.SysDistinctId))
                ) && 
                (
                    this.SysToken == input.SysToken ||
                    (this.SysToken != null &&
                    this.SysToken.Equals(input.SysToken))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    this.ProjectId.Equals(input.ProjectId)
                ) && 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SysSet == input.SysSet ||
                    this.SysSet != null &&
                    input.SysSet != null &&
                    this.SysSet.SequenceEqual(input.SysSet)
                ) && 
                (
                    this.SysSetOnce == input.SysSetOnce ||
                    (this.SysSetOnce != null &&
                    this.SysSetOnce.Equals(input.SysSetOnce))
                ) && 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.Equals(input.Properties))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VarEvent != null)
                {
                    hashCode = (hashCode * 59) + this.VarEvent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Offset.GetHashCode();
                if (this.DistinctId != null)
                {
                    hashCode = (hashCode * 59) + this.DistinctId.GetHashCode();
                }
                if (this.SysDistinctId != null)
                {
                    hashCode = (hashCode * 59) + this.SysDistinctId.GetHashCode();
                }
                if (this.SysToken != null)
                {
                    hashCode = (hashCode * 59) + this.SysToken.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                if (this.ApiKey != null)
                {
                    hashCode = (hashCode * 59) + this.ApiKey.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.SysSet != null)
                {
                    hashCode = (hashCode * 59) + this.SysSet.GetHashCode();
                }
                if (this.SysSetOnce != null)
                {
                    hashCode = (hashCode * 59) + this.SysSetOnce.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
