/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using DotPostHog.Client;
using DotPostHog.Api;
// uncomment below to import models
//using DotPostHog.Model;

namespace DotPostHog.Test.Api
{
    /// <summary>
    ///  Class for testing CohortsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CohortsApiTests : IDisposable
    {
        private CohortsApi instance;

        public CohortsApiTests()
        {
            instance = new CohortsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CohortsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CohortsApi
            //Assert.IsType<CohortsApi>(instance);
        }

        /// <summary>
        /// Test CohortsCreate
        /// </summary>
        [Fact]
        public void CohortsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //Cohort cohort = null;
            //var response = instance.CohortsCreate(projectId, cohort);
            //Assert.IsType<Cohort>(response);
        }

        /// <summary>
        /// Test CohortsDestroy
        /// </summary>
        [Fact]
        public void CohortsDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //instance.CohortsDestroy(id, projectId);
        }

        /// <summary>
        /// Test CohortsDuplicateAsStaticCohortRetrieve
        /// </summary>
        [Fact]
        public void CohortsDuplicateAsStaticCohortRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //var response = instance.CohortsDuplicateAsStaticCohortRetrieve(id, projectId);
            //Assert.IsType<Cohort>(response);
        }

        /// <summary>
        /// Test CohortsList
        /// </summary>
        [Fact]
        public void CohortsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.CohortsList(projectId, limit, offset);
            //Assert.IsType<PaginatedCohortList>(response);
        }

        /// <summary>
        /// Test CohortsPartialUpdate
        /// </summary>
        [Fact]
        public void CohortsPartialUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //PatchedCohort patchedCohort = null;
            //var response = instance.CohortsPartialUpdate(id, projectId, patchedCohort);
            //Assert.IsType<Cohort>(response);
        }

        /// <summary>
        /// Test CohortsPersonsRetrieve
        /// </summary>
        [Fact]
        public void CohortsPersonsRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //string format = null;
            //var response = instance.CohortsPersonsRetrieve(id, projectId, format);
            //Assert.IsType<Cohort>(response);
        }

        /// <summary>
        /// Test CohortsRetrieve
        /// </summary>
        [Fact]
        public void CohortsRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //var response = instance.CohortsRetrieve(id, projectId);
            //Assert.IsType<Cohort>(response);
        }

        /// <summary>
        /// Test CohortsUpdate
        /// </summary>
        [Fact]
        public void CohortsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //Cohort cohort = null;
            //var response = instance.CohortsUpdate(id, projectId, cohort);
            //Assert.IsType<Cohort>(response);
        }
    }
}
