/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using DotPostHog.Client;
using DotPostHog.Api;
// uncomment below to import models
//using DotPostHog.Model;

namespace DotPostHog.Test.Api
{
    /// <summary>
    ///  Class for testing RolesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RolesApiTests : IDisposable
    {
        private RolesApi instance;

        public RolesApiTests()
        {
            instance = new RolesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RolesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' RolesApi
            //Assert.IsType<RolesApi>(instance);
        }

        /// <summary>
        /// Test RolesCreate
        /// </summary>
        [Fact]
        public void RolesCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parentLookupOrganizationId = null;
            //Role role = null;
            //var response = instance.RolesCreate(parentLookupOrganizationId, role);
            //Assert.IsType<Role>(response);
        }

        /// <summary>
        /// Test RolesDestroy
        /// </summary>
        [Fact]
        public void RolesDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string parentLookupOrganizationId = null;
            //instance.RolesDestroy(id, parentLookupOrganizationId);
        }

        /// <summary>
        /// Test RolesList
        /// </summary>
        [Fact]
        public void RolesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parentLookupOrganizationId = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.RolesList(parentLookupOrganizationId, limit, offset);
            //Assert.IsType<PaginatedRoleList>(response);
        }

        /// <summary>
        /// Test RolesPartialUpdate
        /// </summary>
        [Fact]
        public void RolesPartialUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string parentLookupOrganizationId = null;
            //PatchedRole patchedRole = null;
            //var response = instance.RolesPartialUpdate(id, parentLookupOrganizationId, patchedRole);
            //Assert.IsType<Role>(response);
        }

        /// <summary>
        /// Test RolesRetrieve
        /// </summary>
        [Fact]
        public void RolesRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string parentLookupOrganizationId = null;
            //var response = instance.RolesRetrieve(id, parentLookupOrganizationId);
            //Assert.IsType<Role>(response);
        }

        /// <summary>
        /// Test RolesRoleMembershipsCreate
        /// </summary>
        [Fact]
        public void RolesRoleMembershipsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parentLookupOrganizationId = null;
            //string parentLookupRoleId = null;
            //RoleMembership roleMembership = null;
            //var response = instance.RolesRoleMembershipsCreate(parentLookupOrganizationId, parentLookupRoleId, roleMembership);
            //Assert.IsType<RoleMembership>(response);
        }

        /// <summary>
        /// Test RolesRoleMembershipsDestroy
        /// </summary>
        [Fact]
        public void RolesRoleMembershipsDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string parentLookupOrganizationId = null;
            //string parentLookupRoleId = null;
            //instance.RolesRoleMembershipsDestroy(id, parentLookupOrganizationId, parentLookupRoleId);
        }

        /// <summary>
        /// Test RolesRoleMembershipsList
        /// </summary>
        [Fact]
        public void RolesRoleMembershipsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parentLookupOrganizationId = null;
            //string parentLookupRoleId = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.RolesRoleMembershipsList(parentLookupOrganizationId, parentLookupRoleId, limit, offset);
            //Assert.IsType<PaginatedRoleMembershipList>(response);
        }

        /// <summary>
        /// Test RolesUpdate
        /// </summary>
        [Fact]
        public void RolesUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string parentLookupOrganizationId = null;
            //Role role = null;
            //var response = instance.RolesUpdate(id, parentLookupOrganizationId, role);
            //Assert.IsType<Role>(response);
        }
    }
}
