/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using DotPostHog.Client;
using DotPostHog.Api;
// uncomment below to import models
//using DotPostHog.Model;

namespace DotPostHog.Test.Api
{
    /// <summary>
    ///  Class for testing ExternalDataSourcesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ExternalDataSourcesApiTests : IDisposable
    {
        private ExternalDataSourcesApi instance;

        public ExternalDataSourcesApiTests()
        {
            instance = new ExternalDataSourcesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ExternalDataSourcesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ExternalDataSourcesApi
            //Assert.IsType<ExternalDataSourcesApi>(instance);
        }

        /// <summary>
        /// Test ExternalDataSourcesCreate
        /// </summary>
        [Fact]
        public void ExternalDataSourcesCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //ExternalDataSourceSerializers externalDataSourceSerializers = null;
            //var response = instance.ExternalDataSourcesCreate(projectId, externalDataSourceSerializers);
            //Assert.IsType<ExternalDataSourceSerializers>(response);
        }

        /// <summary>
        /// Test ExternalDataSourcesDestroy
        /// </summary>
        [Fact]
        public void ExternalDataSourcesDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string projectId = null;
            //instance.ExternalDataSourcesDestroy(id, projectId);
        }

        /// <summary>
        /// Test ExternalDataSourcesList
        /// </summary>
        [Fact]
        public void ExternalDataSourcesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //int? limit = null;
            //int? offset = null;
            //string search = null;
            //var response = instance.ExternalDataSourcesList(projectId, limit, offset, search);
            //Assert.IsType<PaginatedExternalDataSourceSerializersList>(response);
        }

        /// <summary>
        /// Test ExternalDataSourcesPartialUpdate
        /// </summary>
        [Fact]
        public void ExternalDataSourcesPartialUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string projectId = null;
            //PatchedExternalDataSourceSerializers patchedExternalDataSourceSerializers = null;
            //var response = instance.ExternalDataSourcesPartialUpdate(id, projectId, patchedExternalDataSourceSerializers);
            //Assert.IsType<ExternalDataSourceSerializers>(response);
        }

        /// <summary>
        /// Test ExternalDataSourcesReloadCreate
        /// </summary>
        [Fact]
        public void ExternalDataSourcesReloadCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string projectId = null;
            //ExternalDataSourceSerializers externalDataSourceSerializers = null;
            //var response = instance.ExternalDataSourcesReloadCreate(id, projectId, externalDataSourceSerializers);
            //Assert.IsType<ExternalDataSourceSerializers>(response);
        }

        /// <summary>
        /// Test ExternalDataSourcesRetrieve
        /// </summary>
        [Fact]
        public void ExternalDataSourcesRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string projectId = null;
            //var response = instance.ExternalDataSourcesRetrieve(id, projectId);
            //Assert.IsType<ExternalDataSourceSerializers>(response);
        }

        /// <summary>
        /// Test ExternalDataSourcesUpdate
        /// </summary>
        [Fact]
        public void ExternalDataSourcesUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string projectId = null;
            //ExternalDataSourceSerializers externalDataSourceSerializers = null;
            //var response = instance.ExternalDataSourcesUpdate(id, projectId, externalDataSourceSerializers);
            //Assert.IsType<ExternalDataSourceSerializers>(response);
        }
    }
}
