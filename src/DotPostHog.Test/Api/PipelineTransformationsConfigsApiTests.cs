/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using DotPostHog.Client;
using DotPostHog.Api;
// uncomment below to import models
//using DotPostHog.Model;

namespace DotPostHog.Test.Api
{
    /// <summary>
    ///  Class for testing PipelineTransformationsConfigsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PipelineTransformationsConfigsApiTests : IDisposable
    {
        private PipelineTransformationsConfigsApi instance;

        public PipelineTransformationsConfigsApiTests()
        {
            instance = new PipelineTransformationsConfigsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PipelineTransformationsConfigsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' PipelineTransformationsConfigsApi
            //Assert.IsType<PipelineTransformationsConfigsApi>(instance);
        }

        /// <summary>
        /// Test PipelineTransformationsConfigsCreate
        /// </summary>
        [Fact]
        public void PipelineTransformationsConfigsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //PostHogPluginConfig postHogPluginConfig = null;
            //var response = instance.PipelineTransformationsConfigsCreate(projectId, postHogPluginConfig);
            //Assert.IsType<PostHogPluginConfig>(response);
        }

        /// <summary>
        /// Test PipelineTransformationsConfigsDestroy
        /// </summary>
        [Fact]
        public void PipelineTransformationsConfigsDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //instance.PipelineTransformationsConfigsDestroy(id, projectId);
        }

        /// <summary>
        /// Test PipelineTransformationsConfigsFrontendRetrieve
        /// </summary>
        [Fact]
        public void PipelineTransformationsConfigsFrontendRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //var response = instance.PipelineTransformationsConfigsFrontendRetrieve(id, projectId);
            //Assert.IsType<PostHogPluginConfig>(response);
        }

        /// <summary>
        /// Test PipelineTransformationsConfigsJobCreate
        /// </summary>
        [Fact]
        public void PipelineTransformationsConfigsJobCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //PostHogPluginConfig postHogPluginConfig = null;
            //var response = instance.PipelineTransformationsConfigsJobCreate(id, projectId, postHogPluginConfig);
            //Assert.IsType<PostHogPluginConfig>(response);
        }

        /// <summary>
        /// Test PipelineTransformationsConfigsList
        /// </summary>
        [Fact]
        public void PipelineTransformationsConfigsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.PipelineTransformationsConfigsList(projectId, limit, offset);
            //Assert.IsType<PostHogPaginatedPluginConfigList>(response);
        }

        /// <summary>
        /// Test PipelineTransformationsConfigsPartialUpdate
        /// </summary>
        [Fact]
        public void PipelineTransformationsConfigsPartialUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //PostHogPatchedPluginConfig postHogPatchedPluginConfig = null;
            //var response = instance.PipelineTransformationsConfigsPartialUpdate(id, projectId, postHogPatchedPluginConfig);
            //Assert.IsType<PostHogPluginConfig>(response);
        }

        /// <summary>
        /// Test PipelineTransformationsConfigsRearrangePartialUpdate
        /// </summary>
        [Fact]
        public void PipelineTransformationsConfigsRearrangePartialUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //PostHogPatchedPluginConfig postHogPatchedPluginConfig = null;
            //var response = instance.PipelineTransformationsConfigsRearrangePartialUpdate(projectId, postHogPatchedPluginConfig);
            //Assert.IsType<PostHogPluginConfig>(response);
        }

        /// <summary>
        /// Test PipelineTransformationsConfigsRetrieve
        /// </summary>
        [Fact]
        public void PipelineTransformationsConfigsRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //var response = instance.PipelineTransformationsConfigsRetrieve(id, projectId);
            //Assert.IsType<PostHogPluginConfig>(response);
        }

        /// <summary>
        /// Test PipelineTransformationsConfigsUpdate
        /// </summary>
        [Fact]
        public void PipelineTransformationsConfigsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //PostHogPluginConfig postHogPluginConfig = null;
            //var response = instance.PipelineTransformationsConfigsUpdate(id, projectId, postHogPluginConfig);
            //Assert.IsType<PostHogPluginConfig>(response);
        }
    }
}
