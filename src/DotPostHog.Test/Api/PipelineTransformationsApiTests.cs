/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using DotPostHog.Client;
using DotPostHog.Api;
// uncomment below to import models
//using DotPostHog.Model;

namespace DotPostHog.Test.Api
{
    /// <summary>
    ///  Class for testing PipelineTransformationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PipelineTransformationsApiTests : IDisposable
    {
        private PipelineTransformationsApi instance;

        public PipelineTransformationsApiTests()
        {
            instance = new PipelineTransformationsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PipelineTransformationsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' PipelineTransformationsApi
            //Assert.IsType<PipelineTransformationsApi>(instance);
        }

        /// <summary>
        /// Test PipelineTransformationsActivityRetrieve
        /// </summary>
        [Fact]
        public void PipelineTransformationsActivityRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parentLookupOrganizationId = null;
            //var response = instance.PipelineTransformationsActivityRetrieve(parentLookupOrganizationId);
            //Assert.IsType<PostHogPlugin>(response);
        }

        /// <summary>
        /// Test PipelineTransformationsCheckForUpdatesRetrieve
        /// </summary>
        [Fact]
        public void PipelineTransformationsCheckForUpdatesRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string parentLookupOrganizationId = null;
            //var response = instance.PipelineTransformationsCheckForUpdatesRetrieve(id, parentLookupOrganizationId);
            //Assert.IsType<PostHogPlugin>(response);
        }

        /// <summary>
        /// Test PipelineTransformationsCreate
        /// </summary>
        [Fact]
        public void PipelineTransformationsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parentLookupOrganizationId = null;
            //PostHogPlugin postHogPlugin = null;
            //var response = instance.PipelineTransformationsCreate(parentLookupOrganizationId, postHogPlugin);
            //Assert.IsType<PostHogPlugin>(response);
        }

        /// <summary>
        /// Test PipelineTransformationsDestroy
        /// </summary>
        [Fact]
        public void PipelineTransformationsDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string parentLookupOrganizationId = null;
            //instance.PipelineTransformationsDestroy(id, parentLookupOrganizationId);
        }

        /// <summary>
        /// Test PipelineTransformationsList
        /// </summary>
        [Fact]
        public void PipelineTransformationsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parentLookupOrganizationId = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.PipelineTransformationsList(parentLookupOrganizationId, limit, offset);
            //Assert.IsType<PostHogPaginatedPluginList>(response);
        }

        /// <summary>
        /// Test PipelineTransformationsPartialUpdate
        /// </summary>
        [Fact]
        public void PipelineTransformationsPartialUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string parentLookupOrganizationId = null;
            //PostHogPatchedPlugin postHogPatchedPlugin = null;
            //var response = instance.PipelineTransformationsPartialUpdate(id, parentLookupOrganizationId, postHogPatchedPlugin);
            //Assert.IsType<PostHogPlugin>(response);
        }

        /// <summary>
        /// Test PipelineTransformationsRepositoryRetrieve
        /// </summary>
        [Fact]
        public void PipelineTransformationsRepositoryRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parentLookupOrganizationId = null;
            //var response = instance.PipelineTransformationsRepositoryRetrieve(parentLookupOrganizationId);
            //Assert.IsType<PostHogPlugin>(response);
        }

        /// <summary>
        /// Test PipelineTransformationsRetrieve
        /// </summary>
        [Fact]
        public void PipelineTransformationsRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string parentLookupOrganizationId = null;
            //var response = instance.PipelineTransformationsRetrieve(id, parentLookupOrganizationId);
            //Assert.IsType<PostHogPlugin>(response);
        }

        /// <summary>
        /// Test PipelineTransformationsSourceRetrieve
        /// </summary>
        [Fact]
        public void PipelineTransformationsSourceRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string parentLookupOrganizationId = null;
            //var response = instance.PipelineTransformationsSourceRetrieve(id, parentLookupOrganizationId);
            //Assert.IsType<PostHogPlugin>(response);
        }

        /// <summary>
        /// Test PipelineTransformationsUnusedRetrieve
        /// </summary>
        [Fact]
        public void PipelineTransformationsUnusedRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parentLookupOrganizationId = null;
            //var response = instance.PipelineTransformationsUnusedRetrieve(parentLookupOrganizationId);
            //Assert.IsType<PostHogPlugin>(response);
        }

        /// <summary>
        /// Test PipelineTransformationsUpdate
        /// </summary>
        [Fact]
        public void PipelineTransformationsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string parentLookupOrganizationId = null;
            //PostHogPlugin postHogPlugin = null;
            //var response = instance.PipelineTransformationsUpdate(id, parentLookupOrganizationId, postHogPlugin);
            //Assert.IsType<PostHogPlugin>(response);
        }

        /// <summary>
        /// Test PipelineTransformationsUpdateSourcePartialUpdate
        /// </summary>
        [Fact]
        public void PipelineTransformationsUpdateSourcePartialUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string parentLookupOrganizationId = null;
            //PostHogPatchedPlugin postHogPatchedPlugin = null;
            //var response = instance.PipelineTransformationsUpdateSourcePartialUpdate(id, parentLookupOrganizationId, postHogPatchedPlugin);
            //Assert.IsType<PostHogPlugin>(response);
        }

        /// <summary>
        /// Test PipelineTransformationsUpgradeCreate
        /// </summary>
        [Fact]
        public void PipelineTransformationsUpgradeCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string parentLookupOrganizationId = null;
            //PostHogPlugin postHogPlugin = null;
            //var response = instance.PipelineTransformationsUpgradeCreate(id, parentLookupOrganizationId, postHogPlugin);
            //Assert.IsType<PostHogPlugin>(response);
        }
    }
}
