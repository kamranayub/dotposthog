/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using DotPostHog.Client;
using DotPostHog.Api;
// uncomment below to import models
//using DotPostHog.Model;

namespace DotPostHog.Test.Api
{
    /// <summary>
    ///  Class for testing SessionRecordingPlaylistsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SessionRecordingPlaylistsApiTests : IDisposable
    {
        private SessionRecordingPlaylistsApi instance;

        public SessionRecordingPlaylistsApiTests()
        {
            instance = new SessionRecordingPlaylistsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SessionRecordingPlaylistsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SessionRecordingPlaylistsApi
            //Assert.IsType<SessionRecordingPlaylistsApi>(instance);
        }

        /// <summary>
        /// Test SessionRecordingPlaylistsCreate
        /// </summary>
        [Fact]
        public void SessionRecordingPlaylistsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = null;
            //var response = instance.SessionRecordingPlaylistsCreate(projectId, postHogSessionRecordingPlaylist);
            //Assert.IsType<PostHogSessionRecordingPlaylist>(response);
        }

        /// <summary>
        /// Test SessionRecordingPlaylistsDestroy
        /// </summary>
        [Fact]
        public void SessionRecordingPlaylistsDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string shortId = null;
            //instance.SessionRecordingPlaylistsDestroy(projectId, shortId);
        }

        /// <summary>
        /// Test SessionRecordingPlaylistsList
        /// </summary>
        [Fact]
        public void SessionRecordingPlaylistsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //int? createdBy = null;
            //int? limit = null;
            //int? offset = null;
            //string shortId = null;
            //var response = instance.SessionRecordingPlaylistsList(projectId, createdBy, limit, offset, shortId);
            //Assert.IsType<PostHogPaginatedSessionRecordingPlaylistList>(response);
        }

        /// <summary>
        /// Test SessionRecordingPlaylistsPartialUpdate
        /// </summary>
        [Fact]
        public void SessionRecordingPlaylistsPartialUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string shortId = null;
            //PostHogPatchedSessionRecordingPlaylist postHogPatchedSessionRecordingPlaylist = null;
            //var response = instance.SessionRecordingPlaylistsPartialUpdate(projectId, shortId, postHogPatchedSessionRecordingPlaylist);
            //Assert.IsType<PostHogSessionRecordingPlaylist>(response);
        }

        /// <summary>
        /// Test SessionRecordingPlaylistsRecordingsCreate
        /// </summary>
        [Fact]
        public void SessionRecordingPlaylistsRecordingsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string sessionRecordingId = null;
            //string shortId = null;
            //PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = null;
            //var response = instance.SessionRecordingPlaylistsRecordingsCreate(projectId, sessionRecordingId, shortId, postHogSessionRecordingPlaylist);
            //Assert.IsType<PostHogSessionRecordingPlaylist>(response);
        }

        /// <summary>
        /// Test SessionRecordingPlaylistsRecordingsDestroy
        /// </summary>
        [Fact]
        public void SessionRecordingPlaylistsRecordingsDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string sessionRecordingId = null;
            //string shortId = null;
            //instance.SessionRecordingPlaylistsRecordingsDestroy(projectId, sessionRecordingId, shortId);
        }

        /// <summary>
        /// Test SessionRecordingPlaylistsRecordingsRetrieve
        /// </summary>
        [Fact]
        public void SessionRecordingPlaylistsRecordingsRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string shortId = null;
            //var response = instance.SessionRecordingPlaylistsRecordingsRetrieve(projectId, shortId);
            //Assert.IsType<PostHogSessionRecordingPlaylist>(response);
        }

        /// <summary>
        /// Test SessionRecordingPlaylistsRetrieve
        /// </summary>
        [Fact]
        public void SessionRecordingPlaylistsRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string shortId = null;
            //var response = instance.SessionRecordingPlaylistsRetrieve(projectId, shortId);
            //Assert.IsType<PostHogSessionRecordingPlaylist>(response);
        }

        /// <summary>
        /// Test SessionRecordingPlaylistsUpdate
        /// </summary>
        [Fact]
        public void SessionRecordingPlaylistsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string shortId = null;
            //PostHogSessionRecordingPlaylist postHogSessionRecordingPlaylist = null;
            //var response = instance.SessionRecordingPlaylistsUpdate(projectId, shortId, postHogSessionRecordingPlaylist);
            //Assert.IsType<PostHogSessionRecordingPlaylist>(response);
        }
    }
}
