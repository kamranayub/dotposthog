/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using DotPostHog.Client;
using DotPostHog.Api;
// uncomment below to import models
//using DotPostHog.Model;

namespace DotPostHog.Test.Api
{
    /// <summary>
    ///  Class for testing SubscriptionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SubscriptionsApiTests : IDisposable
    {
        private SubscriptionsApi instance;

        public SubscriptionsApiTests()
        {
            instance = new SubscriptionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SubscriptionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SubscriptionsApi
            //Assert.IsType<SubscriptionsApi>(instance);
        }

        /// <summary>
        /// Test SubscriptionsCreate
        /// </summary>
        [Fact]
        public void SubscriptionsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //Subscription subscription = null;
            //var response = instance.SubscriptionsCreate(projectId, subscription);
            //Assert.IsType<Subscription>(response);
        }

        /// <summary>
        /// Test SubscriptionsDestroy
        /// </summary>
        [Fact]
        public void SubscriptionsDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //instance.SubscriptionsDestroy(id, projectId);
        }

        /// <summary>
        /// Test SubscriptionsList
        /// </summary>
        [Fact]
        public void SubscriptionsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.SubscriptionsList(projectId, limit, offset);
            //Assert.IsType<PaginatedSubscriptionList>(response);
        }

        /// <summary>
        /// Test SubscriptionsPartialUpdate
        /// </summary>
        [Fact]
        public void SubscriptionsPartialUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //PatchedSubscription patchedSubscription = null;
            //var response = instance.SubscriptionsPartialUpdate(id, projectId, patchedSubscription);
            //Assert.IsType<Subscription>(response);
        }

        /// <summary>
        /// Test SubscriptionsRetrieve
        /// </summary>
        [Fact]
        public void SubscriptionsRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //var response = instance.SubscriptionsRetrieve(id, projectId);
            //Assert.IsType<Subscription>(response);
        }

        /// <summary>
        /// Test SubscriptionsUpdate
        /// </summary>
        [Fact]
        public void SubscriptionsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //Subscription subscription = null;
            //var response = instance.SubscriptionsUpdate(id, projectId, subscription);
            //Assert.IsType<Subscription>(response);
        }
    }
}
