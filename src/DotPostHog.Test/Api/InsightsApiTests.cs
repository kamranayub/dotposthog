/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using DotPostHog.Client;
using DotPostHog.Api;
// uncomment below to import models
//using DotPostHog.Model;

namespace DotPostHog.Test.Api
{
    /// <summary>
    ///  Class for testing InsightsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class InsightsApiTests : IDisposable
    {
        private InsightsApi instance;

        public InsightsApiTests()
        {
            instance = new InsightsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of InsightsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' InsightsApi
            //Assert.IsType<InsightsApi>(instance);
        }

        /// <summary>
        /// Test Funnels
        /// </summary>
        [Fact]
        public void FunnelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string format = null;
            //Funnel funnel = null;
            //var response = instance.Funnels(projectId, format, funnel);
            //Assert.IsType<FunnelStepsResults>(response);
        }

        /// <summary>
        /// Test InsightsActivityRetrieve
        /// </summary>
        [Fact]
        public void InsightsActivityRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string format = null;
            //var response = instance.InsightsActivityRetrieve(projectId, format);
            //Assert.IsType<Insight>(response);
        }

        /// <summary>
        /// Test InsightsActivityRetrieve2
        /// </summary>
        [Fact]
        public void InsightsActivityRetrieve2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //string format = null;
            //var response = instance.InsightsActivityRetrieve2(id, projectId, format);
            //Assert.IsType<Insight>(response);
        }

        /// <summary>
        /// Test InsightsCancelCreate
        /// </summary>
        [Fact]
        public void InsightsCancelCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string format = null;
            //Insight insight = null;
            //var response = instance.InsightsCancelCreate(projectId, format, insight);
            //Assert.IsType<Insight>(response);
        }

        /// <summary>
        /// Test InsightsCreate
        /// </summary>
        [Fact]
        public void InsightsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string format = null;
            //Insight insight = null;
            //var response = instance.InsightsCreate(projectId, format, insight);
            //Assert.IsType<Insight>(response);
        }

        /// <summary>
        /// Test InsightsDestroy
        /// </summary>
        [Fact]
        public void InsightsDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //string format = null;
            //instance.InsightsDestroy(id, projectId, format);
        }

        /// <summary>
        /// Test InsightsFunnelCorrelationCreate
        /// </summary>
        [Fact]
        public void InsightsFunnelCorrelationCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string format = null;
            //Insight insight = null;
            //var response = instance.InsightsFunnelCorrelationCreate(projectId, format, insight);
            //Assert.IsType<Insight>(response);
        }

        /// <summary>
        /// Test InsightsFunnelCorrelationRetrieve
        /// </summary>
        [Fact]
        public void InsightsFunnelCorrelationRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string format = null;
            //var response = instance.InsightsFunnelCorrelationRetrieve(projectId, format);
            //Assert.IsType<Insight>(response);
        }

        /// <summary>
        /// Test InsightsFunnelRetrieve
        /// </summary>
        [Fact]
        public void InsightsFunnelRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string format = null;
            //var response = instance.InsightsFunnelRetrieve(projectId, format);
            //Assert.IsType<Insight>(response);
        }

        /// <summary>
        /// Test InsightsList
        /// </summary>
        [Fact]
        public void InsightsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //int? createdBy = null;
            //string format = null;
            //int? limit = null;
            //int? offset = null;
            //string shortId = null;
            //var response = instance.InsightsList(projectId, createdBy, format, limit, offset, shortId);
            //Assert.IsType<PaginatedInsightList>(response);
        }

        /// <summary>
        /// Test InsightsMyLastViewedRetrieve
        /// </summary>
        [Fact]
        public void InsightsMyLastViewedRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string format = null;
            //var response = instance.InsightsMyLastViewedRetrieve(projectId, format);
            //Assert.IsType<Insight>(response);
        }

        /// <summary>
        /// Test InsightsPartialUpdate
        /// </summary>
        [Fact]
        public void InsightsPartialUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //string format = null;
            //PatchedInsight patchedInsight = null;
            //var response = instance.InsightsPartialUpdate(id, projectId, format, patchedInsight);
            //Assert.IsType<Insight>(response);
        }

        /// <summary>
        /// Test InsightsPathCreate
        /// </summary>
        [Fact]
        public void InsightsPathCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string format = null;
            //Insight insight = null;
            //var response = instance.InsightsPathCreate(projectId, format, insight);
            //Assert.IsType<Insight>(response);
        }

        /// <summary>
        /// Test InsightsPathRetrieve
        /// </summary>
        [Fact]
        public void InsightsPathRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string format = null;
            //var response = instance.InsightsPathRetrieve(projectId, format);
            //Assert.IsType<Insight>(response);
        }

        /// <summary>
        /// Test InsightsRetentionRetrieve
        /// </summary>
        [Fact]
        public void InsightsRetentionRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string format = null;
            //var response = instance.InsightsRetentionRetrieve(projectId, format);
            //Assert.IsType<Insight>(response);
        }

        /// <summary>
        /// Test InsightsRetrieve
        /// </summary>
        [Fact]
        public void InsightsRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //string format = null;
            //int? fromDashboard = null;
            //bool? refresh = null;
            //var response = instance.InsightsRetrieve(id, projectId, format, fromDashboard, refresh);
            //Assert.IsType<Insight>(response);
        }

        /// <summary>
        /// Test InsightsTimingCreate
        /// </summary>
        [Fact]
        public void InsightsTimingCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string format = null;
            //Insight insight = null;
            //var response = instance.InsightsTimingCreate(projectId, format, insight);
            //Assert.IsType<Insight>(response);
        }

        /// <summary>
        /// Test InsightsTrendRetrieve
        /// </summary>
        [Fact]
        public void InsightsTrendRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string format = null;
            //var response = instance.InsightsTrendRetrieve(projectId, format);
            //Assert.IsType<Insight>(response);
        }

        /// <summary>
        /// Test InsightsUpdate
        /// </summary>
        [Fact]
        public void InsightsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //string format = null;
            //Insight insight = null;
            //var response = instance.InsightsUpdate(id, projectId, format, insight);
            //Assert.IsType<Insight>(response);
        }

        /// <summary>
        /// Test InsightsViewedCreate
        /// </summary>
        [Fact]
        public void InsightsViewedCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //string format = null;
            //Insight insight = null;
            //var response = instance.InsightsViewedCreate(id, projectId, format, insight);
            //Assert.IsType<Insight>(response);
        }

        /// <summary>
        /// Test Trends
        /// </summary>
        [Fact]
        public void TrendsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string format = null;
            //Trend trend = null;
            //var response = instance.Trends(projectId, format, trend);
            //Assert.IsType<TrendResults>(response);
        }
    }
}
