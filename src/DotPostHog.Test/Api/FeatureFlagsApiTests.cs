/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using DotPostHog.Client;
using DotPostHog.Api;
// uncomment below to import models
//using DotPostHog.Model;

namespace DotPostHog.Test.Api
{
    /// <summary>
    ///  Class for testing FeatureFlagsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class FeatureFlagsApiTests : IDisposable
    {
        private FeatureFlagsApi instance;

        public FeatureFlagsApiTests()
        {
            instance = new FeatureFlagsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of FeatureFlagsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' FeatureFlagsApi
            //Assert.IsType<FeatureFlagsApi>(instance);
        }

        /// <summary>
        /// Test FeatureFlagsActivityRetrieve
        /// </summary>
        [Fact]
        public void FeatureFlagsActivityRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //var response = instance.FeatureFlagsActivityRetrieve(projectId);
            //Assert.IsType<PostHogFeatureFlag>(response);
        }

        /// <summary>
        /// Test FeatureFlagsActivityRetrieve2
        /// </summary>
        [Fact]
        public void FeatureFlagsActivityRetrieve2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //var response = instance.FeatureFlagsActivityRetrieve2(id, projectId);
            //Assert.IsType<PostHogFeatureFlag>(response);
        }

        /// <summary>
        /// Test FeatureFlagsCopyFlagsCreate
        /// </summary>
        [Fact]
        public void FeatureFlagsCopyFlagsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parentLookupOrganizationId = null;
            //instance.FeatureFlagsCopyFlagsCreate(parentLookupOrganizationId);
        }

        /// <summary>
        /// Test FeatureFlagsCreate
        /// </summary>
        [Fact]
        public void FeatureFlagsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //PostHogFeatureFlag postHogFeatureFlag = null;
            //var response = instance.FeatureFlagsCreate(projectId, postHogFeatureFlag);
            //Assert.IsType<PostHogFeatureFlag>(response);
        }

        /// <summary>
        /// Test FeatureFlagsCreateStaticCohortForFlagCreate
        /// </summary>
        [Fact]
        public void FeatureFlagsCreateStaticCohortForFlagCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //PostHogFeatureFlag postHogFeatureFlag = null;
            //var response = instance.FeatureFlagsCreateStaticCohortForFlagCreate(id, projectId, postHogFeatureFlag);
            //Assert.IsType<PostHogFeatureFlag>(response);
        }

        /// <summary>
        /// Test FeatureFlagsDashboardCreate
        /// </summary>
        [Fact]
        public void FeatureFlagsDashboardCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //PostHogFeatureFlag postHogFeatureFlag = null;
            //var response = instance.FeatureFlagsDashboardCreate(id, projectId, postHogFeatureFlag);
            //Assert.IsType<PostHogFeatureFlag>(response);
        }

        /// <summary>
        /// Test FeatureFlagsDestroy
        /// </summary>
        [Fact]
        public void FeatureFlagsDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //instance.FeatureFlagsDestroy(id, projectId);
        }

        /// <summary>
        /// Test FeatureFlagsEnrichUsageDashboardCreate
        /// </summary>
        [Fact]
        public void FeatureFlagsEnrichUsageDashboardCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //PostHogFeatureFlag postHogFeatureFlag = null;
            //var response = instance.FeatureFlagsEnrichUsageDashboardCreate(id, projectId, postHogFeatureFlag);
            //Assert.IsType<PostHogFeatureFlag>(response);
        }

        /// <summary>
        /// Test FeatureFlagsEvaluationReasonsRetrieve
        /// </summary>
        [Fact]
        public void FeatureFlagsEvaluationReasonsRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //var response = instance.FeatureFlagsEvaluationReasonsRetrieve(projectId);
            //Assert.IsType<PostHogFeatureFlag>(response);
        }

        /// <summary>
        /// Test FeatureFlagsList
        /// </summary>
        [Fact]
        public void FeatureFlagsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.FeatureFlagsList(projectId, limit, offset);
            //Assert.IsType<PostHogPaginatedFeatureFlagList>(response);
        }

        /// <summary>
        /// Test FeatureFlagsLocalEvaluationRetrieve
        /// </summary>
        [Fact]
        public void FeatureFlagsLocalEvaluationRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //var response = instance.FeatureFlagsLocalEvaluationRetrieve(projectId);
            //Assert.IsType<PostHogFeatureFlag>(response);
        }

        /// <summary>
        /// Test FeatureFlagsMyFlagsRetrieve
        /// </summary>
        [Fact]
        public void FeatureFlagsMyFlagsRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //var response = instance.FeatureFlagsMyFlagsRetrieve(projectId);
            //Assert.IsType<PostHogFeatureFlag>(response);
        }

        /// <summary>
        /// Test FeatureFlagsPartialUpdate
        /// </summary>
        [Fact]
        public void FeatureFlagsPartialUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //PostHogPatchedFeatureFlag postHogPatchedFeatureFlag = null;
            //var response = instance.FeatureFlagsPartialUpdate(id, projectId, postHogPatchedFeatureFlag);
            //Assert.IsType<PostHogFeatureFlag>(response);
        }

        /// <summary>
        /// Test FeatureFlagsRetrieve
        /// </summary>
        [Fact]
        public void FeatureFlagsRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string featureFlagKey = null;
            //string parentLookupOrganizationId = null;
            //instance.FeatureFlagsRetrieve(featureFlagKey, parentLookupOrganizationId);
        }

        /// <summary>
        /// Test FeatureFlagsRetrieve2
        /// </summary>
        [Fact]
        public void FeatureFlagsRetrieve2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //var response = instance.FeatureFlagsRetrieve2(id, projectId);
            //Assert.IsType<PostHogFeatureFlag>(response);
        }

        /// <summary>
        /// Test FeatureFlagsRoleAccessCreate
        /// </summary>
        [Fact]
        public void FeatureFlagsRoleAccessCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parentLookupFeatureFlagId = null;
            //string projectId = null;
            //PostHogFeatureFlagRoleAccess postHogFeatureFlagRoleAccess = null;
            //var response = instance.FeatureFlagsRoleAccessCreate(parentLookupFeatureFlagId, projectId, postHogFeatureFlagRoleAccess);
            //Assert.IsType<PostHogFeatureFlagRoleAccess>(response);
        }

        /// <summary>
        /// Test FeatureFlagsRoleAccessDestroy
        /// </summary>
        [Fact]
        public void FeatureFlagsRoleAccessDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string parentLookupFeatureFlagId = null;
            //string projectId = null;
            //instance.FeatureFlagsRoleAccessDestroy(id, parentLookupFeatureFlagId, projectId);
        }

        /// <summary>
        /// Test FeatureFlagsRoleAccessList
        /// </summary>
        [Fact]
        public void FeatureFlagsRoleAccessListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parentLookupFeatureFlagId = null;
            //string projectId = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.FeatureFlagsRoleAccessList(parentLookupFeatureFlagId, projectId, limit, offset);
            //Assert.IsType<PostHogPaginatedFeatureFlagRoleAccessList>(response);
        }

        /// <summary>
        /// Test FeatureFlagsRoleAccessRetrieve
        /// </summary>
        [Fact]
        public void FeatureFlagsRoleAccessRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string parentLookupFeatureFlagId = null;
            //string projectId = null;
            //var response = instance.FeatureFlagsRoleAccessRetrieve(id, parentLookupFeatureFlagId, projectId);
            //Assert.IsType<PostHogFeatureFlagRoleAccess>(response);
        }

        /// <summary>
        /// Test FeatureFlagsUpdate
        /// </summary>
        [Fact]
        public void FeatureFlagsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string projectId = null;
            //PostHogFeatureFlag postHogFeatureFlag = null;
            //var response = instance.FeatureFlagsUpdate(id, projectId, postHogFeatureFlag);
            //Assert.IsType<PostHogFeatureFlag>(response);
        }

        /// <summary>
        /// Test FeatureFlagsUserBlastRadiusCreate
        /// </summary>
        [Fact]
        public void FeatureFlagsUserBlastRadiusCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //PostHogFeatureFlag postHogFeatureFlag = null;
            //var response = instance.FeatureFlagsUserBlastRadiusCreate(projectId, postHogFeatureFlag);
            //Assert.IsType<PostHogFeatureFlag>(response);
        }
    }
}
