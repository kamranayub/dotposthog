/*
 * PostHog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using DotPostHog.Client;
using DotPostHog.Api;
// uncomment below to import models
//using DotPostHog.Model;

namespace DotPostHog.Test.Api
{
    /// <summary>
    ///  Class for testing PluginsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PluginsApiTests : IDisposable
    {
        private PluginsApi instance;

        public PluginsApiTests()
        {
            instance = new PluginsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PluginsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' PluginsApi
            //Assert.IsType<PluginsApi>(instance);
        }

        /// <summary>
        /// Test PluginsActivityRetrieve
        /// </summary>
        [Fact]
        public void PluginsActivityRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parentLookupOrganizationId = null;
            //var response = instance.PluginsActivityRetrieve(parentLookupOrganizationId);
            //Assert.IsType<Plugin>(response);
        }

        /// <summary>
        /// Test PluginsCheckForUpdatesRetrieve
        /// </summary>
        [Fact]
        public void PluginsCheckForUpdatesRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string parentLookupOrganizationId = null;
            //var response = instance.PluginsCheckForUpdatesRetrieve(id, parentLookupOrganizationId);
            //Assert.IsType<Plugin>(response);
        }

        /// <summary>
        /// Test PluginsCreate
        /// </summary>
        [Fact]
        public void PluginsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parentLookupOrganizationId = null;
            //Plugin plugin = null;
            //var response = instance.PluginsCreate(parentLookupOrganizationId, plugin);
            //Assert.IsType<Plugin>(response);
        }

        /// <summary>
        /// Test PluginsDestroy
        /// </summary>
        [Fact]
        public void PluginsDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string parentLookupOrganizationId = null;
            //instance.PluginsDestroy(id, parentLookupOrganizationId);
        }

        /// <summary>
        /// Test PluginsList
        /// </summary>
        [Fact]
        public void PluginsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parentLookupOrganizationId = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.PluginsList(parentLookupOrganizationId, limit, offset);
            //Assert.IsType<PaginatedPluginList>(response);
        }

        /// <summary>
        /// Test PluginsPartialUpdate
        /// </summary>
        [Fact]
        public void PluginsPartialUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string parentLookupOrganizationId = null;
            //PatchedPlugin patchedPlugin = null;
            //var response = instance.PluginsPartialUpdate(id, parentLookupOrganizationId, patchedPlugin);
            //Assert.IsType<Plugin>(response);
        }

        /// <summary>
        /// Test PluginsRepositoryRetrieve
        /// </summary>
        [Fact]
        public void PluginsRepositoryRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parentLookupOrganizationId = null;
            //var response = instance.PluginsRepositoryRetrieve(parentLookupOrganizationId);
            //Assert.IsType<Plugin>(response);
        }

        /// <summary>
        /// Test PluginsRetrieve
        /// </summary>
        [Fact]
        public void PluginsRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string parentLookupOrganizationId = null;
            //var response = instance.PluginsRetrieve(id, parentLookupOrganizationId);
            //Assert.IsType<Plugin>(response);
        }

        /// <summary>
        /// Test PluginsSourceRetrieve
        /// </summary>
        [Fact]
        public void PluginsSourceRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string parentLookupOrganizationId = null;
            //var response = instance.PluginsSourceRetrieve(id, parentLookupOrganizationId);
            //Assert.IsType<Plugin>(response);
        }

        /// <summary>
        /// Test PluginsUnusedRetrieve
        /// </summary>
        [Fact]
        public void PluginsUnusedRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parentLookupOrganizationId = null;
            //var response = instance.PluginsUnusedRetrieve(parentLookupOrganizationId);
            //Assert.IsType<Plugin>(response);
        }

        /// <summary>
        /// Test PluginsUpdate
        /// </summary>
        [Fact]
        public void PluginsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string parentLookupOrganizationId = null;
            //Plugin plugin = null;
            //var response = instance.PluginsUpdate(id, parentLookupOrganizationId, plugin);
            //Assert.IsType<Plugin>(response);
        }

        /// <summary>
        /// Test PluginsUpdateSourcePartialUpdate
        /// </summary>
        [Fact]
        public void PluginsUpdateSourcePartialUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string parentLookupOrganizationId = null;
            //PatchedPlugin patchedPlugin = null;
            //var response = instance.PluginsUpdateSourcePartialUpdate(id, parentLookupOrganizationId, patchedPlugin);
            //Assert.IsType<Plugin>(response);
        }

        /// <summary>
        /// Test PluginsUpgradeCreate
        /// </summary>
        [Fact]
        public void PluginsUpgradeCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string parentLookupOrganizationId = null;
            //Plugin plugin = null;
            //var response = instance.PluginsUpgradeCreate(id, parentLookupOrganizationId, plugin);
            //Assert.IsType<Plugin>(response);
        }
    }
}
